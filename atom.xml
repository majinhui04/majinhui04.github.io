<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>马金慧的博客</title>
  
  <subtitle>斯人如彩虹，遇上方知有</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.barebear.cn/"/>
  <updated>2020-02-21T08:48:03.000Z</updated>
  <id>http://www.barebear.cn/</id>
  
  <author>
    <name>Ma JinHui</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>package.json 非官方字段集合</title>
    <link href="http://www.barebear.cn/web-extend/package/"/>
    <id>http://www.barebear.cn/web-extend/package/</id>
    <published>2020-02-21T09:15:56.000Z</published>
    <updated>2020-02-21T08:48:03.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>package.json</code> 官方字段请参考 <a href="https://docs.npmjs.com/files/package.json" target="_blank" rel="noopener">https://docs.npmjs.com/files/package.json</a>。下面介绍的是非官方字段，也就是各种工具定义的相关字段。</p><a id="more"></a><h2 id="1-yarn-相关字段"><a href="#1-yarn-相关字段" class="headerlink" title="1. yarn 相关字段"></a>1. <a href="https://github.com/yarnpkg/yarn" target="_blank" rel="noopener">yarn</a> 相关字段</h2><p><a href="https://github.com/yarnpkg/yarn" target="_blank" rel="noopener">yarn</a>: 类似 <code>npm</code> 的依赖管理工具，但 <code>yarn</code> 缓存了每个下载过的包，所以再次使用时无需重复下载，同时利用并行下载以最大化资源利用率，因此安装速度更快。</p><h3 id="flat"><a href="#flat" class="headerlink" title="flat"></a><code>flat</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;flat&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你的包只允许给定依赖的一个版本，你想强制和命令行上 <code>yarn install --flat</code> 相同的行为，把这个值设为 <code>true</code>。</p><p>详细参考 <a href="https://yarnpkg.com/zh-Hans/docs/package-json#toc-flat" target="_blank" rel="noopener">yarn - flat</a>.</p><h3 id="resolutions"><a href="#resolutions" class="headerlink" title="resolutions"></a><code>resolutions</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;resolutions&quot;: &#123;</span><br><span class="line">    &quot;transitive-package-1&quot;: &quot;0.0.29&quot;,</span><br><span class="line">    &quot;transitive-package-2&quot;: &quot;file:.&#x2F;local-forks&#x2F;transitive-package-2&quot;,</span><br><span class="line">    &quot;dependencies-package-1&#x2F;transitive-package-3&quot;: &quot;^2.1.1&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>允许你覆盖特定嵌套依赖项的版本。有关完整规范，请参见<a href="https://github.com/yarnpkg/rfcs/blob/master/implemented/0000-selective-versions-resolutions.md" target="_blank" rel="noopener">选择性版本解析 RFC</a>。</p><p>详细参考 <a href="https://yarnpkg.com/zh-Hans/docs/package-json#toc-resolutions" target="_blank" rel="noopener">yarn - resolutions</a>.</p><h2 id="2-unpkg-相关字段"><a href="#2-unpkg-相关字段" class="headerlink" title="2. unpkg 相关字段"></a>2. <a href="https://github.com/unpkg/unpkg.com" target="_blank" rel="noopener">unpkg</a> 相关字段</h2><p><a href="https://github.com/unpkg/unpkg.com" target="_blank" rel="noopener">unpkg</a>: 让 <code>npm</code> 上所有的文件都开启 <code>cdn</code> 服务。</p><h3 id="unpkg"><a href="#unpkg" class="headerlink" title="unpkg"></a><code>unpkg</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># jquery</span><br><span class="line">&#123;</span><br><span class="line">  &quot;unpkg&quot;: &quot;dist&#x2F;jquery.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正常情况下，访问 <code>jquery</code> 的发布文件通过 <code>https://unpkg.com/jquery@3.3.1/dist/jquery.js</code>，当你使用省略的 url <code>https://unpkg.com/jquery</code> 时，便会按照如下的方式获取文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># [latestVersion] 指最新版本号，pkg 指 package.json</span><br><span class="line"></span><br><span class="line"># 定义了 unpkg 属性时</span><br><span class="line">https:&#x2F;&#x2F;unpkg.com&#x2F;jquery@[latestVersion]&#x2F;[pkg.unpkg]</span><br><span class="line"></span><br><span class="line"># 未定义 unpkg 属性时，将回退到 main 属性</span><br><span class="line">https:&#x2F;&#x2F;unpkg.com&#x2F;jquery@[latestVersion]&#x2F;[pkg.main]</span><br></pre></td></tr></table></figure><p>详细参考 <a href="https://unpkg.com" target="_blank" rel="noopener">https://unpkg.com</a>.</p><h2 id="3-TypeScript-相关字段"><a href="#3-TypeScript-相关字段" class="headerlink" title="3. TypeScript 相关字段"></a>3. <a href="https://github.com/Microsoft/TypeScript" target="_blank" rel="noopener">TypeScript</a> 相关字段</h2><p><a href="https://github.com/Microsoft/TypeScript" target="_blank" rel="noopener">TypeScript</a>: <code>JavaScript</code> 的超集</p><h3 id="types-typings"><a href="#types-typings" class="headerlink" title="types, typings"></a><code>types</code>, <code>typings</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;main&quot;: &quot;.&#x2F;lib&#x2F;main.js&quot;,</span><br><span class="line">  &quot;types&quot;: &quot;.&#x2F;lib&#x2F;main.d.ts&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就像 <code>main</code> 字段一样，定义一个针对 <code>TypeScript</code> 的入口文件。</p><p>详细参考 <a href="https://www.typescriptlang.org/docs/handbook/declaration-files/publishing.html" target="_blank" rel="noopener">TypeScript documentation</a>.</p><h2 id="4-browserslist-相关字段"><a href="#4-browserslist-相关字段" class="headerlink" title="4. browserslist 相关字段"></a>4. <a href="https://github.com/browserslist/browserslist" target="_blank" rel="noopener">browserslist</a> 相关字段</h2><p><a href="https://github.com/browserslist/browserslist" target="_blank" rel="noopener">browserslist</a>: 设置项目的浏览器兼容情况。</p><h3 id="browserslist"><a href="#browserslist" class="headerlink" title="browserslist"></a><code>browserslist</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;browserslist&quot;: [</span><br><span class="line">    &quot;&gt; 1%&quot;,</span><br><span class="line">    &quot;last 2 versions&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>支持的工具：</p><ul><li><a href="https://github.com/postcss/autoprefixer" target="_blank" rel="noopener">Autoprefixer</a></li><li><a href="https://github.com/babel/babel/tree/master/packages/babel-preset-env" target="_blank" rel="noopener">Babel</a></li><li><a href="https://github.com/jonathantneal/postcss-preset-env" target="_blank" rel="noopener">postcss-preset-env</a></li><li><a href="https://github.com/amilajack/eslint-plugin-compat" target="_blank" rel="noopener">eslint-plugin-compat</a></li><li><a href="https://github.com/ismay/stylelint-no-unsupported-browser-features" target="_blank" rel="noopener">stylelint-no-unsupported-browser-features</a></li><li><a href="https://github.com/jonathantneal/postcss-normalize" target="_blank" rel="noopener">postcss-normalize</a></li></ul><p>详细参考 <a href="https://github.com/browserslist/browserslist" target="_blank" rel="noopener">browserslist</a>.</p><h2 id="5-发行打包相关字段"><a href="#5-发行打包相关字段" class="headerlink" title="5. 发行打包相关字段"></a>5. 发行打包相关字段</h2><p>点击 <a href="http://2ality.com/2017/04/setting-up-multi-platform-packages.html#support-by-bundlers" target="_blank" rel="noopener">Setting up multi-platform npm packages</a> 查看相关介绍。</p><h3 id="module"><a href="#module" class="headerlink" title="module"></a><code>module</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;main&quot;: &quot;.&#x2F;lib&#x2F;main.js&quot;,</span><br><span class="line">  &quot;module&quot;: &quot;.&#x2F;lib&#x2F;main.m.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就像 <code>main</code> 字段一样，定义一个针对 <code>es6</code> 模块及语法的入口文件。</p><p>构建工具在构建项目的时候，如果发现了这个字段，会首先使用这个字段指向的文件，如果未定义，则回退到 <code>main</code> 字段指向的文件。</p><p>支持的工具：</p><ul><li><a href="https://github.com/rollup/rollup-plugin-node-resolve" target="_blank" rel="noopener">rollup</a></li><li><a href="https://webpack.js.org/configuration/resolve/#resolve-mainfields" target="_blank" rel="noopener">webpack</a></li></ul><p>详细参考 <a href="https://github.com/rollup/rollup/wiki/pkg.module" target="_blank" rel="noopener">rollup - pkg.module</a>.</p><h3 id="browser"><a href="#browser" class="headerlink" title="browser"></a><code>browser</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;main&quot;: &quot;.&#x2F;lib&#x2F;main.js&quot;,</span><br><span class="line">  &quot;browser&quot;: &quot;.&#x2F;lib&#x2F;main.b.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指定该模块供浏览器使用的入口文件。</p><p>如果这个字段未定义，则回退到 <code>main</code> 字段指向的文件。</p><p>支持的工具：</p><ul><li><a href="https://github.com/rollup/rollup-plugin-node-resolve" target="_blank" rel="noopener">rollup</a></li><li><a href="https://webpack.js.org/configuration/resolve/#resolve-mainfields" target="_blank" rel="noopener">webpack</a></li><li><a href="https://github.com/browserify/browserify-handbook#browser-field" target="_blank" rel="noopener">browserify</a></li></ul><p>详细参考 <a href="https://github.com/tleunen/babel-plugin-module-resolver/issues/41" target="_blank" rel="noopener">babel-plugin-module-resolver</a>.</p><h3 id="esnext"><a href="#esnext" class="headerlink" title="esnext"></a><code>esnext</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;main&quot;: &quot;main.js&quot;,</span><br><span class="line">  &quot;esnext&quot;: &quot;main-esnext.js&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># or</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;main&quot;: &quot;main.js&quot;,</span><br><span class="line">  &quot;esnext&quot;: &#123;</span><br><span class="line">    &quot;main&quot;: &quot;main-esnext.js&quot;,</span><br><span class="line">    &quot;browser&quot;: &quot;browser-specific-main-esnext.js&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>es</code> 模块化规范，<code>stage 4</code> 特性的源代码。</p><p>详细参考 <a href="http://2ality.com/2017/04/transpiling-dependencies-babel.html" target="_blank" rel="noopener">Transpiling dependencies with Babel</a>, <a href="http://2ality.com/2017/06/pkg-esnext.html" target="_blank" rel="noopener">Delivering untranspiled source code via npm</a>.</p><h3 id="es2015"><a href="#es2015" class="headerlink" title="es2015"></a><code>es2015</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;main&quot;: &quot;main.js&quot;,</span><br><span class="line">  &quot;es2015&quot;: &quot;main-es2015.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/angular/angular" target="_blank" rel="noopener">Angular</a> 定义的未转码的 <code>es6</code> 源码。</p><p>详细参考 <a href="https://docs.google.com/document/d/1CZC2rcpxffTDfRDs6p1cfbmKNLA6x5O-NtkJglDaBVs/edit#" target="_blank" rel="noopener">https://docs.google.com/document/d/1CZC2rcpxffTDfRDs6p1cfbmKNLA6x5O-NtkJglDaBVs/edit#</a>.</p><h3 id="esm"><a href="#esm" class="headerlink" title="esm"></a><code>esm</code></h3><p>详细参考 <a href="https://github.com/nodejs/node-eps/pull/60" target="_blank" rel="noopener">adjusted proposal: ES module “esm”: true package.json flag</a>.</p><h2 id="6-react-native-相关字段"><a href="#6-react-native-相关字段" class="headerlink" title="6. react-native 相关字段"></a>6. <a href="https://github.com/facebook/react-native" target="_blank" rel="noopener">react-native</a> 相关字段</h2><p><a href="https://github.com/facebook/react-native" target="_blank" rel="noopener">react-native</a>: 使用 <a href="https://github.com/facebook/react" target="_blank" rel="noopener">react</a> 组件技术写原生 APP。</p><h3 id="react-native"><a href="#react-native" class="headerlink" title="react-native"></a><code>react-native</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;main&quot;: &quot;.&#x2F;lib&#x2F;main.js&quot;,</span><br><span class="line">  &quot;react-native&quot;: &quot;.&#x2F;lib&#x2F;main.react-native.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指定该模块供 <code>react-native</code> 使用的入口文件。</p><p>如果这个字段未定义，则回退到 <code>main</code> 字段指向的文件。</p><p><a href="https://github.com/facebook/metro/blob/a29d30327365f3f52652f68d53896355021cc693/packages/metro/src/node-haste/Package.js#L45" target="_blank" rel="noopener">源代码查看</a>.</p><h2 id="7-webpack-相关字段"><a href="#7-webpack-相关字段" class="headerlink" title="7. webpack 相关字段"></a>7. <a href="https://github.com/webpack/webpack" target="_blank" rel="noopener">webpack</a> 相关字段</h2><h3 id="sideEffects"><a href="#sideEffects" class="headerlink" title="sideEffects"></a><code>sideEffects</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;sideEffects&quot;: true|false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明该模块是否包含 <code>sideEffects</code>（副作用），从而可以为 <code>tree-shaking</code> 提供更大的优化空间。</p><p>详细参考 <a href="https://github.com/webpack/webpack/tree/master/examples/side-effects" target="_blank" rel="noopener">sideEffects example</a>, <a href="https://github.com/rollup/rollup/issues/1293" target="_blank" rel="noopener">proposal for marking functions as pure</a>, <a href="https://www.npmjs.com/package/eslint-plugin-tree-shaking" target="_blank" rel="noopener">eslint-plugin-tree-shaking</a>.</p><h2 id="8-microbundle-相关字段"><a href="#8-microbundle-相关字段" class="headerlink" title="8. microbundle 相关字段"></a>8. <a href="https://github.com/developit/microbundle" target="_blank" rel="noopener">microbundle</a> 相关字段</h2><p><a href="https://github.com/developit/microbundle" target="_blank" rel="noopener">microbundle</a>: 基于 <a href="https://github.com/rollup/rollup" target="_blank" rel="noopener">rollup</a> 零配置快速打包工具。</p><h3 id="source"><a href="#source" class="headerlink" title="source"></a><code>source</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;source&quot;： &quot;src&#x2F;index.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源文件入口文件。</p><p>详细参考 <a href="https://github.com/developit/microbundle#specifying-builds-in-packagejson" target="_blank" rel="noopener">Specifying builds in package.json</a>.</p><h3 id="umd-main"><a href="#umd-main" class="headerlink" title="umd:main"></a><code>umd:main</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;umd:main&quot;： &quot;dist&#x2F;main.umd.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>umd</code> 模式 <code>bundle</code> 文件。</p><p>详细参考 <a href="https://github.com/developit/microbundle#specifying-builds-in-packagejson" target="_blank" rel="noopener">Specifying builds in package.json</a>.</p><h2 id="8-parcel-相关字段"><a href="#8-parcel-相关字段" class="headerlink" title="8. parcel 相关字段"></a>8. <a href="https://github.com/parcel-bundler/parcel" target="_blank" rel="noopener">parcel</a> 相关字段</h2><p><a href="https://github.com/parcel-bundler/parcel" target="_blank" rel="noopener">parcel</a>: 零配置打包工具。</p><h3 id="source-1"><a href="#source-1" class="headerlink" title="source"></a><code>source</code></h3><p>查看 <a href="https://github.com/parcel-bundler/parcel/issues/1652" target="_blank" rel="noopener">parcel-bundler/parcel#1652</a>.</p><h2 id="9-babel-相关字段"><a href="#9-babel-相关字段" class="headerlink" title="9. babel 相关字段"></a>9. <a href="https://github.com/babel/babel" target="_blank" rel="noopener">babel</a> 相关字段</h2><p><a href="https://github.com/babel/babel" target="_blank" rel="noopener">babel</a>: <code>es6 -&gt; es5</code> 转码器。</p><h3 id="babel"><a href="#babel" class="headerlink" title="babel"></a><code>babel</code></h3><p>配置 <code>babel</code>。</p><h2 id="10-eslint-相关字段"><a href="#10-eslint-相关字段" class="headerlink" title="10. eslint 相关字段"></a>10. <a href="https://github.com/eslint/eslint" target="_blank" rel="noopener">eslint</a> 相关字段</h2><p><a href="https://github.com/eslint/eslint" target="_blank" rel="noopener">eslint</a>: <code>js</code> 代码检查与优化。</p><h3 id="eslintConfig"><a href="#eslintConfig" class="headerlink" title="eslintConfig"></a><code>eslintConfig</code></h3><p>配置 <code>eslint</code>。</p><h2 id="11-jest-相关字段"><a href="#11-jest-相关字段" class="headerlink" title="11. jest 相关字段"></a>11. <a href="https://github.com/facebook/jest" target="_blank" rel="noopener">jest</a> 相关字段</h2><p><a href="https://github.com/facebook/jest" target="_blank" rel="noopener">jest</a>: <code>js</code> 测试库。</p><h3 id="jest"><a href="#jest" class="headerlink" title="jest"></a><code>jest</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;jest&quot;: &#123;</span><br><span class="line">    &quot;verbose&quot;: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置 <code>jest</code>。</p><p>详细参考 <a href="https://jest-bot.github.io/jest/docs/configuration.html" target="_blank" rel="noopener">jest docs</a>.</p><h2 id="12-stylelint-相关字段"><a href="#12-stylelint-相关字段" class="headerlink" title="12. stylelint 相关字段"></a>12. <a href="https://github.com/stylelint/stylelint" target="_blank" rel="noopener">stylelint</a> 相关字段</h2><p><a href="https://github.com/stylelint/stylelint" target="_blank" rel="noopener">stylelint</a>: <code>style</code> 代码检查与优化。</p><h3 id="stylelint"><a href="#stylelint" class="headerlink" title="stylelint"></a><code>stylelint</code></h3><p>配置 <code>stylelint</code>。</p><p>详细参考 <a href="https://github.com/stylelint/stylelint/issues/490" target="_blank" rel="noopener">New configuration loader</a>.</p><h2 id="13-ava-相关字段"><a href="#13-ava-相关字段" class="headerlink" title="13. ava 相关字段"></a>13. <a href="https://github.com/avajs/ava" target="_blank" rel="noopener">ava</a> 相关字段</h2><p><a href="https://github.com/avajs/ava" target="_blank" rel="noopener">ava</a>: <code>js</code> 测试库。</p><h3 id="ava"><a href="#ava" class="headerlink" title="ava"></a><code>ava</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;ava&quot;: &#123;</span><br><span class="line">    &quot;require&quot;: [ &quot;@std&#x2F;esm&quot; ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置 <code>ava</code>。</p><p>详细参考 <a href="https://github.com/avajs/ava#configuration" target="_blank" rel="noopener">ava configuration</a>.</p><h2 id="14-nyc-相关字段"><a href="#14-nyc-相关字段" class="headerlink" title="14. nyc 相关字段"></a>14. <a href="https://github.com/istanbuljs/nyc" target="_blank" rel="noopener">nyc</a> 相关字段</h2><p><a href="https://github.com/istanbuljs/nyc" target="_blank" rel="noopener">nyc</a>: <a href="https://istanbul.js.org/" target="_blank" rel="noopener">istanbul.js</a> 命令行。</p><h3 id="nyc"><a href="#nyc" class="headerlink" title="nyc"></a><code>nyc</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;nyc&quot;: &#123;</span><br><span class="line">    &quot;extension&quot;: [&quot;.js&quot;, &quot;.mjs&quot;],</span><br><span class="line">    &quot;require&quot;: [&quot;@std&#x2F;esm&quot;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置 <code>nyc</code>。</p><p>详细参考 <a href="https://github.com/istanbuljs/nyc#use-with-babel-plugin-istanbul-for-babel-support" target="_blank" rel="noopener">nyc docs</a>.</p><h2 id="15-CommonJS-保留字段"><a href="#15-CommonJS-保留字段" class="headerlink" title="15. CommonJS 保留字段"></a>15. CommonJS 保留字段</h2><p>保留字段: <code>build</code>, <code>default</code>, <code>email</code>, <code>external</code>, <code>files</code>, <code>imports</code>, <code>maintainer</code>, <code>paths</code>, <code>platform</code>, <code>require</code>, <code>summary</code>, <code>test</code>, <code>using</code>, <code>downloads</code>, <code>uid</code>.</p><p>不可用字段: <code>id</code>, <code>type</code>, 以 <code>_</code> 和 <code>$</code> 开头的字段。</p><h2 id="16-Standard-JS-相关字段"><a href="#16-Standard-JS-相关字段" class="headerlink" title="16. Standard JS 相关字段"></a>16. <a href="https://github.com/standard/standard" target="_blank" rel="noopener">Standard JS</a> 相关字段</h2><p><a href="https://github.com/standard/standard" target="_blank" rel="noopener">Standard JS</a>: <code>js</code> 代码检查与优化。</p><h3 id="standard"><a href="#standard" class="headerlink" title="standard"></a><code>standard</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;standard&quot;: &#123;</span><br><span class="line">    &quot;parser&quot;: &quot;babel-eslint&quot;,</span><br><span class="line">    &quot;ignore&quot;: [</span><br><span class="line">      &quot;**&#x2F;out&#x2F;&quot;,</span><br><span class="line">      &quot;&#x2F;lib&#x2F;select2&#x2F;&quot;,</span><br><span class="line">      &quot;&#x2F;lib&#x2F;ckeditor&#x2F;&quot;,</span><br><span class="line">      &quot;tmp.js&quot;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置 <code>standard</code>.</p><p>详细参考 <a href="https://standardjs.com/" target="_blank" rel="noopener">https://standardjs.com/</a>.</p><h2 id="17-其他"><a href="#17-其他" class="headerlink" title="17. 其他"></a>17. 其他</h2><h3 id="style"><a href="#style" class="headerlink" title="style"></a><code>style</code></h3><p>声明当前模块包含 <code>style</code> 部分，并指定入口文件。</p><p>支持的工具：</p><ul><li><a href="https://github.com/rotundasoftware/parcelify" target="_blank" rel="noopener">parcelify</a></li><li><a href="https://github.com/Raynos/npm-less" target="_blank" rel="noopener">npm-less</a></li><li><a href="https://github.com/reworkcss/rework-npm" target="_blank" rel="noopener">rework-npm</a></li><li><a href="https://github.com/defunctzombie/npm-css" target="_blank" rel="noopener">npm-css</a></li></ul><p>详细参考 <a href="https://jaketrent.com/post/package-json-style-attribute/" target="_blank" rel="noopener">Package.json “style” Attribute</a>, <a href="https://github.com/cssinjs/istf-spec" target="_blank" rel="noopener">istf-spec</a>.</p><h3 id="less"><a href="#less" class="headerlink" title="less"></a><code>less</code></h3><p>与 <code>style</code> 一样，但是是 <code>less</code> 文件。</p><p>支持的工具：</p><ul><li><a href="https://github.com/Raynos/npm-less" target="_blank" rel="noopener">npm-less</a></li></ul><h2 id="18-更多"><a href="#18-更多" class="headerlink" title="18. 更多"></a>18. 更多</h2><p>参考 <a href="https://github.com/stereobooster/package.json" target="_blank" rel="noopener">package.json fields explained</a>.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;package.json&lt;/code&gt; 官方字段请参考 &lt;a href=&quot;https://docs.npmjs.com/files/package.json&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.npmjs.com/files/package.json&lt;/a&gt;。下面介绍的是非官方字段，也就是各种工具定义的相关字段。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端进阶" scheme="http://www.barebear.cn/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="前端" scheme="http://www.barebear.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="npm" scheme="http://www.barebear.cn/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>react 前端项目技术选型、开发工具、周边生态</title>
    <link href="http://www.barebear.cn/web-extend/react/"/>
    <id>http://www.barebear.cn/web-extend/react/</id>
    <published>2020-02-21T09:10:56.000Z</published>
    <updated>2020-02-21T08:44:45.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>声明：这不是一篇介绍 React 基础知识的文章，需要熟悉 React 相关知识</p></blockquote><ul><li><p>主架构：<a href="https://github.com/facebook/react" target="_blank" rel="noopener">react</a>, <a href="https://github.com/ReactTraining/react-router" target="_blank" rel="noopener">react-router</a>, <a href="https://github.com/reduxjs/redux" target="_blank" rel="noopener">redux</a>, <a href="https://github.com/reduxjs/redux-thunk" target="_blank" rel="noopener">redux-thunk</a>, <a href="https://github.com/redux-saga/redux-saga" target="_blank" rel="noopener">redux-saga</a>, <a href="https://github.com/reduxjs/react-redux" target="_blank" rel="noopener">react-redux</a>, <a href="https://github.com/dvajs/dva" target="_blank" rel="noopener">dva</a>, <a href="https://github.com/umijs/umi" target="_blank" rel="noopener">umi</a></p></li><li><p>扩展架构：<a href="https://github.com/styled-components/styled-components" target="_blank" rel="noopener">styled-components</a>, <a href="https://github.com/acdlite/recompose" target="_blank" rel="noopener">recompose</a>, <a href="https://github.com/jamiebuilds/react-loadable" target="_blank" rel="noopener">react-loadable</a></p></li><li><p>UI 框架：<a href="https://github.com/ant-design/ant-design" target="_blank" rel="noopener">ant-design</a>, <a href="https://github.com/ant-design/ant-design-mobile" target="_blank" rel="noopener">ant-design-mobile</a>, <a href="https://github.com/mui-org/material-ui" target="_blank" rel="noopener">material-ui</a>, <a href="https://github.com/Semantic-Org/Semantic-UI-React" target="_blank" rel="noopener">Semantic-UI-React</a>, <a href="https://github.com/palantir/blueprint" target="_blank" rel="noopener">blueprint</a>, <a href="https://github.com/react-bootstrap/react-bootstrap" target="_blank" rel="noopener">react-bootstrap</a></p></li><li><p>服务器端渲染：<a href="https://github.com/zeit/next.js" target="_blank" rel="noopener">next.js</a>, <a href="https://github.com/jaredpalmer/razzle" target="_blank" rel="noopener">razzle</a>, <a href="https://github.com/redfin/react-server" target="_blank" rel="noopener">react-server</a>, <a href="https://github.com/alibaba/beidou" target="_blank" rel="noopener">beidou</a></p></li><li><p>开发工具：<a href="https://github.com/storybooks/storybook" target="_blank" rel="noopener">storybook</a>, <a href="https://github.com/facebook/react-devtools" target="_blank" rel="noopener">react-devtools</a>, <a href="https://github.com/reduxjs/redux-devtools" target="_blank" rel="noopener">redux-devtools</a>, <a href="https://github.com/zalmoxisus/redux-devtools-extension" target="_blank" rel="noopener">redux-devtools-extension</a></p></li><li><p>测试：<a href="https://github.com/airbnb/enzyme" target="_blank" rel="noopener">enzyme</a>, <a href="https://github.com/kentcdodds/react-testing-library" target="_blank" rel="noopener">react-testing-library</a>, <a href="https://github.com/facebook/jest" target="_blank" rel="noopener">jest</a></p></li><li><p>替代库：<a href="https://github.com/developit/preact" target="_blank" rel="noopener">preact</a>, <a href="https://github.com/infernojs/inferno" target="_blank" rel="noopener">inferno</a></p></li><li><p>插件库：<a href="https://github.com/chenglou/react-motion" target="_blank" rel="noopener">react-motion</a>, <a href="https://github.com/JedWatson/react-select" target="_blank" rel="noopener">react-select</a>, <a href="https://github.com/reduxjs/reselect" target="_blank" rel="noopener">reselect</a>, <a href="https://github.com/atlassian/react-beautiful-dnd" target="_blank" rel="noopener">react-beautiful-dnd</a>, <a href="https://github.com/Flipboard/react-canvas" target="_blank" rel="noopener">react-canvas</a>, <a href="https://github.com/erikras/redux-form" target="_blank" rel="noopener">redux-form</a>, <a href="https://github.com/recharts/recharts" target="_blank" rel="noopener">recharts</a>, <a href="https://github.com/react-dnd/react-dnd" target="_blank" rel="noopener">react-dnd</a>, <a href="https://github.com/nfl/react-helmet" target="_blank" rel="noopener">react-helmet</a></p></li></ul><a id="more"></a><h2 id="1-架构选型演进"><a href="#1-架构选型演进" class="headerlink" title="1. 架构选型演进"></a>1. 架构选型演进</h2><ol><li>如果页面比较简单，可以只用 <code>react</code></li><li>如果需要本地路由功能，比如在单页面应用（SPA）中维持多个页面，并且可以本地控制路由跳转逻辑，这时就需要搭配使用 <code>react-router</code></li><li>一般稍复杂的页面都会遇到一些问题：组件之间的通信问题（比如 A 组件想要改变 B 组件的 <code>state</code>）、跨组件数据储存与共享问题（比如多页面购物车数据存储）。<code>react</code> 本身并不能很好的解决这个问题，需要搭配使用 <code>redux</code></li><li><code>redux</code> 本身只实现了 <a href="https://github.com/facebook/flux" target="_blank" rel="noopener">flux</a> 理念，以及一些基础的功能，但在使用中，还需要扩展一些功能，比如异步派发 <code>action</code>，这时可以选择搭配使用 <code>redux-thunk</code> 来解决异步派发 <code>action</code> 的问题。另外，也是选择 <code>redux-saga</code>，但 <code>redux-saga</code> 不仅仅是异步派发 <code>action</code>，它拥有强大的异步数据流处理功能，几乎改变了整个 <code>redux</code> 的使用方式，是个重量级的家伙，如果是庞大且复杂的项目，推荐使用 <code>redux-saga</code></li><li><code>redux</code> 本身并不与 <code>react</code> 绑定，你依然可以把 <code>redux</code> 与 <a href="https://github.com/vuejs/vue" target="_blank" rel="noopener">vue</a>、<a href="https://github.com/angular/angular" target="_blank" rel="noopener">angular</a> 等其他框架一起使用。为了使 <code>redux</code> 与 <code>react</code> 开发时更流畅，可以使用 <code>react-redux</code> 把两者链接起来，这样开发体验更佳</li><li>当在一个大型项目中使用以上的架构，就会使项目变得异常复杂和不可控（比如目录结构、<code>action</code> 定义方式等），这时就需要用 <code>dva</code> 来简化数据流操作，降低项目的复杂度</li><li>以上涉及的都是代码层面的架构，如果搭配 <code>umi</code> 一起使用，会有更佳的开发体验。<code>umi</code> 内部使用 <a href="https://github.com/sorrycc/roadhog" target="_blank" rel="noopener">roadhog</a>(<a href="https://github.com/webpack/webpack" target="_blank" rel="noopener">webpack</a> 封装库)， 具有动态路由、<code>dva model</code> 的自动加载、通过插件支持 PWA(Progressive Web App)、以路由为单元的 code splitting 等</li></ol><p>总结：</p><ol><li>简单页面直接用 <code>react</code>，如果需要本地路由功能再加 <code>react-router</code></li><li>如果需要跨组件通信、共享数据的话，不太复杂的页面可以用 <code>redux</code> + <code>redux-thunk</code>，复杂的页面可以用 <code>redux</code> + <code>redux-saga</code></li><li>复杂大型应用（比如整个项目就是一个单页面应用），可以用 <code>react</code> + <code>react-router</code> + <code>redux</code> + <code>redux-saga</code> + <code>react-redux</code> + <code>dva</code> + <code>umi</code></li></ol><h2 id="2-一些扩展的可选架构"><a href="#2-一些扩展的可选架构" class="headerlink" title="2. 一些扩展的可选架构"></a>2. 一些扩展的可选架构</h2><h3 id="2-1-styled-components"><a href="#2-1-styled-components" class="headerlink" title="2.1 styled-components"></a>2.1 <a href="https://github.com/styled-components/styled-components" target="_blank" rel="noopener">styled-components</a></h3><p>使用 <code>styled-components</code>，可以把 <code>css</code> 样式代码写到 <code>js</code> 文件中。</p><p>一般来说，写一个 <code>react</code> 组件，需要如下的结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- ComponentA.js</span><br><span class="line">- ComponentA.css</span><br><span class="line">- ComponentB.js</span><br><span class="line">- ComponentB.css</span><br><span class="line">- ...</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># ComponentA.css</span><br><span class="line">.container &#123;</span><br><span class="line">  padding: 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ComponentA.js</span><br><span class="line">import styles from &#39;.&#x2F;ComponentA.css&#39;;</span><br><span class="line"></span><br><span class="line">export default props &#x3D;&gt; (</span><br><span class="line">  &lt;div className&#x3D;&#123;styles.container&#125;&gt;</span><br><span class="line">    &#123;props.children&#125;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>使用 <code>styled-components</code> 后，就可以去掉 <code>css</code> 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- ComponentA.js</span><br><span class="line">- ComponentB.js</span><br><span class="line">- ...</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># ComponentA.js</span><br><span class="line">import styled from &#39;styled-components&#39;;</span><br><span class="line"></span><br><span class="line">const Container &#x3D; styled.div&#96;</span><br><span class="line">  padding: 10px;</span><br><span class="line">&#96;;</span><br><span class="line"></span><br><span class="line">export default props &#x3D;&gt; (</span><br><span class="line">  &lt;Container&gt;</span><br><span class="line">    &#123;props.children&#125;</span><br><span class="line">  &lt;&#x2F;Container&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="2-2-recompose"><a href="#2-2-recompose" class="headerlink" title="2.2 recompose"></a>2.2 <a href="https://github.com/acdlite/recompose" target="_blank" rel="noopener">recompose</a></h3><p>写了大量 <code>react</code> 组件之后（特别是使用 <code>redux</code> + <code>react-redux</code> 之后，组件的 <code>state</code> 已经被剥离出去），感觉使用类声明式（<code>class</code>）写 <code>react</code> 组件其实并非最好的方式，而使用函数式组件会更佳：</p><ul><li>函数式组件逻辑更清晰</li><li>避免 <code>state</code> 被滥用</li></ul><p>类声明式写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">class Counter extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line"></span><br><span class="line">    this.state &#x3D; &#123;</span><br><span class="line">      counter: 0,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setCounter(cb) &#123;</span><br><span class="line">    const &#123; counter &#125; &#x3D; this.state;</span><br><span class="line"></span><br><span class="line">    setState(&#123;</span><br><span class="line">      counter: cb(counter),</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    const &#123; counter &#125; &#x3D; this.state;</span><br><span class="line">    const setCounter &#x3D; this.setCounter;</span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        Count: &#123;counter&#125;</span><br><span class="line">        &lt;button onClick&#x3D;&#123;() &#x3D;&gt; setCounter(n &#x3D;&gt; n + 1)&#125;&gt;Increment&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;button onClick&#x3D;&#123;() &#x3D;&gt; setCounter(n &#x3D;&gt; n - 1)&#125;&gt;Decrement&lt;&#x2F;button&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数式写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import &#123; withState &#125; from &#39;recompose&#39;</span><br><span class="line"></span><br><span class="line">const enhance &#x3D; withState(&#39;counter&#39;, &#39;setCounter&#39;, 0)</span><br><span class="line">const Counter &#x3D; enhance((&#123; counter, setCounter &#125;) &#x3D;&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    Count: &#123;counter&#125;</span><br><span class="line">    &lt;button onClick&#x3D;&#123;() &#x3D;&gt; setCounter(n &#x3D;&gt; n + 1)&#125;&gt;Increment&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;button onClick&#x3D;&#123;() &#x3D;&gt; setCounter(n &#x3D;&gt; n - 1)&#125;&gt;Decrement&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>相比较而言，函数式写法要清晰很多呢。</p><p>更多参考：<a href="https://zhuanlan.zhihu.com/p/42494044" target="_blank" rel="noopener">通过 Recompose 库掌握 React 函数组件</a></p><h3 id="2-3-react-loadable"><a href="#2-3-react-loadable" class="headerlink" title="2.3 react-loadable"></a>2.3 <a href="https://github.com/jamiebuilds/react-loadable" target="_blank" rel="noopener">react-loadable</a></h3><p>有些时候，我们想要动态的加载一些组件（按需加载），比如在一个单页面应用中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- pages</span><br><span class="line">  - PageA.js            # a 页面的组件</span><br><span class="line">  - PageB.js            # b 页面的组件</span><br><span class="line">  - PageC.js            # c 页面的组件</span><br><span class="line">  - ...</span><br></pre></td></tr></table></figure><p>只有真正要实例化当前页面的时候，才会去加载相应的组件。使用 <code>react-loadable</code> 封装原来的组件，然后使用封装后的组件，就像使用原来的组件一样，<code>react-loadable</code> 会自动帮我们处理脚本加载。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import Loadable from &#39;react-loadable&#39;;</span><br><span class="line">import Loading from &#39;.&#x2F;loading-component&#39;;       # 页面组件还没有加载成功时，显示一个 loading 组件</span><br><span class="line"></span><br><span class="line">const LoadableComponent &#x3D; Loadable(&#123;</span><br><span class="line">  loader: () &#x3D;&gt; import(&#39;.&#x2F;real-component-a&#39;),    # 动态加载真正的 A 组件</span><br><span class="line">  loading: Loading,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export default class ComponentA extends React.Component &#123;  # 封装后的组件，使用方式与原来一致</span><br><span class="line">  render() &#123;</span><br><span class="line">    return &lt;LoadableComponent&#x2F;&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-选择-UI-框架"><a href="#3-选择-UI-框架" class="headerlink" title="3. 选择 UI 框架"></a>3. 选择 UI 框架</h2><p>使用一个现成的 UI 框架，可以少写很多代码。</p><p>目前比较推荐的是：</p><ul><li><a href="https://github.com/ant-design/ant-design" target="_blank" rel="noopener">ant-design</a> + <a href="https://github.com/ant-design/ant-design-mobile" target="_blank" rel="noopener">ant-design-mobile</a>: 蚂蚁金服出品</li><li><a href="https://github.com/mui-org/material-ui" target="_blank" rel="noopener">material-ui</a>: google 材质设计的实现</li><li><a href="https://github.com/Semantic-Org/Semantic-UI-React" target="_blank" rel="noopener">Semantic-UI-React</a>: <a href="https://github.com/Semantic-Org/Semantic-UI" target="_blank" rel="noopener">Semantic-UI</a> for <code>react</code></li><li><a href="https://github.com/palantir/blueprint" target="_blank" rel="noopener">blueprint</a>： 一套比较好用针对移动端的 UI 框架</li></ul><h2 id="4-服务器端渲染"><a href="#4-服务器端渲染" class="headerlink" title="4. 服务器端渲染"></a>4. 服务器端渲染</h2><p>服务器端渲染用得最多的是 <a href="https://github.com/zeit/next.js" target="_blank" rel="noopener">next.js</a>，其他可供选择的有 <a href="https://github.com/jaredpalmer/razzle" target="_blank" rel="noopener">razzle</a>、<a href="https://github.com/redfin/react-server" target="_blank" rel="noopener">react-server</a>、<a href="https://github.com/alibaba/beidou" target="_blank" rel="noopener">beidou</a>。</p><p>一般这些框架都会有一些目录结构、书写方式、组件集成、项目构建的要求，自定义属性可能不是很强。</p><p>以 <a href="https://github.com/zeit/next.js" target="_blank" rel="noopener">next.js</a> 为例，整个应用中是没有 <code>html</code> 文件的，所有的响应 <code>html</code> 都是 node 动态渲染的，包括里面的元信息、<code>css, js</code> 路径等。渲染过程中，<code>next.js</code> 会根据路由，将首页所有的组件渲染成 <code>html</code>，余下的页面保留原生组件的格式，在客户端渲染。</p><p>更多参考：<a href="/5.md">细说后端模板渲染、客户端渲染、node 中间层、服务器端渲染（ssr）</a></p><h2 id="5-开发工具"><a href="#5-开发工具" class="headerlink" title="5. 开发工具"></a>5. 开发工具</h2><p>开发时主要会用到的工具。</p><h3 id="5-1-storybook"><a href="#5-1-storybook" class="headerlink" title="5.1 storybook"></a>5.1 <a href="https://github.com/storybooks/storybook" target="_blank" rel="noopener">storybook</a></h3><p><code>storybook</code> 为组件开发搭建了一个强大的开发环境，并提供了以下的几个功能：</p><ul><li>提供了一个强大的 UI 组件管理页面，可以很便捷、清晰的分组、管理多个组件或一个组件的多个不同状态</li><li>在自动化交互测试之外，可以很方便的进行手动交互测试，并且可以动态改变组件参数，查看视图变化</li><li>可以将组件预览导出为静态资源，这样就可以很方便查看组件的文档和不同参数对应的不同视图</li><li>还有一系列的插件，提供了很多额外的功能，帮助你更好的开发、测试、优化组件</li></ul><p>社区已经有很多组件库都在使用 <a href="https://github.com/storybooks/storybook" target="_blank" rel="noopener">storybook</a> 开发，比如：</p><ul><li><a href="https://github.com/airbnb/react-dates" target="_blank" rel="noopener">react-dates</a> 的 <code>storybook</code> <a href="http://airbnb.io/react-dates/" target="_blank" rel="noopener">react-dates - storybook</a></li><li><a href="https://github.com/necolas/react-native-web" target="_blank" rel="noopener">react-native-web</a> 的 <code>storybook</code> <a href="http://necolas.github.io/react-native-web/storybook/" target="_blank" rel="noopener">react-native-web - storybook</a></li></ul><p>更多参考：<a href="/web-advance/storybook">react、vue 组件开发利器：storybook</a></p><h3 id="5-2-react-devtools"><a href="#5-2-react-devtools" class="headerlink" title="5.2 react-devtools"></a>5.2 <a href="https://github.com/facebook/react-devtools" target="_blank" rel="noopener">react-devtools</a></h3><p>这是专门针对 <code>react</code> 组件开发的 chrome 开发者工具插件，就像开发者工具的 <code>Elements</code> 一样，可以查看整个页面的 <code>react</code> 组件树和每个组件的属性和状态，并且可以动态的更改属性和状态，然后会更新 UI 到应用上。</p><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc445s4rk1j317w0fqdjl.jpg" alt=""></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>通过 chrome 应用商店安装 <a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi" target="_blank" rel="noopener">chrome - react-developer-tools</a>.</p><p>其他安装方式查看 <a href="https://github.com/facebook/react-devtools" target="_blank" rel="noopener">react-devtools</a>.</p><h3 id="5-3-redux-devtools-与-redux-devtools-extension"><a href="#5-3-redux-devtools-与-redux-devtools-extension" class="headerlink" title="5.3 redux-devtools 与 redux-devtools-extension"></a>5.3 <a href="https://github.com/reduxjs/redux-devtools" target="_blank" rel="noopener">redux-devtools</a> 与 <a href="https://github.com/zalmoxisus/redux-devtools-extension" target="_blank" rel="noopener">redux-devtools-extension</a></h3><p>这是专门针对 <code>redux</code> 开发的 chrome 开发者工具插件，就像 <a href="https://github.com/facebook/react-devtools" target="_blank" rel="noopener">react-devtools</a> 一样，可以查看整个页面的 <code>redux</code> store 及其变化，并且可以动态的派发 <code>action</code>，然后会更新 UI 到应用上。</p><h4 id="5-3-1-安装-redux-devtools"><a href="#5-3-1-安装-redux-devtools" class="headerlink" title="5.3.1 安装 redux-devtools"></a>5.3.1 安装 <a href="https://github.com/reduxjs/redux-devtools" target="_blank" rel="noopener">redux-devtools</a></h4><p>这种安装方式，<code>redux-devtools</code> 会嵌入到页面中，成为页面的一部分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev redux-devtools</span><br><span class="line"></span><br><span class="line"># 还可以安装</span><br><span class="line">npm install --save-dev redux-devtools-log-monitor</span><br><span class="line">npm install --save-dev redux-devtools-dock-monitor</span><br></pre></td></tr></table></figure><p>更多信息参考 <a href="https://github.com/reduxjs/redux-devtools/blob/master/docs/Walkthrough.md" target="_blank" rel="noopener">redux-devtools - Walkthrough</a>.</p><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc4460vad7j31a00u0q92.jpg" alt=""></p><h4 id="5-3-2-安装-redux-devtools-extension"><a href="#5-3-2-安装-redux-devtools-extension" class="headerlink" title="5.3.2 安装 redux-devtools-extension"></a>5.3.2 安装 <a href="https://github.com/zalmoxisus/redux-devtools-extension" target="_blank" rel="noopener">redux-devtools-extension</a></h4><p>这种安装方式是成为浏览器开发者工具的一个插件。</p><p>通过 chrome 应用商店安装 <a href="https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd" target="_blank" rel="noopener">chrome - redux-devtools</a>.</p><p>其他安装方式查看 <a href="https://github.com/zalmoxisus/redux-devtools-extension" target="_blank" rel="noopener">redux-devtools-extension</a>.</p><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc446fd8mkj31d60u07m6.jpg" alt=""></p><h2 id="6-测试"><a href="#6-测试" class="headerlink" title="6. 测试"></a>6. 测试</h2><p>一般 <code>react</code> 组件的测试，会用 <a href="https://github.com/airbnb/enzyme" target="_blank" rel="noopener">enzyme</a> + <a href="https://github.com/facebook/jest" target="_blank" rel="noopener">jest</a>，<code>jest</code> 用来测试 JavaScript，<a href="https://github.com/airbnb/enzyme" target="_blank" rel="noopener">enzyme</a> 用来测试 <code>react</code> 组件。</p><p>另外，可以使用 <a href="https://github.com/kentcdodds/react-testing-library" target="_blank" rel="noopener">react-testing-library</a> 代替 <code>react-dom/test-utils</code>，达到更佳的测试体验。</p><h2 id="7-替代库"><a href="#7-替代库" class="headerlink" title="7. 替代库"></a>7. 替代库</h2><p>如果你对组件的性能、虚拟 DOM 的算法有极致的追求，可以尝试 <code>react</code> 的替代库，如：</p><ul><li><a href="https://github.com/developit/preact" target="_blank" rel="noopener">preact</a></li><li><a href="https://github.com/infernojs/inferno" target="_blank" rel="noopener">inferno</a></li></ul><h2 id="8-插件库"><a href="#8-插件库" class="headerlink" title="8. 插件库"></a>8. 插件库</h2><p>一些很实用的插件库：</p><ul><li><a href="https://github.com/chenglou/react-motion" target="_blank" rel="noopener">react-motion</a>: 动画组件</li><li><a href="https://github.com/JedWatson/react-select" target="_blank" rel="noopener">react-select</a>: 下拉选择组件</li><li><a href="https://github.com/reduxjs/reselect" target="_blank" rel="noopener">reselect</a>: <code>redux</code> 的路径选择器</li><li><a href="https://github.com/atlassian/react-beautiful-dnd" target="_blank" rel="noopener">react-beautiful-dnd</a>: 拖拽组件</li><li><a href="https://github.com/Flipboard/react-canvas" target="_blank" rel="noopener">react-canvas</a>: canvas 组件</li><li><a href="https://github.com/erikras/redux-form" target="_blank" rel="noopener">redux-form</a>: <code>redux</code> 与表单绑定</li><li><a href="https://github.com/recharts/recharts" target="_blank" rel="noopener">recharts</a>: <a href="http://d3js.org/" target="_blank" rel="noopener">D3</a> 的 <code>react</code> 封装</li><li><a href="https://github.com/react-dnd/react-dnd" target="_blank" rel="noopener">react-dnd</a>: 又一个拖拽组件</li><li><a href="https://github.com/nfl/react-helmet" target="_blank" rel="noopener">react-helmet</a>: document head 区域管理器</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;声明：这不是一篇介绍 React 基础知识的文章，需要熟悉 React 相关知识&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;主架构：&lt;a href=&quot;https://github.com/facebook/react&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;react&lt;/a&gt;, &lt;a href=&quot;https://github.com/ReactTraining/react-router&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;react-router&lt;/a&gt;, &lt;a href=&quot;https://github.com/reduxjs/redux&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;redux&lt;/a&gt;, &lt;a href=&quot;https://github.com/reduxjs/redux-thunk&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;redux-thunk&lt;/a&gt;, &lt;a href=&quot;https://github.com/redux-saga/redux-saga&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;redux-saga&lt;/a&gt;, &lt;a href=&quot;https://github.com/reduxjs/react-redux&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;react-redux&lt;/a&gt;, &lt;a href=&quot;https://github.com/dvajs/dva&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;dva&lt;/a&gt;, &lt;a href=&quot;https://github.com/umijs/umi&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;umi&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;扩展架构：&lt;a href=&quot;https://github.com/styled-components/styled-components&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;styled-components&lt;/a&gt;, &lt;a href=&quot;https://github.com/acdlite/recompose&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;recompose&lt;/a&gt;, &lt;a href=&quot;https://github.com/jamiebuilds/react-loadable&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;react-loadable&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;UI 框架：&lt;a href=&quot;https://github.com/ant-design/ant-design&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ant-design&lt;/a&gt;, &lt;a href=&quot;https://github.com/ant-design/ant-design-mobile&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ant-design-mobile&lt;/a&gt;, &lt;a href=&quot;https://github.com/mui-org/material-ui&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;material-ui&lt;/a&gt;, &lt;a href=&quot;https://github.com/Semantic-Org/Semantic-UI-React&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Semantic-UI-React&lt;/a&gt;, &lt;a href=&quot;https://github.com/palantir/blueprint&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;blueprint&lt;/a&gt;, &lt;a href=&quot;https://github.com/react-bootstrap/react-bootstrap&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;react-bootstrap&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;服务器端渲染：&lt;a href=&quot;https://github.com/zeit/next.js&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;next.js&lt;/a&gt;, &lt;a href=&quot;https://github.com/jaredpalmer/razzle&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;razzle&lt;/a&gt;, &lt;a href=&quot;https://github.com/redfin/react-server&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;react-server&lt;/a&gt;, &lt;a href=&quot;https://github.com/alibaba/beidou&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;beidou&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;开发工具：&lt;a href=&quot;https://github.com/storybooks/storybook&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;storybook&lt;/a&gt;, &lt;a href=&quot;https://github.com/facebook/react-devtools&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;react-devtools&lt;/a&gt;, &lt;a href=&quot;https://github.com/reduxjs/redux-devtools&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;redux-devtools&lt;/a&gt;, &lt;a href=&quot;https://github.com/zalmoxisus/redux-devtools-extension&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;redux-devtools-extension&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;测试：&lt;a href=&quot;https://github.com/airbnb/enzyme&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;enzyme&lt;/a&gt;, &lt;a href=&quot;https://github.com/kentcdodds/react-testing-library&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;react-testing-library&lt;/a&gt;, &lt;a href=&quot;https://github.com/facebook/jest&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;jest&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;替代库：&lt;a href=&quot;https://github.com/developit/preact&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;preact&lt;/a&gt;, &lt;a href=&quot;https://github.com/infernojs/inferno&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;inferno&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;插件库：&lt;a href=&quot;https://github.com/chenglou/react-motion&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;react-motion&lt;/a&gt;, &lt;a href=&quot;https://github.com/JedWatson/react-select&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;react-select&lt;/a&gt;, &lt;a href=&quot;https://github.com/reduxjs/reselect&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;reselect&lt;/a&gt;, &lt;a href=&quot;https://github.com/atlassian/react-beautiful-dnd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;react-beautiful-dnd&lt;/a&gt;, &lt;a href=&quot;https://github.com/Flipboard/react-canvas&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;react-canvas&lt;/a&gt;, &lt;a href=&quot;https://github.com/erikras/redux-form&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;redux-form&lt;/a&gt;, &lt;a href=&quot;https://github.com/recharts/recharts&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;recharts&lt;/a&gt;, &lt;a href=&quot;https://github.com/react-dnd/react-dnd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;react-dnd&lt;/a&gt;, &lt;a href=&quot;https://github.com/nfl/react-helmet&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;react-helmet&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端进阶" scheme="http://www.barebear.cn/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="前端" scheme="http://www.barebear.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>vue 前端项目技术选型、开发工具、周边生态</title>
    <link href="http://www.barebear.cn/web-extend/vue/"/>
    <id>http://www.barebear.cn/web-extend/vue/</id>
    <published>2020-02-21T09:01:56.000Z</published>
    <updated>2020-02-21T08:39:21.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>声明：这不是一篇介绍 Vue 基础知识的文章，需要熟悉 Vue 相关知识</p></blockquote><ul><li><p>主架构：<a href="https://github.com/vuejs/vue" target="_blank" rel="noopener">vue</a>, <a href="https://github.com/vuejs/vue-router" target="_blank" rel="noopener">vue-router</a>, <a href="https://github.com/vuejs/vuex" target="_blank" rel="noopener">vuex</a></p></li><li><p>UI 框架：<a href="https://github.com/ElemeFE/element" target="_blank" rel="noopener">element ui</a>, <a href="https://github.com/iview/iview" target="_blank" rel="noopener">iview</a>, <a href="https://github.com/vuetifyjs/vuetify" target="_blank" rel="noopener">vuetify</a>, <a href="https://github.com/airyland/vux" target="_blank" rel="noopener">vux</a>, <a href="https://github.com/ElemeFE/mint-ui" target="_blank" rel="noopener">mint-ui</a>, <a href="https://github.com/vuematerial/vue-material" target="_blank" rel="noopener">vue-material</a>, <a href="https://github.com/museui/muse-ui" target="_blank" rel="noopener">muse-ui</a>, <a href="https://github.com/youzan/vant" target="_blank" rel="noopener">vant</a>, <a href="https://github.com/bootstrap-vue/bootstrap-vue" target="_blank" rel="noopener">bootstrap-vue</a></p></li></ul><a id="more"></a><ul><li><p>服务器端渲染：<a href="https://github.com/nuxt/nuxt.js" target="_blank" rel="noopener">nuxt.js</a></p></li><li><p>开发工具：<a href="https://github.com/storybooks/storybook" target="_blank" rel="noopener">storybook</a>, <a href="https://github.com/vuejs/vue-devtools" target="_blank" rel="noopener">vue-devtools</a>, <a href="https://github.com/vuejs/vue-loader" target="_blank" rel="noopener">vue-loader</a></p></li><li><p>测试：<a href="https://github.com/vuejs/vue-test-utils" target="_blank" rel="noopener">vue-test-utils</a>, <a href="https://github.com/facebook/jest" target="_blank" rel="noopener">jest</a></p></li><li><p>插件库：<a href="https://github.com/ustbhuangyi/better-scroll" target="_blank" rel="noopener">better-scroll</a>, <a href="https://github.com/SortableJS/Vue.Draggable" target="_blank" rel="noopener">Vue.Draggable</a>, <a href="https://github.com/baianat/vee-validate" target="_blank" rel="noopener">vee-validate</a>, <a href="https://github.com/surmon-china/vue-awesome-swiper" target="_blank" rel="noopener">vue-awesome-swiper</a>, <a href="https://github.com/shentao/vue-multiselect" target="_blank" rel="noopener">vue-multiselect</a>, <a href="https://github.com/kazupon/vue-i18n" target="_blank" rel="noopener">vue-i18n</a>, <a href="https://github.com/ElemeFE/v-charts" target="_blank" rel="noopener">v-charts</a></p></li></ul><h2 id="1-架构选型演进"><a href="#1-架构选型演进" class="headerlink" title="1. 架构选型演进"></a>1. 架构选型演进</h2><ol><li>如果页面比较简单，可以只用 <code>vue</code></li><li>如果需要本地路由功能，比如在单页面应用（SPA）中维持多个页面，并且可以本地控制路由跳转逻辑，这时就需要搭配使用 <code>vue-router</code></li><li>一般稍复杂的页面都会遇到一些问题：组件之间的通信问题（比如 A 组件想要改变 B 组件的数据）、跨组件数据储存与共享问题（比如多页面购物车数据存储）。<code>vue</code> 本身并不能很好的解决这个问题，需要搭配使用 <code>vuex</code></li></ol><h2 id="2-选择-UI-框架"><a href="#2-选择-UI-框架" class="headerlink" title="2. 选择 UI 框架"></a>2. 选择 UI 框架</h2><p>使用一个现成的 UI 框架，可以少写很多代码。</p><p>目前比较推荐的是：</p><ul><li><a href="https://github.com/ElemeFE/element" target="_blank" rel="noopener">element ui</a>：饿了么出品</li><li><a href="https://github.com/iview/iview" target="_blank" rel="noopener">iview</a>：一套很棒的 UI 框架</li><li><a href="https://github.com/vuetifyjs/vuetify" target="_blank" rel="noopener">vuetify</a>：google 材质设计的实现</li><li><a href="https://github.com/airyland/vux" target="_blank" rel="noopener">vux</a>：移动端 UI 框架</li><li><a href="https://github.com/ElemeFE/mint-ui" target="_blank" rel="noopener">mint-ui</a>：移动端 UI 框架</li><li><a href="https://github.com/vuematerial/vue-material" target="_blank" rel="noopener">vue-material</a>：另一个 google 材质设计的实现</li><li><a href="https://github.com/museui/muse-ui" target="_blank" rel="noopener">muse-ui</a>：移动端 UI 框架</li><li><a href="https://github.com/youzan/vant" target="_blank" rel="noopener">vant</a>：移动端 UI 框架</li></ul><h2 id="3-服务器端渲染"><a href="#3-服务器端渲染" class="headerlink" title="3. 服务器端渲染"></a>3. 服务器端渲染</h2><p>服务器端渲染用得最多的是 <a href="https://github.com/nuxt/nuxt.js" target="_blank" rel="noopener">nuxt.js</a>。</p><p><code>nuxt.js</code> 有目录结构、书写方式、组件集成、项目构建等的约束，整个应用中是没有 <code>html</code> 文件的，所有的响应 <code>html</code> 都是 node 动态渲染的，包括里面的元信息、<code>css, js</code> 路径等。渲染过程中，<code>nuxt.js</code> 会根据路由，将首页所有的组件渲染成 <code>html</code>，余下的页面保留原生组件的格式，在客户端渲染。</p><p>更多参考：<a href="/5.md">细说后端模板渲染、客户端渲染、node 中间层、服务器端渲染（ssr）</a></p><h2 id="4-开发工具"><a href="#4-开发工具" class="headerlink" title="4. 开发工具"></a>4. 开发工具</h2><p>开发时主要会用到的工具。</p><h3 id="4-1-storybook"><a href="#4-1-storybook" class="headerlink" title="4.1 storybook"></a>4.1 <a href="https://github.com/storybooks/storybook" target="_blank" rel="noopener">storybook</a></h3><p><code>storybook</code> 为组件开发搭建了一个强大的开发环境，并提供了以下的几个功能：</p><ul><li>提供了一个强大的 UI 组件管理页面，可以很便捷、清晰的分组、管理多个组件或一个组件的多个不同状态</li><li>在自动化交互测试之外，可以很方便的进行手动交互测试，并且可以动态改变组件参数，查看视图变化</li><li>可以将组件预览导出为静态资源，这样就可以很方便查看组件的文档和不同参数对应的不同视图</li><li>还有一系列的插件，提供了很多额外的功能，帮助你更好的开发、测试、优化组件</li></ul><p><img src="../images/999.png" alt=""></p><p>更多参考：<a href="../web-advance/16.md">react、vue 组件开发利器：storybook</a></p><h3 id="4-2-vue-devtools"><a href="#4-2-vue-devtools" class="headerlink" title="4.2 vue-devtools"></a>4.2 <a href="https://github.com/vuejs/vue-devtools" target="_blank" rel="noopener">vue-devtools</a></h3><p>这是专门针对 <code>vue</code> 组件开发的 chrome 开发者工具插件，就像开发者工具的 <code>Elements</code> 一样，可以查看整个页面的 <code>vue</code> 组件树和每个组件的 <code>data</code>，并且可以动态的更改 <code>data</code>，然后会更新 UI 到应用上。</p><p><img src="../images/995.png" alt=""></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>通过 chrome 应用商店安装 <a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd" target="_blank" rel="noopener">chrome - vuejs-devtools</a>.</p><p>其他安装方式查看 <a href="https://github.com/vuejs/vue-devtools" target="_blank" rel="noopener">vue-devtools</a>.</p><h3 id="4-3-vue-loader"><a href="#4-3-vue-loader" class="headerlink" title="4.3 vue-loader"></a>4.3 <a href="https://github.com/vuejs/vue-loader" target="_blank" rel="noopener">vue-loader</a></h3><p>加载 <code>.vue</code> 单文件组件的 <a href="https://github.com/webpack/webpack" target="_blank" rel="noopener">webpack</a> loader。</p><h2 id="5-测试"><a href="#5-测试" class="headerlink" title="5. 测试"></a>5. 测试</h2><p>一般 <code>vue</code> 组件的测试，会用 <a href="https://github.com/vuejs/vue-test-utils" target="_blank" rel="noopener">vue-test-utils</a> + <a href="https://github.com/facebook/jest" target="_blank" rel="noopener">jest</a> / <a href="https://github.com/mochajs/mocha" target="_blank" rel="noopener">mocha</a> / <a href="https://github.com/substack/tape" target="_blank" rel="noopener">tape</a> / <a href="https://github.com/avajs/ava" target="_blank" rel="noopener">ava</a>。</p><h2 id="6-插件库"><a href="#6-插件库" class="headerlink" title="6. 插件库"></a>6. 插件库</h2><p>一些很实用的插件库：</p><ul><li><a href="https://github.com/ustbhuangyi/better-scroll" target="_blank" rel="noopener">better-scroll</a>：<a href="https://github.com/cubiq/iscroll" target="_blank" rel="noopener">iscroll</a> 的封装</li><li><a href="https://github.com/SortableJS/Vue.Draggable" target="_blank" rel="noopener">Vue.Draggable</a>：<a href="https://github.com/SortableJS/Sortable" target="_blank" rel="noopener">Sortable</a> 的封装</li><li><a href="https://github.com/baianat/vee-validate" target="_blank" rel="noopener">vee-validate</a>：数据校验组件</li><li><a href="https://github.com/surmon-china/vue-awesome-swiper" target="_blank" rel="noopener">vue-awesome-swiper</a>：<a href="https://github.com/nolimits4web/swiper" target="_blank" rel="noopener">swiper</a> 的封装</li><li><a href="https://github.com/shentao/vue-multiselect" target="_blank" rel="noopener">vue-multiselect</a>：下拉选择组件</li><li><a href="https://github.com/kazupon/vue-i18n" target="_blank" rel="noopener">vue-i18n</a>：国际化组件</li><li><a href="https://github.com/ElemeFE/v-charts" target="_blank" rel="noopener">v-charts</a>：<a href="https://github.com/apache/incubator-echarts" target="_blank" rel="noopener">echarts</a> 的封装</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;声明：这不是一篇介绍 Vue 基础知识的文章，需要熟悉 Vue 相关知识&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;主架构：&lt;a href=&quot;https://github.com/vuejs/vue&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vue&lt;/a&gt;, &lt;a href=&quot;https://github.com/vuejs/vue-router&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vue-router&lt;/a&gt;, &lt;a href=&quot;https://github.com/vuejs/vuex&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vuex&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;UI 框架：&lt;a href=&quot;https://github.com/ElemeFE/element&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;element ui&lt;/a&gt;, &lt;a href=&quot;https://github.com/iview/iview&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;iview&lt;/a&gt;, &lt;a href=&quot;https://github.com/vuetifyjs/vuetify&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vuetify&lt;/a&gt;, &lt;a href=&quot;https://github.com/airyland/vux&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vux&lt;/a&gt;, &lt;a href=&quot;https://github.com/ElemeFE/mint-ui&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;mint-ui&lt;/a&gt;, &lt;a href=&quot;https://github.com/vuematerial/vue-material&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vue-material&lt;/a&gt;, &lt;a href=&quot;https://github.com/museui/muse-ui&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;muse-ui&lt;/a&gt;, &lt;a href=&quot;https://github.com/youzan/vant&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vant&lt;/a&gt;, &lt;a href=&quot;https://github.com/bootstrap-vue/bootstrap-vue&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;bootstrap-vue&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端进阶" scheme="http://www.barebear.cn/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="前端" scheme="http://www.barebear.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>web 项目如何进行 git 多人协作开发</title>
    <link href="http://www.barebear.cn/web-advance/branch/"/>
    <id>http://www.barebear.cn/web-advance/branch/</id>
    <published>2020-02-21T08:58:56.000Z</published>
    <updated>2020-02-21T08:35:19.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>声明：本文不介绍 git 的基本用法，需要读者对 git、git 命令、git 使用有一定的了解</p></blockquote><p>现在，大部分项目都是用 git 来管理代码的，但当项目变大、多人协作时，git 的使用就变得复杂了，这时就需要在 git 使用的流程上来思考如何更优的使用 git。</p><p>对于大部分 web 项目而言，并不像软件、APP 项目一样有版本的划分，而是不断的更新、迭代，这就使得 web 项目的 git 使用要复杂一些，需要管理好哪些是正在开发的代码、哪些是提交测试的代码、哪些是已经上线的代码、多人共同开发时如何避免代码冲突与线上新代码被旧代码覆盖等等。</p><a id="more"></a><h2 id="1-一个分支"><a href="#1-一个分支" class="headerlink" title="1. 一个分支"></a>1. 一个分支</h2><p>如果项目比较小，不频繁更新时，可以只用 <code>master</code> 一个分支。</p><p>使用流程：</p><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc43vj0kirj30m90aw0sz.jpg" alt=""></p><ol><li>提交代码到本地 <code>master</code> 分支，并推送到远程 <code>master</code> 分支</li><li>持续集成构建或本地构建，然后上传到服务器</li></ol><p>上传到服务器有两种方式：</p><ol><li>持续集成构建，然后同步到服务器</li><li>本地构建，然后上传到服务器（为了简洁清晰，后面的图例中会隐藏这种方式）</li></ol><h2 id="2-开发分支与个人分支"><a href="#2-开发分支与个人分支" class="headerlink" title="2. 开发分支与个人分支"></a>2. 开发分支与个人分支</h2><p>如果项目稍大些，频繁更新时，就需要另外一个开发分支：</p><ul><li><code>master</code>：主分支，对应线上代码</li><li><code>dev</code>：开发分支，对应开发代码</li></ul><p>使用流程：</p><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc43w6t6ibj30hg08m74g.jpg" alt=""></p><ol><li>提交代码到本地 <code>dev</code> 分支</li><li>在需要构建项目时 <code>merge</code> 到本地 <code>master</code> 分支，并推送到远程 <code>master</code> 分支</li><li>持续集成构建，然后同步到服务器</li></ol><p>如果是多人参与的项目，就需要个人开发分支了：</p><ul><li><code>master</code>：主分支，对应线上代码</li><li><code>man1</code>：个人 <code>man1</code> 开发分支</li><li><code>man2</code>：个人 <code>man2</code> 开发分支</li></ul><p>使用流程：</p><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc43wcwlg7j30kh0deglw.jpg" alt=""></p><ol><li>提交代码到本地 <code>man1</code> 分支（以 <code>man1</code> 个人为例）</li><li>在需要构建项目时 <code>merge</code> 到本地 <code>master</code> 分支，并推送到远程 <code>master</code> 分支（有可能需要先 <code>pull</code> 远程的代码）</li><li>持续集成构建，然后同步到服务器</li></ol><p>在适当的时候，每一个个人分支（如 <code>man1, man2</code>）都需要 <code>pull</code> 一下 <code>master</code> 分支，以保证自己本地的代码的版本不会低于服务器。</p><h2 id="3-多个服务器环境"><a href="#3-多个服务器环境" class="headerlink" title="3. 多个服务器环境"></a>3. 多个服务器环境</h2><p>如果项目比较大，并且对应多个服务器环境（测试环境、产品环境）：</p><ul><li><code>master</code>：主分支</li><li><code>prod</code>：产品分支，对应产品服务器环境</li><li><code>test</code>：测试分支，对应测试服务器环境</li><li><code>dev</code>：开发分支</li></ul><p>使用流程：</p><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc43wmhtgyj30j70daaae.jpg" alt=""></p><p>构建测试环境：</p><ol><li>提交代码到本地 <code>dev</code> 分支</li><li>在需要构建项目时 <code>merge</code> 到本地 <code>test</code> 分支，并推送到远程 <code>test</code> 分支</li><li>持续集成构建，然后同步到测试服务器</li></ol><p>构建产品环境可以由远程的 <code>test</code> 分支 <code>merge</code> 到远程 <code>prod</code> 分支进行持续集成构建，也可由本地 <code>dev</code> 或 <code>test</code> 分支 <code>merge</code> 到本地 <code>prod</code> 分支，并推送到远程 <code>prod</code> 分支进行持续集成构建。</p><p>如果是多人参与的项目，就需要个人开发分支了：</p><ul><li><code>master</code>：主分支</li><li><code>prod</code>：产品分支，对应产品服务器环境</li><li><code>test</code>：测试分支，对应测试服务器环境</li><li><code>man1</code>：个人 <code>man1</code> 开发分支</li><li><code>man2</code>：个人 <code>man2</code> 开发分支</li></ul><p>使用流程：</p><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc43wsbagij30lg0h9mxq.jpg" alt=""></p><p>构建测试环境：</p><ol><li>提交代码到本地 <code>man1</code> 分支（以 <code>man1</code> 个人为例）</li><li>在需要构建项目时 <code>merge</code> 到本地 <code>test</code> 分支，并推送到远程 <code>test</code> 分支（有可能需要先 <code>pull</code> 远程的代码）</li><li>持续集成构建，然后同步到测试服务器</li></ol><p>构建产品环境可以由远程的 <code>test</code> 分支 <code>merge</code> 到远程 <code>prod</code> 分支进行持续集成构建，也可由本地 <code>man1</code> 或 <code>test</code> 分支 <code>merge</code> 到本地 <code>prod</code> 分支，并推送到远程 <code>prod</code> 分支进行持续集成构建。</p><p>在适当的时候，每一个个人分支（如 <code>man1, man2</code>）都需要 <code>pull</code> 一下 <code>prod</code> 分支（如有需要，也可以 <code>pull</code> <code>test</code> 分支），以保证自己本地的代码的版本不会低于服务器。</p><h2 id="4-多个需求同时开发"><a href="#4-多个需求同时开发" class="headerlink" title="4. 多个需求同时开发"></a>4. 多个需求同时开发</h2><p>有时候会有多个需求同时开发，并且相互独立，为了不影响每个需求的测试与上线，需要为每个需求创建一个分支。</p><ul><li><code>master</code>：主分支</li><li><code>prod</code>：产品分支，对应产品服务器环境</li><li><code>test</code>：测试分支，对应测试服务器环境</li><li><code>man1</code>：个人 <code>man1</code> 开发分支</li><li><code>man2</code>：个人 <code>man2</code> 开发分支</li><li><code>task1</code>：需求 <code>task1</code> 开发分支</li><li><code>task2</code>：需求 <code>task2</code> 开发分支</li></ul><p>使用流程：</p><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc43wy4atvj30li0ihjry.jpg" alt=""></p><p>构建测试环境与之前的步骤一致，但构建产品环境时，为了保证各个需求不相互影响，一般由本地直接合并到 <code>prod</code> 分支：</p><ol><li>本地 <code>task1</code> 分支 <code>merge</code> 到本地 <code>prod</code> 分支，并推送到远程 <code>prod</code> 分支进行持续集成构建</li><li>每一个个人分支（如 <code>man1, man2</code>）都需要 <code>pull</code> 一下 <code>prod</code> 分支，以保证自己本地的代码的版本不会低于服务器</li><li>最后删除 <code>task1</code> 分支</li></ol><h2 id="5-多人协作开发修改公共文件"><a href="#5-多人协作开发修改公共文件" class="headerlink" title="5. 多人协作开发修改公共文件"></a>5. 多人协作开发修改公共文件</h2><p>因为不同分支修改同一个文件而导致的文件冲突是多人协作开发中比较常见的问题之一，避免这种问题的思路主要有以下的几种：</p><ol><li>在代码层面，尽量避免多个成员都会改动的文件，尽量将代码分解到每个人只负责自己的那块代码，不需要去改别人的代码</li><li>在工程层面，尽量减少公共文件，尽量每个文件只由一个人负责</li><li>在 git 层面，如果有必要，可以单独建一个分支，用于更新某些公共文件，并及时的更新到其他分支</li></ol><h2 id="6-其他分支"><a href="#6-其他分支" class="headerlink" title="6. 其他分支"></a>6. 其他分支</h2><p>有一些常用的分支，可能我们会用到：</p><ul><li><code>bug</code> 分支：用于紧急修复产品环境的 <code>bug</code></li></ul><h2 id="7-根据情况调整、简化流程"><a href="#7-根据情况调整、简化流程" class="headerlink" title="7. 根据情况调整、简化流程"></a>7. 根据情况调整、简化流程</h2><p>上面的图例只有测试服务器和产品服务器，更多服务器类型的工作流程是类似的；图例也只有 <code>man1</code> 和 <code>man2</code> 两个个人分支，更多个人分支的工作流程也是类似的。</p><p>上面的图例主要用于以下特点的项目（需要把整个项目打包成一个整体）：</p><ul><li>单页面 web 前端应用，整个项目只有一个 html 文件，页面之间的切换由本地路由控制，每次更新到服务器都需要打包所有页面</li><li>Java、Go 等后端应用，每次都需要打包成一个整体，可能是一个文件，或者一批文件（不打包成一个整体的方式除外，比如分散 java class 文件）</li><li>使用持续集成构建的方式更新代码到服务器</li></ul><p>这样做主要是为了避免一些问题：</p><ul><li>线上新代码被旧代码覆盖：多人同时开发项目，都需要更新到测试机，如果不是统一 <code>push</code> 到 <code>test</code> 分支做持续集成构建，很难保证线上新代码不会被旧代码覆盖</li><li>未测试的代码被更新到产品环境：这个问题也需要注意，因为这个问题并不能从流程上完全杜绝，需要各位在开发中留意</li></ul><p>对于像下面这种特点的项目，可以根据情况调整、简化流程：</p><ul><li>多页面 web 前端应用，把某一个页面更新到服务器并不影响其他页面</li><li>NodeJs、PHP、Python 等后端应用，只上传自己更新的文件，而不影响服务器上其他文件（把所有代码打包成一个整体的方式除外）</li><li>使用本地构建的方式更新代码到服务器</li></ul><p>比如：</p><ul><li><code>master</code>：主分支</li><li><code>man1</code>：个人 <code>man1</code> 开发分支</li><li><code>man2</code>：个人 <code>man2</code> 开发分支</li><li><code>task1</code>：需求 <code>task1</code> 开发分支</li><li><code>task2</code>：需求 <code>task2</code> 开发分支</li></ul><p>使用流程：</p><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc43x5bwosj30hw0fzt90.jpg" alt=""></p><p>如果多个需求没有冲突，可以同时在 <code>man1</code> 个人分支上开发，并根据需要上传到不同的服务器。</p><p>如果多个需求有冲突，可以每个需求都新建一个分支，如上图所示：</p><ol><li>提交代码到本地 <code>task1</code> 分支（以 <code>task1</code> 个人为例）</li><li>根据需要上传到不同的服务器</li><li>如果代码通过产品环境后，更新到每个个人分支，并删除 <code>task1</code> 分支</li></ol><p>这样子，就简单很多了。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;声明：本文不介绍 git 的基本用法，需要读者对 git、git 命令、git 使用有一定的了解&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;现在，大部分项目都是用 git 来管理代码的，但当项目变大、多人协作时，git 的使用就变得复杂了，这时就需要在 git 使用的流程上来思考如何更优的使用 git。&lt;/p&gt;
&lt;p&gt;对于大部分 web 项目而言，并不像软件、APP 项目一样有版本的划分，而是不断的更新、迭代，这就使得 web 项目的 git 使用要复杂一些，需要管理好哪些是正在开发的代码、哪些是提交测试的代码、哪些是已经上线的代码、多人共同开发时如何避免代码冲突与线上新代码被旧代码覆盖等等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端进阶" scheme="http://www.barebear.cn/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="前端" scheme="http://www.barebear.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>前端开发需要了解的工具集合：webpack, eslint, prettier, ...</title>
    <link href="http://www.barebear.cn/web-advance/tools/"/>
    <id>http://www.barebear.cn/web-advance/tools/</id>
    <published>2020-02-21T08:55:56.000Z</published>
    <updated>2020-02-21T08:25:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>前端开发需要了解的一些工具，这些工具能够帮助你在项目开发中事半功倍。</p><h2 id="1-nrm-npm-registry-管理器"><a href="#1-nrm-npm-registry-管理器" class="headerlink" title="1. nrm: npm registry 管理器"></a>1. <a href="https://github.com/Pana/nrm" target="_blank" rel="noopener">nrm</a>: <code>npm</code> registry 管理器</h2><p><code>registry</code>: <code>npm</code> 远程仓库的地址。</p><p>由于众所周知的原因，<code>npm</code> 官方仓库在国内特别的慢，所以我们需要用一些替代性方案，一种方案就是切换 <code>npm</code> registry 到国内的镜像仓库。</p><p>所以，一般我们会这样做：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 切换到淘宝 npm 仓库</span><br><span class="line">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org&#x2F;</span><br></pre></td></tr></table></figure><p>但是这样做会比较麻烦，因为切换的时候得记住 registry 的 url 地址。所以就需要 <a href="https://github.com/Pana/nrm" target="_blank" rel="noopener">nrm</a> 来管理 <code>npm</code> registry。</p><a id="more"></a><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g nrm</span><br></pre></td></tr></table></figure><h4 id="内置的-registry"><a href="#内置的-registry" class="headerlink" title="内置的 registry"></a>内置的 registry</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm ---- https:&#x2F;&#x2F;registry.npmjs.org&#x2F;</span><br><span class="line">cnpm --- http:&#x2F;&#x2F;r.cnpmjs.org&#x2F;</span><br><span class="line">taobao - https:&#x2F;&#x2F;registry.npm.taobao.org&#x2F;</span><br><span class="line">nj ----- https:&#x2F;&#x2F;registry.nodejitsu.com&#x2F;</span><br><span class="line">rednpm - http:&#x2F;&#x2F;registry.mirror.cqupt.edu.cn&#x2F;</span><br><span class="line">npmMirror  https:&#x2F;&#x2F;skimdb.npmjs.com&#x2F;registry&#x2F;</span><br><span class="line">edunpm - http:&#x2F;&#x2F;registry.enpmjs.org&#x2F;</span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 切换到 taobao registry</span><br><span class="line">nrm use taobao</span><br><span class="line"></span><br><span class="line"># 切换到 npm 官方 registry</span><br><span class="line">nrm use npm</span><br><span class="line"></span><br><span class="line"># 添加自己的 registry</span><br><span class="line">nrm add yourName yourRegistry</span><br></pre></td></tr></table></figure><h2 id="2-cnpm-使用国内镜像仓库的-npm-客户端"><a href="#2-cnpm-使用国内镜像仓库的-npm-客户端" class="headerlink" title="2. cnpm: 使用国内镜像仓库的 npm 客户端"></a>2. <a href="https://github.com/cnpm/cnpm" target="_blank" rel="noopener">cnpm</a>: 使用国内镜像仓库的 <code>npm</code> 客户端</h2><p>相当于是 <a href="https://github.com/npm/npm" target="_blank" rel="noopener">npm</a> 的一个克隆版本，它的命令中除了 <code>publish</code> 之外，其他的与 <code>npm</code> 的命令一致。内部默认使用的是国内的 <code>npm</code> 代码仓库 <a href="https://cnpmjs.org/" target="_blank" rel="noopener">https://cnpmjs.org/</a>，当然你也可以改为自己的。</p><p>如果你不喜欢使用 <a href="https://github.com/Pana/nrm" target="_blank" rel="noopener">nrm</a> 切换 <code>npm</code> registry，可以把 <code>npm</code> 和 <code>cnpm</code> 这两者一起用。</p><p>另外，它一般还会和 <a href="https://github.com/cnpm/cnpmjs.org" target="_blank" rel="noopener">cnpmjs.org</a> 配合使用。</p><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm</span><br></pre></td></tr></table></figure><h2 id="3-yarn-类似-npm-的依赖管理工具"><a href="#3-yarn-类似-npm-的依赖管理工具" class="headerlink" title="3. yarn: 类似 npm 的依赖管理工具"></a>3. <a href="https://github.com/yarnpkg/yarn" target="_blank" rel="noopener">yarn</a>: 类似 <code>npm</code> 的依赖管理工具</h2><p>类似 <code>npm</code> 的依赖管理工具，但 <code>yarn</code> 缓存了每个下载过的包，所以再次使用时无需重复下载，同时利用并行下载以最大化资源利用率，因此安装速度更快。</p><p>并且在开发 <a href="https://github.com/facebook/react-native" target="_blank" rel="noopener">react-native</a> 应用程序时，是强烈建议使用 <a href="https://github.com/yarnpkg/yarn" target="_blank" rel="noopener">yarn</a> 的，因为如果非要用 npm, 必须使用 npm &lt; 5 版本。</p><h4 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yarn</span><br></pre></td></tr></table></figure><h2 id="4-webpack-前端打包工具"><a href="#4-webpack-前端打包工具" class="headerlink" title="4. webpack: 前端打包工具"></a>4. <a href="https://github.com/webpack/webpack" target="_blank" rel="noopener">webpack</a>: 前端打包工具</h2><p>现在前端打包基本上都会用 <a href="https://github.com/webpack/webpack" target="_blank" rel="noopener">webpack</a>，它不仅能打包源代码文件（如 <code>js, css, html, ts, ...</code>），还能打包静态资源文件（如 <code>images, fonts, ...</code>），并且还能打包按需加载 SPA 应用。总之，<code>webpack</code> 是前端打包的不二选择。</p><h4 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 全局</span><br><span class="line">npm install -g webpack</span><br><span class="line"></span><br><span class="line"># 本地</span><br><span class="line">npm install --save-dev webpack</span><br></pre></td></tr></table></figure><h2 id="5-babel-es6-gt-es5-转码器"><a href="#5-babel-es6-gt-es5-转码器" class="headerlink" title="5. babel: es6 -&gt; es5 转码器"></a>5. <a href="https://github.com/babel/babel" target="_blank" rel="noopener">babel</a>: es6 -&gt; es5 转码器</h2><p>有 <a href="https://github.com/babel/babel" target="_blank" rel="noopener">babel</a> 在，你就可以写最新版的 JavaScript 语法（<code>es6, es7, es2015, ...</code>），然后由 <code>babel</code> 把你的源代码转码成你所需要的 JavaScript 语法，比如浏览器端运行的 <code>es5</code>。<code>babel</code> 一般都是配合 <a href="https://github.com/webpack/webpack" target="_blank" rel="noopener">webpack</a>、<a href="https://github.com/rollup/rollup" target="_blank" rel="noopener">rollup</a>、<a href="https://github.com/parcel-bundler/parcel" target="_blank" rel="noopener">parcel</a> 等打包构建工具一起使用，详细参考 <a href="https://babeljs.io/en/setup" target="_blank" rel="noopener">babel - setup</a>。</p><h4 id="安装-4"><a href="#安装-4" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 全局</span><br><span class="line">npm install -g babel-cli</span><br><span class="line"></span><br><span class="line"># 本地</span><br><span class="line">npm install --save-dev babel-cli</span><br></pre></td></tr></table></figure><h2 id="6-eslint-js-语法（包括-jsx-语法）检查与矫正"><a href="#6-eslint-js-语法（包括-jsx-语法）检查与矫正" class="headerlink" title="6. eslint: js 语法（包括 jsx 语法）检查与矫正"></a>6. <a href="https://github.com/eslint/eslint" target="_blank" rel="noopener">eslint</a>: js 语法（包括 jsx 语法）检查与矫正</h2><p>这个工具能够检查 js 语法（包括 jsx 语法），然后最大程度的矫正不符合规范的代码。对于提升个人代码质量，保证团队代码规范和代码风格是相当有用的。</p><p><a href="https://github.com/eslint/eslint" target="_blank" rel="noopener">eslint</a> 一般会配合 <a href="https://github.com/typicode/husky" target="_blank" rel="noopener">husky</a> 与 <a href="https://github.com/okonet/lint-staged" target="_blank" rel="noopener">lint-staged</a> 一起使用。详细用法可以参考 <a href="/12.md">怎样提升代码质量</a>。</p><h4 id="安装-5"><a href="#安装-5" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 全局</span><br><span class="line">npm install -g eslint</span><br><span class="line"></span><br><span class="line"># 本地</span><br><span class="line">npm install --save-dev eslint</span><br></pre></td></tr></table></figure><h2 id="7-stylelint-css-语法（包括-less-scss-语法）检查与矫正"><a href="#7-stylelint-css-语法（包括-less-scss-语法）检查与矫正" class="headerlink" title="7. stylelint: css 语法（包括 less, scss 语法）检查与矫正"></a>7. <a href="https://github.com/stylelint/stylelint" target="_blank" rel="noopener">stylelint</a>: css 语法（包括 less, scss 语法）检查与矫正</h2><p>这个工具能够检查 css 语法（包括 less, scss 语法），然后最大程度的矫正不符合规范的代码。对于提升个人代码质量，保证团队代码规范和代码风格是相当有用的。</p><p><a href="https://github.com/stylelint/stylelint" target="_blank" rel="noopener">stylelint</a> 一般会配合 <a href="https://github.com/typicode/husky" target="_blank" rel="noopener">husky</a> 与 <a href="https://github.com/okonet/lint-staged" target="_blank" rel="noopener">lint-staged</a> 一起使用。详细用法可以参考 <a href="/12.md">怎样提升代码质量</a>。</p><h4 id="安装-6"><a href="#安装-6" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 全局</span><br><span class="line">npm install -g stylelint</span><br><span class="line"></span><br><span class="line"># 本地</span><br><span class="line">npm install --save-dev stylelint</span><br></pre></td></tr></table></figure><h2 id="8-prettier-代码格式优化"><a href="#8-prettier-代码格式优化" class="headerlink" title="8. prettier: 代码格式优化"></a>8. <a href="https://github.com/prettier/prettier" target="_blank" rel="noopener">prettier</a>: 代码格式优化</h2><p>这个工具能够优化 <code>js, jsx, ts, css, less, scss, json, md, ...</code>，对于保证团队代码风格是相当有用的。</p><p><a href="https://github.com/prettier/prettier" target="_blank" rel="noopener">prettier</a> 一般会配合 <a href="https://github.com/typicode/husky" target="_blank" rel="noopener">husky</a> 与 <a href="https://github.com/okonet/lint-staged" target="_blank" rel="noopener">lint-staged</a> 一起使用。详细用法可以参考 <a href="/12.md">怎样提升代码质量</a>。</p><h4 id="安装-7"><a href="#安装-7" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 全局</span><br><span class="line">npm install -g prettier</span><br><span class="line"></span><br><span class="line"># 本地</span><br><span class="line">npm install --save-dev prettier</span><br></pre></td></tr></table></figure><h2 id="9-gulp-基于流的自动化构建工具"><a href="#9-gulp-基于流的自动化构建工具" class="headerlink" title="9. gulp: 基于流的自动化构建工具"></a>9. <a href="https://github.com/gulpjs/gulp" target="_blank" rel="noopener">gulp</a>: 基于流的自动化构建工具</h2><p>在 <a href="https://github.com/webpack/webpack" target="_blank" rel="noopener">webpack</a> 出现之前，前端的构建任务很多都是由 <a href="https://github.com/gulpjs/gulp" target="_blank" rel="noopener">gulp</a> 来完成的。<code>webpack</code> 出现之后，<code>gulp</code> 在打包构建这一块功能则退居二线，但是 <code>webpack</code> 只负责代码打包，很多其他工作还是由 <code>gulp</code> 来完成，比如上传打包文件到服务器，让打包文件进行更多流操作等。所以，很多情况下都是 <code>gulp</code> 与 <code>webpack</code> 配合使用。</p><h4 id="安装-8"><a href="#安装-8" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 全局</span><br><span class="line">npm install -g gulp</span><br><span class="line"></span><br><span class="line"># 本地</span><br><span class="line">npm install --save-dev gulp</span><br></pre></td></tr></table></figure><h2 id="10-jest-js-测试库"><a href="#10-jest-js-测试库" class="headerlink" title="10. jest: js 测试库"></a>10. <a href="https://github.com/facebook/jest" target="_blank" rel="noopener">jest</a>: js 测试库</h2><p>在 Facebook 内部，包括 <a href="https://github.com/facebook/react" target="_blank" rel="noopener">react</a> 应用在内的所有 JavaScript 代码都是用 <a href="https://github.com/facebook/jest" target="_blank" rel="noopener">jest</a> 来测试的。它的一个理念就是提供一套完整集成的 “零配置” 测试体验。所以，使用 <code>jest</code> 来测试 JavaScript 是一件很愉快的事情。</p><h4 id="安装-9"><a href="#安装-9" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev jest</span><br></pre></td></tr></table></figure><h2 id="11-enzyme-react-组件测试库"><a href="#11-enzyme-react-组件测试库" class="headerlink" title="11. enzyme: react 组件测试库"></a>11. <a href="https://github.com/airbnb/enzyme" target="_blank" rel="noopener">enzyme</a>: <a href="https://github.com/facebook/react" target="_blank" rel="noopener">react</a> 组件测试库</h2><p><a href="https://github.com/facebook/jest" target="_blank" rel="noopener">jest</a> 只是单纯用来测试 JavaScript 的，而 <code>react</code> 组件的测试，就需要用到 airbnb 出品的 <a href="https://github.com/airbnb/enzyme" target="_blank" rel="noopener">enzyme</a> 了。一般 <code>enzyme</code> 会和 <code>jest</code> 一起使用。</p><h4 id="安装-10"><a href="#安装-10" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev enzyme enzyme-adapter-react-16</span><br></pre></td></tr></table></figure><h2 id="12-react-devtools-chrome-开发者工具插件-for-react"><a href="#12-react-devtools-chrome-开发者工具插件-for-react" class="headerlink" title="12. react-devtools: chrome 开发者工具插件 for react"></a>12. <a href="https://github.com/facebook/react-devtools" target="_blank" rel="noopener">react-devtools</a>: chrome 开发者工具插件 for <a href="https://github.com/facebook/react" target="_blank" rel="noopener">react</a></h2><p>这是专门针对 <a href="https://github.com/facebook/react" target="_blank" rel="noopener">react</a> 组件开发的 chrome 开发者工具插件，就像开发者工具的 <code>Elements</code> 一样，可以查看整个页面的 <code>react</code> 组件树和每个组件的属性和状态，并且可以动态的更改属性和状态，然后会更新 UI 到应用上。</p><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc43g2id1dj317w0fqdjl.jpg" alt=""></p><h4 id="安装-11"><a href="#安装-11" class="headerlink" title="安装"></a>安装</h4><p>通过 chrome 应用商店安装 <a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi" target="_blank" rel="noopener">chrome - react-developer-tools</a>.</p><p>其他安装方式查看 <a href="https://github.com/facebook/react-devtools" target="_blank" rel="noopener">react-devtools</a>.</p><h2 id="13-redux-devtools-与-redux-devtools-extension-chrome-开发者工具插件-for-redux"><a href="#13-redux-devtools-与-redux-devtools-extension-chrome-开发者工具插件-for-redux" class="headerlink" title="13. redux-devtools 与 redux-devtools-extension: chrome 开发者工具插件 for redux"></a>13. <a href="https://github.com/reduxjs/redux-devtools" target="_blank" rel="noopener">redux-devtools</a> 与 <a href="https://github.com/zalmoxisus/redux-devtools-extension" target="_blank" rel="noopener">redux-devtools-extension</a>: chrome 开发者工具插件 for <a href="https://github.com/reduxjs/redux" target="_blank" rel="noopener">redux</a></h2><p>这是专门针对 <a href="https://github.com/reduxjs/redux" target="_blank" rel="noopener">redux</a> 开发的 chrome 开发者工具插件，就像 <a href="https://github.com/facebook/react-devtools" target="_blank" rel="noopener">react-devtools</a> 一样，可以查看整个页面的 <code>redux</code> store 及其变化，并且可以动态的派发 <code>action</code>，然后会更新 UI 到应用上。</p><h4 id="13-1-安装-redux-devtools"><a href="#13-1-安装-redux-devtools" class="headerlink" title="13.1 安装 redux-devtools"></a>13.1 安装 <a href="https://github.com/reduxjs/redux-devtools" target="_blank" rel="noopener">redux-devtools</a></h4><p>这种安装方式，<code>redux-devtools</code> 会嵌入到页面中，成为页面的一部分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev redux-devtools</span><br><span class="line"></span><br><span class="line"># 还可以安装</span><br><span class="line">npm install --save-dev redux-devtools-log-monitor</span><br><span class="line">npm install --save-dev redux-devtools-dock-monitor</span><br></pre></td></tr></table></figure><p>更多信息参考 <a href="https://github.com/reduxjs/redux-devtools/blob/master/docs/Walkthrough.md" target="_blank" rel="noopener">redux-devtools - Walkthrough</a>.</p><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc43gsdyyjj31a00u0q92.jpg" alt=""></p><h4 id="13-2-安装-redux-devtools-extension"><a href="#13-2-安装-redux-devtools-extension" class="headerlink" title="13.2 安装 redux-devtools-extension"></a>13.2 安装 <a href="https://github.com/zalmoxisus/redux-devtools-extension" target="_blank" rel="noopener">redux-devtools-extension</a></h4><p>这种安装方式是成为浏览器开发者工具的一个插件。</p><p>通过 chrome 应用商店安装 <a href="https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd" target="_blank" rel="noopener">chrome - redux-devtools</a>.</p><p>其他安装方式查看 <a href="https://github.com/zalmoxisus/redux-devtools-extension" target="_blank" rel="noopener">redux-devtools-extension</a>.</p><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc43itu0ocj31d60u07m6.jpg" alt=""></p><h2 id="14-vue-devtools-chrome-开发者工具插件-for-vue"><a href="#14-vue-devtools-chrome-开发者工具插件-for-vue" class="headerlink" title="14. vue-devtools: chrome 开发者工具插件 for vue"></a>14. <a href="https://github.com/vuejs/vue-devtools" target="_blank" rel="noopener">vue-devtools</a>: chrome 开发者工具插件 for <a href="https://github.com/vuejs/vue" target="_blank" rel="noopener">vue</a></h2><p>这是专门针对 <a href="https://github.com/vuejs/vue" target="_blank" rel="noopener">vue</a> 组件开发的 chrome 开发者工具插件，就像开发者工具的 <code>Elements</code> 一样，可以查看整个页面的 <code>vue</code> 组件树和每个组件的 <code>data</code>，并且可以动态的更改 <code>data</code>，然后会更新 UI 到应用上。</p><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc43kan2s2j30k008ujsn.jpg" alt=""></p><h4 id="安装-12"><a href="#安装-12" class="headerlink" title="安装"></a>安装</h4><p>通过 chrome 应用商店安装 <a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd" target="_blank" rel="noopener">chrome - vuejs-devtools</a>.</p><p>其他安装方式查看 <a href="https://github.com/vuejs/vue-devtools" target="_blank" rel="noopener">vue-devtools</a>.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端开发需要了解的一些工具，这些工具能够帮助你在项目开发中事半功倍。&lt;/p&gt;
&lt;h2 id=&quot;1-nrm-npm-registry-管理器&quot;&gt;&lt;a href=&quot;#1-nrm-npm-registry-管理器&quot; class=&quot;headerlink&quot; title=&quot;1. nrm: npm registry 管理器&quot;&gt;&lt;/a&gt;1. &lt;a href=&quot;https://github.com/Pana/nrm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;nrm&lt;/a&gt;: &lt;code&gt;npm&lt;/code&gt; registry 管理器&lt;/h2&gt;&lt;p&gt;&lt;code&gt;registry&lt;/code&gt;: &lt;code&gt;npm&lt;/code&gt; 远程仓库的地址。&lt;/p&gt;
&lt;p&gt;由于众所周知的原因，&lt;code&gt;npm&lt;/code&gt; 官方仓库在国内特别的慢，所以我们需要用一些替代性方案，一种方案就是切换 &lt;code&gt;npm&lt;/code&gt; registry 到国内的镜像仓库。&lt;/p&gt;
&lt;p&gt;所以，一般我们会这样做：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 切换到淘宝 npm 仓库&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm config set registry https:&amp;#x2F;&amp;#x2F;registry.npm.taobao.org&amp;#x2F;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;但是这样做会比较麻烦，因为切换的时候得记住 registry 的 url 地址。所以就需要 &lt;a href=&quot;https://github.com/Pana/nrm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;nrm&lt;/a&gt; 来管理 &lt;code&gt;npm&lt;/code&gt; registry。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端进阶" scheme="http://www.barebear.cn/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="前端" scheme="http://www.barebear.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>react、vue 组件开发利器：storybook</title>
    <link href="http://www.barebear.cn/web-advance/storybook/"/>
    <id>http://www.barebear.cn/web-advance/storybook/</id>
    <published>2020-02-21T08:50:56.000Z</published>
    <updated>2020-02-21T08:15:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于前端开发来说，组件化技术已经是一门必修课了，这其中又主要以 <a href="https://github.com/facebook/react" target="_blank" rel="noopener">react</a> 和 <a href="https://github.com/vuejs/vue" target="_blank" rel="noopener">vue</a> 为主。但平时在开发组件，尤其是公共组件或者第三方组件库的时候，往往会有一些困扰：</p><ul><li>不能很好的管理多个组件，尤其是在组件预览的时候，不能一目了然</li><li>在组件预览的时候，也不能很好的反应一个组件的多个不同状态</li><li>自动化交互测试可以使用 <a href="https://github.com/airbnb/enzyme" target="_blank" rel="noopener">enzyme</a>，但很多时候还得手动测试，就比较麻烦了</li><li>在写文档的时候，需要将组件预览和文档写在一起，并需要切换到不同的状态，就比较吃力了</li></ul><p>所以，<a href="https://github.com/storybooks/storybook" target="_blank" rel="noopener">storybook</a> 就是为了解决这些问题而出现的，它为你的组件搭建了一个强大的开发环境，主要提供了以下的几个功能：</p><a id="more"></a><ul><li>提供了一个强大的 UI 组件管理页面，可以很便捷、清晰的分组、管理多个组件或一个组件的多个不同状态</li><li>在自动化交互测试之外，可以很方便的进行手动交互测试，并且可以动态改变组件参数，查看视图变化</li><li>可以将组件预览导出为静态资源，这样就可以很方便查看组件的文档和不同参数对应的不同视图</li><li>还有一系列的插件，提供了很多额外的功能，帮助你更好的开发、测试、优化组件</li></ul><p>社区已经有很多组件库都在使用 <a href="https://github.com/storybooks/storybook" target="_blank" rel="noopener">storybook</a> 开发，比如：</p><ul><li><a href="https://github.com/airbnb/react-dates" target="_blank" rel="noopener">react-dates</a> 的 <code>storybook</code> <a href="http://airbnb.io/react-dates/" target="_blank" rel="noopener">react-dates - storybook</a></li><li><a href="https://github.com/necolas/react-native-web" target="_blank" rel="noopener">react-native-web</a> 的 <code>storybook</code> <a href="http://necolas.github.io/react-native-web/storybook/" target="_blank" rel="noopener">react-native-web - storybook</a></li></ul><p>再顺便截个图吧<br><img src="https://tva1.sinaimg.cn/large/0082zybply1gc43d8lajij31cg0u00wd.jpg" alt=""></p><h2 id="1-框架适配"><a href="#1-框架适配" class="headerlink" title="1. 框架适配"></a>1. 框架适配</h2><ul><li><a href="https://github.com/storybooks/storybook/blob/master/app/react" target="_blank" rel="noopener">React</a></li><li><a href="https://github.com/storybooks/storybook/blob/master/app/react-native" target="_blank" rel="noopener">React Native</a></li><li><a href="https://github.com/storybooks/storybook/blob/master/app/vue" target="_blank" rel="noopener">Vue</a></li><li><a href="https://github.com/storybooks/storybook/blob/master/app/angular" target="_blank" rel="noopener">Angular</a></li><li><a href="https://github.com/storybooks/storybook/blob/master/app/polymer" target="_blank" rel="noopener">Polymer</a></li><li><a href="https://github.com/storybooks/storybook/blob/master/app/mithril" target="_blank" rel="noopener">Mithril</a>: 目前尚处 <code>alpha</code> 阶段</li><li><a href="https://github.com/storybooks/storybook/blob/master/app/marko" target="_blank" rel="noopener">Marko</a>: 目前尚处 <code>alpha</code> 阶段</li><li><a href="https://github.com/storybooks/storybook/blob/master/app/html" target="_blank" rel="noopener">HTML</a>: 目前尚处 <code>alpha</code> 阶段</li><li><a href="https://github.com/storybooks/storybook/blob/master/app/svelte" target="_blank" rel="noopener">Svelte</a>: 目前尚处 <code>alpha</code> 阶段</li><li><a href="https://github.com/storybooks/storybook/blob/master/app/riot" target="_blank" rel="noopener">Riot</a> : 目前尚处 <code>alpha</code> 阶段</li></ul><h2 id="2-开发与命令"><a href="#2-开发与命令" class="headerlink" title="2. 开发与命令"></a>2. 开发与命令</h2><h2 id="2-1-如何写一个-story"><a href="#2-1-如何写一个-story" class="headerlink" title="2.1 如何写一个 story"></a>2.1 如何写一个 <code>story</code></h2><p>查看 <a href="https://storybook.js.org/basics/writing-stories/" target="_blank" rel="noopener">storybook - Writing Stories</a>，了解怎么写 <code>stories</code> 与怎么用插件。</p><h2 id="2-2-添加-storybook"><a href="#2-2-添加-storybook" class="headerlink" title="2.2 添加 storybook"></a>2.2 添加 <code>storybook</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 安装全局命令</span><br><span class="line">npm i -g @storybook&#x2F;cli</span><br><span class="line"></span><br><span class="line"># 初始化已有项目（不会对原项目产生影响，只添加必要的配置与脚本而已）</span><br><span class="line">cd my-project-directory</span><br><span class="line">getstorybook</span><br><span class="line"></span><br><span class="line"># 运行 storybook</span><br><span class="line">npm run storybook</span><br></pre></td></tr></table></figure><p>如果需要手动添加 <code>storybook</code> 或它的插件，可以查看：</p><ul><li><a href="https://storybook.js.org/basics/guide-react/" target="_blank" rel="noopener">Storybook for React</a></li><li><a href="https://storybook.js.org/basics/guide-vue/" target="_blank" rel="noopener">Storybook for Vue</a></li><li><a href="https://storybook.js.org/basics/guide-angular/" target="_blank" rel="noopener">Storybook for Angular</a></li></ul><h2 id="2-3-将组件预览导出为静态资源"><a href="#2-3-将组件预览导出为静态资源" class="headerlink" title="2.3 将组件预览导出为静态资源"></a>2.3 将组件预览导出为静态资源</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 添加到 package.json 的 scripts</span><br><span class="line">&#123;</span><br><span class="line">  &quot;export-storybook&quot;: &quot;build-storybook -c .storybook -o .out&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 运行命令</span><br><span class="line">npm run export-storybook</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于前端开发来说，组件化技术已经是一门必修课了，这其中又主要以 &lt;a href=&quot;https://github.com/facebook/react&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;react&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/vuejs/vue&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vue&lt;/a&gt; 为主。但平时在开发组件，尤其是公共组件或者第三方组件库的时候，往往会有一些困扰：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不能很好的管理多个组件，尤其是在组件预览的时候，不能一目了然&lt;/li&gt;
&lt;li&gt;在组件预览的时候，也不能很好的反应一个组件的多个不同状态&lt;/li&gt;
&lt;li&gt;自动化交互测试可以使用 &lt;a href=&quot;https://github.com/airbnb/enzyme&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;enzyme&lt;/a&gt;，但很多时候还得手动测试，就比较麻烦了&lt;/li&gt;
&lt;li&gt;在写文档的时候，需要将组件预览和文档写在一起，并需要切换到不同的状态，就比较吃力了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以，&lt;a href=&quot;https://github.com/storybooks/storybook&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;storybook&lt;/a&gt; 就是为了解决这些问题而出现的，它为你的组件搭建了一个强大的开发环境，主要提供了以下的几个功能：&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端进阶" scheme="http://www.barebear.cn/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="前端" scheme="http://www.barebear.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>webpack 之外的另一种选择：rollup</title>
    <link href="http://www.barebear.cn/web-advance/rollup/"/>
    <id>http://www.barebear.cn/web-advance/rollup/</id>
    <published>2020-02-21T08:45:56.000Z</published>
    <updated>2020-02-21T08:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://webpack.js.org/" target="_blank" rel="noopener">webpack</a> 对前端来说是再熟悉不过的工具了，它提供了强大的功能来构建前端的资源，包括 <code>html/js/ts/css/less/scss ...</code> 等语言脚本，也包括 <code>images/fonts ...</code> 等二进制文件。</p><p>其实，webpack 发起之初主要是为了解决以下两个问题：</p><ol><li>代码拆分（Code Splitting）: 可以将应用程序分解成可管理的代码块，可以按需加载，这样用户便可快速与应用交互，而不必等到整个应用程序下载和解析完成才能使用，以此构建复杂的单页应用程序（SPA）；</li><li>静态资源（Static Assets）: 可以将所有的静态资源，如 js、css、图片、字体等，导入到应用程序中，然后由 webpack 使用 hash 重命名需要的资源文件，而无需为文件 URL 增添 hash 而使用 hack 脚本，并且一个资源还能依赖其他资源。</li></ol><p>正是因为 webpack 拥有如此强大的功能，所以 webpack 在进行资源打包的时候，就会产生很多冗余的代码（如果你有查看过 webpack 的 bundle 文件，便会发现）。</p><a id="more"></a><p>比如，把 <code>export default str =&gt; str;</code> 这段代码用 webpack 打包就会得到下面的结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;******&#x2F; (function(modules) &#123; &#x2F;&#x2F; webpackBootstrap</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; The module cache</span><br><span class="line">&#x2F;******&#x2F; var installedModules &#x3D; &#123;&#125;;</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; The require function</span><br><span class="line">&#x2F;******&#x2F; function __webpack_require__(moduleId) &#123;</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; Check if module is in cache</span><br><span class="line">&#x2F;******&#x2F; if(installedModules[moduleId]) &#123;</span><br><span class="line">&#x2F;******&#x2F; return installedModules[moduleId].exports;</span><br><span class="line">&#x2F;******&#x2F; &#125;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; Create a new module (and put it into the cache)</span><br><span class="line">&#x2F;******&#x2F; var module &#x3D; installedModules[moduleId] &#x3D; &#123;</span><br><span class="line">&#x2F;******&#x2F; i: moduleId,</span><br><span class="line">&#x2F;******&#x2F; l: false,</span><br><span class="line">&#x2F;******&#x2F; exports: &#123;&#125;</span><br><span class="line">&#x2F;******&#x2F; &#125;;</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; Execute the module function</span><br><span class="line">&#x2F;******&#x2F; modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; Flag the module as loaded</span><br><span class="line">&#x2F;******&#x2F; module.l &#x3D; true;</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; Return the exports of the module</span><br><span class="line">&#x2F;******&#x2F; return module.exports;</span><br><span class="line">&#x2F;******&#x2F; &#125;</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; expose the modules object (__webpack_modules__)</span><br><span class="line">&#x2F;******&#x2F; __webpack_require__.m &#x3D; modules;</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; expose the module cache</span><br><span class="line">&#x2F;******&#x2F; __webpack_require__.c &#x3D; installedModules;</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; define getter function for harmony exports</span><br><span class="line">&#x2F;******&#x2F; __webpack_require__.d &#x3D; function(exports, name, getter) &#123;</span><br><span class="line">&#x2F;******&#x2F; if(!__webpack_require__.o(exports, name)) &#123;</span><br><span class="line">&#x2F;******&#x2F; Object.defineProperty(exports, name, &#123;</span><br><span class="line">&#x2F;******&#x2F; configurable: false,</span><br><span class="line">&#x2F;******&#x2F; enumerable: true,</span><br><span class="line">&#x2F;******&#x2F; get: getter</span><br><span class="line">&#x2F;******&#x2F; &#125;);</span><br><span class="line">&#x2F;******&#x2F; &#125;</span><br><span class="line">&#x2F;******&#x2F; &#125;;</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; getDefaultExport function for compatibility with non-harmony modules</span><br><span class="line">&#x2F;******&#x2F; __webpack_require__.n &#x3D; function(module) &#123;</span><br><span class="line">&#x2F;******&#x2F; var getter &#x3D; module &amp;&amp; module.__esModule ?</span><br><span class="line">&#x2F;******&#x2F; function getDefault() &#123; return module[&#39;default&#39;]; &#125; :</span><br><span class="line">&#x2F;******&#x2F; function getModuleExports() &#123; return module; &#125;;</span><br><span class="line">&#x2F;******&#x2F; __webpack_require__.d(getter, &#39;a&#39;, getter);</span><br><span class="line">&#x2F;******&#x2F; return getter;</span><br><span class="line">&#x2F;******&#x2F; &#125;;</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; Object.prototype.hasOwnProperty.call</span><br><span class="line">&#x2F;******&#x2F; __webpack_require__.o &#x3D; function(object, property) &#123; return Object.prototype.hasOwnProperty.call(object, property); &#125;;</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; __webpack_public_path__</span><br><span class="line">&#x2F;******&#x2F; __webpack_require__.p &#x3D; &quot;&quot;;</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; Load entry module and return exports</span><br><span class="line">&#x2F;******&#x2F; return __webpack_require__(__webpack_require__.s &#x3D; 0);</span><br><span class="line">&#x2F;******&#x2F; &#125;)</span><br><span class="line">&#x2F;************************************************************************&#x2F;</span><br><span class="line">&#x2F;******&#x2F; ([</span><br><span class="line">&#x2F;* 0 *&#x2F;</span><br><span class="line">&#x2F;***&#x2F; (function(module, __webpack_exports__, __webpack_require__) &#123;</span><br><span class="line"></span><br><span class="line">&quot;use strict&quot;;</span><br><span class="line">Object.defineProperty(__webpack_exports__, &quot;__esModule&quot;, &#123; value: true &#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;* harmony default export *&#x2F; __webpack_exports__[&quot;default&quot;] &#x3D; (str &#x3D;&gt; str);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;***&#x2F; &#125;)</span><br><span class="line">&#x2F;******&#x2F; ]);</span><br></pre></td></tr></table></figure><p>这在以下的一些情境中就不太高效，需要寻求更好的解决方案：</p><ol><li>需要 js 高效运行。因为 webpack 对子模块定义和运行时的依赖处理（<code>__webpack_require__</code>），不仅导致文件体积增大，还会大幅拉低性能；</li><li>项目（特别是类库）只有 js，而没有其他的静态资源文件，使用 webpack 就有点大才小用了，因为 webpack bundle 文件的体积略大，运行略慢，可读性略低。</li></ol><p>在这种情况下，就想要寻求一种更好的解决方案，这便是 <a href="https://github.com/rollup/rollup" target="_blank" rel="noopener">rollup</a>.</p><p>现在已经有很多类库都在使用 <a href="https://github.com/rollup/rollup" target="_blank" rel="noopener">rollup</a> 进行打包了，比如：<a href="https://github.com/facebook/react" target="_blank" rel="noopener">react</a>, <a href="https://github.com/vuejs/vue" target="_blank" rel="noopener">vue</a>, <a href="https://github.com/developit/preact" target="_blank" rel="noopener">preact</a>, <a href="https://github.com/mrdoob/three.js" target="_blank" rel="noopener">three.js</a>, <a href="https://github.com/moment/moment" target="_blank" rel="noopener">moment</a>, <a href="https://github.com/d3/d3" target="_blank" rel="noopener">d3</a> 等。</p><h2 id="1-工具"><a href="#1-工具" class="headerlink" title="1. 工具"></a>1. 工具</h2><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i -g rollup          # 全局安装</span><br><span class="line"></span><br><span class="line">npm i -D rollup          # 本地安装</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rollup -c                # 使用一个配置文件，进行打包操作</span><br></pre></td></tr></table></figure><p>更多详细的用法，参考 <a href="https://rollupjs.org/guide/en#command-line-flags" target="_blank" rel="noopener">rollup.js - command-line-flags</a>.</p><h2 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h2><p><a href="https://github.com/rollup/rollup" target="_blank" rel="noopener">rollup</a> 的配置与 <a href="https://webpack.js.org/" target="_blank" rel="noopener">webpack</a> 的配置类似，定义在 <code>rollup.config.js</code> 文件中，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; rollup.config.js</span><br><span class="line">export default &#123;</span><br><span class="line">  input: &#39;src&#x2F;index.js&#39;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    file: &#39;bundle.js&#39;,</span><br><span class="line">    &#x2F;&#x2F; amd, cjs, esm, iife, umd, system</span><br><span class="line">    format: &#39;cjs&#39;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>常用的几个配置项：</p><ol><li><code>input</code>: 源码入口文件，一般是一个文件，如 <code>src/index.js</code>。</li><li><code>output</code>: 定义输出，如文件名，目标目录，输出模块范式（<code>es6</code>, <code>commonjs</code>, <code>amd</code>, <code>umd</code>, <code>iife</code> 等），模块导出名称，外部库声明，全局变量等。</li><li><code>plugins</code>: 插件，比如 <a href="https://github.com/rollup/rollup-plugin-json" target="_blank" rel="noopener">rollup-plugin-json</a> 可以让 rollup 从 <code>.json</code> 文件中导入 json 数据。</li></ol><p>更多详细的配置，参考 <a href="https://rollupjs.org/guide/en#configuration-files" target="_blank" rel="noopener">rollup.js - configuration-files</a>.</p><h2 id="3-rollup-与-webpack-对比"><a href="#3-rollup-与-webpack-对比" class="headerlink" title="3. rollup 与 webpack 对比"></a>3. rollup 与 webpack 对比</h2><p>先拿段代码来来看看他们打包之后各自是什么效果。</p><p>源代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 目录</span><br><span class="line">|-- src&#x2F;</span><br><span class="line">    |-- index.js</span><br><span class="line">    |-- prefix.js</span><br><span class="line">    |-- suffix.js</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># prefix.js</span><br><span class="line">const prefix &#x3D; &#39;prefix&#39;;</span><br><span class="line"></span><br><span class="line">export default str &#x3D;&gt; &#96;$&#123;prefix&#125; | $&#123;str&#125;&#96;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># suffix.js</span><br><span class="line">const suffix &#x3D; &#39;suffix&#39;;</span><br><span class="line"></span><br><span class="line">export default str &#x3D;&gt; &#96;$&#123;str&#125; | $&#123;suffix&#125;&#96;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># index.js</span><br><span class="line">import prefix from &#39;.&#x2F;prefix&#39;;</span><br><span class="line">import suffix from &#39;.&#x2F;suffix&#39;;</span><br><span class="line"></span><br><span class="line">export default str &#x3D;&gt; suffix(prefix(str));</span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># webpack.config.js</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  entry: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &#39;dist&#x2F;webpack.bundle.js&#39;,</span><br><span class="line">    library: &#39;demo&#39;,</span><br><span class="line">    libraryTarget: &#39;umd&#39;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># rollup.config.js</span><br><span class="line">export default &#123;</span><br><span class="line">  input: &#39;src&#x2F;index.js&#39;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    file: &#39;dist&#x2F;rollup.bundle.js&#39;,</span><br><span class="line">    name: &#39;demo&#39;,</span><br><span class="line">    format: &#39;umd&#39;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># webpack 打包</span><br><span class="line">webpack</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># rollup 打包</span><br><span class="line">rollup -c</span><br></pre></td></tr></table></figure><p>webpack.bundle.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">(function webpackUniversalModuleDefinition(root, factory) &#123;</span><br><span class="line">if(typeof exports &#x3D;&#x3D;&#x3D; &#39;object&#39; &amp;&amp; typeof module &#x3D;&#x3D;&#x3D; &#39;object&#39;)</span><br><span class="line">module.exports &#x3D; factory();</span><br><span class="line">else if(typeof define &#x3D;&#x3D;&#x3D; &#39;function&#39; &amp;&amp; define.amd)</span><br><span class="line">define([], factory);</span><br><span class="line">else if(typeof exports &#x3D;&#x3D;&#x3D; &#39;object&#39;)</span><br><span class="line">exports[&quot;demo&quot;] &#x3D; factory();</span><br><span class="line">else</span><br><span class="line">root[&quot;demo&quot;] &#x3D; factory();</span><br><span class="line">&#125;)(typeof self !&#x3D;&#x3D; &#39;undefined&#39; ? self : this, function() &#123;</span><br><span class="line">return &#x2F;******&#x2F; (function(modules) &#123; &#x2F;&#x2F; webpackBootstrap</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; The module cache</span><br><span class="line">&#x2F;******&#x2F; var installedModules &#x3D; &#123;&#125;;</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; The require function</span><br><span class="line">&#x2F;******&#x2F; function __webpack_require__(moduleId) &#123;</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; Check if module is in cache</span><br><span class="line">&#x2F;******&#x2F; if(installedModules[moduleId]) &#123;</span><br><span class="line">&#x2F;******&#x2F; return installedModules[moduleId].exports;</span><br><span class="line">&#x2F;******&#x2F; &#125;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; Create a new module (and put it into the cache)</span><br><span class="line">&#x2F;******&#x2F; var module &#x3D; installedModules[moduleId] &#x3D; &#123;</span><br><span class="line">&#x2F;******&#x2F; i: moduleId,</span><br><span class="line">&#x2F;******&#x2F; l: false,</span><br><span class="line">&#x2F;******&#x2F; exports: &#123;&#125;</span><br><span class="line">&#x2F;******&#x2F; &#125;;</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; Execute the module function</span><br><span class="line">&#x2F;******&#x2F; modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; Flag the module as loaded</span><br><span class="line">&#x2F;******&#x2F; module.l &#x3D; true;</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; Return the exports of the module</span><br><span class="line">&#x2F;******&#x2F; return module.exports;</span><br><span class="line">&#x2F;******&#x2F; &#125;</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; expose the modules object (__webpack_modules__)</span><br><span class="line">&#x2F;******&#x2F; __webpack_require__.m &#x3D; modules;</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; expose the module cache</span><br><span class="line">&#x2F;******&#x2F; __webpack_require__.c &#x3D; installedModules;</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; define getter function for harmony exports</span><br><span class="line">&#x2F;******&#x2F; __webpack_require__.d &#x3D; function(exports, name, getter) &#123;</span><br><span class="line">&#x2F;******&#x2F; if(!__webpack_require__.o(exports, name)) &#123;</span><br><span class="line">&#x2F;******&#x2F; Object.defineProperty(exports, name, &#123;</span><br><span class="line">&#x2F;******&#x2F; configurable: false,</span><br><span class="line">&#x2F;******&#x2F; enumerable: true,</span><br><span class="line">&#x2F;******&#x2F; get: getter</span><br><span class="line">&#x2F;******&#x2F; &#125;);</span><br><span class="line">&#x2F;******&#x2F; &#125;</span><br><span class="line">&#x2F;******&#x2F; &#125;;</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; getDefaultExport function for compatibility with non-harmony modules</span><br><span class="line">&#x2F;******&#x2F; __webpack_require__.n &#x3D; function(module) &#123;</span><br><span class="line">&#x2F;******&#x2F; var getter &#x3D; module &amp;&amp; module.__esModule ?</span><br><span class="line">&#x2F;******&#x2F; function getDefault() &#123; return module[&#39;default&#39;]; &#125; :</span><br><span class="line">&#x2F;******&#x2F; function getModuleExports() &#123; return module; &#125;;</span><br><span class="line">&#x2F;******&#x2F; __webpack_require__.d(getter, &#39;a&#39;, getter);</span><br><span class="line">&#x2F;******&#x2F; return getter;</span><br><span class="line">&#x2F;******&#x2F; &#125;;</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; Object.prototype.hasOwnProperty.call</span><br><span class="line">&#x2F;******&#x2F; __webpack_require__.o &#x3D; function(object, property) &#123; return Object.prototype.hasOwnProperty.call(object, property); &#125;;</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; __webpack_public_path__</span><br><span class="line">&#x2F;******&#x2F; __webpack_require__.p &#x3D; &quot;&quot;;</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; Load entry module and return exports</span><br><span class="line">&#x2F;******&#x2F; return __webpack_require__(__webpack_require__.s &#x3D; 0);</span><br><span class="line">&#x2F;******&#x2F; &#125;)</span><br><span class="line">&#x2F;************************************************************************&#x2F;</span><br><span class="line">&#x2F;******&#x2F; ([</span><br><span class="line">&#x2F;* 0 *&#x2F;</span><br><span class="line">&#x2F;***&#x2F; (function(module, __webpack_exports__, __webpack_require__) &#123;</span><br><span class="line"></span><br><span class="line">&quot;use strict&quot;;</span><br><span class="line">Object.defineProperty(__webpack_exports__, &quot;__esModule&quot;, &#123; value: true &#125;);</span><br><span class="line">&#x2F;* harmony import *&#x2F; var __WEBPACK_IMPORTED_MODULE_0__prefix__ &#x3D; __webpack_require__(1);</span><br><span class="line">&#x2F;* harmony import *&#x2F; var __WEBPACK_IMPORTED_MODULE_1__suffix__ &#x3D; __webpack_require__(2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;* harmony default export *&#x2F; __webpack_exports__[&quot;default&quot;] &#x3D; (str &#x3D;&gt; Object(__WEBPACK_IMPORTED_MODULE_1__suffix__[&quot;a&quot; &#x2F;* default *&#x2F;])(Object(__WEBPACK_IMPORTED_MODULE_0__prefix__[&quot;a&quot; &#x2F;* default *&#x2F;])(str)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;***&#x2F; &#125;),</span><br><span class="line">&#x2F;* 1 *&#x2F;</span><br><span class="line">&#x2F;***&#x2F; (function(module, __webpack_exports__, __webpack_require__) &#123;</span><br><span class="line"></span><br><span class="line">&quot;use strict&quot;;</span><br><span class="line">const prefix &#x3D; &#39;prefix&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;* harmony default export *&#x2F; __webpack_exports__[&quot;a&quot;] &#x3D; (str &#x3D;&gt; &#96;$&#123;prefix&#125; | $&#123;str&#125;&#96;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;***&#x2F; &#125;),</span><br><span class="line">&#x2F;* 2 *&#x2F;</span><br><span class="line">&#x2F;***&#x2F; (function(module, __webpack_exports__, __webpack_require__) &#123;</span><br><span class="line"></span><br><span class="line">&quot;use strict&quot;;</span><br><span class="line">const suffix &#x3D; &#39;suffix&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;* harmony default export *&#x2F; __webpack_exports__[&quot;a&quot;] &#x3D; (str &#x3D;&gt; &#96;$&#123;str&#125; | $&#123;suffix&#125;&#96;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;***&#x2F; &#125;)</span><br><span class="line">&#x2F;******&#x2F; ]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>rollup.bundle.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">(function (global, factory) &#123;</span><br><span class="line">typeof exports &#x3D;&#x3D;&#x3D; &#39;object&#39; &amp;&amp; typeof module !&#x3D;&#x3D; &#39;undefined&#39; ? module.exports &#x3D; factory() :</span><br><span class="line">typeof define &#x3D;&#x3D;&#x3D; &#39;function&#39; &amp;&amp; define.amd ? define(factory) :</span><br><span class="line">(global.demo &#x3D; factory());</span><br><span class="line">&#125;(this, (function () &#123; &#39;use strict&#39;;</span><br><span class="line"></span><br><span class="line">const prefix &#x3D; &#39;prefix&#39;;</span><br><span class="line"></span><br><span class="line">var prefix$1 &#x3D; str &#x3D;&gt; &#96;$&#123;prefix&#125; | $&#123;str&#125;&#96;;</span><br><span class="line"></span><br><span class="line">const suffix &#x3D; &#39;suffix&#39;;</span><br><span class="line"></span><br><span class="line">var suffix$1 &#x3D; str &#x3D;&gt; &#96;$&#123;str&#125; | $&#123;suffix&#125;&#96;;</span><br><span class="line"></span><br><span class="line">var index &#x3D; str &#x3D;&gt; suffix$1(prefix$1(str));</span><br><span class="line"></span><br><span class="line">return index;</span><br><span class="line"></span><br><span class="line">&#125;)));</span><br></pre></td></tr></table></figure><p>其实，你也基本上看出来了，在这种场景下，rollup 的优势在哪里：</p><ol><li>文件很小，几乎没什么多余代码，除了必要的 <code>cjs</code>, <code>umd</code> 头外，bundle 代码基本和源码差不多，也没有奇怪的 <code>__webpack_require__</code>, <code>Object.defineProperty</code> 之类的东西；</li><li>执行很快，因为没有 webpack bundle 中的 <code>__webpack_require__</code>, <code>Object.defineProperty</code> 之类的冗余代码；</li><li>另外，rollup 也对 es 模块输出及 iife 格式打包有很好的支持。</li></ol><h2 id="4-结论"><a href="#4-结论" class="headerlink" title="4. 结论"></a>4. 结论</h2><p>rollup 相对 webpack 而言，要小巧、干净利落一些，但不具备 webpack 的一些强大的功能，如热更新，代码分割，公共依赖提取等。</p><p>所以，一个不错的选择是，应用使用 webpack，类库使用 rollup。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://webpack.js.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;webpack&lt;/a&gt; 对前端来说是再熟悉不过的工具了，它提供了强大的功能来构建前端的资源，包括 &lt;code&gt;html/js/ts/css/less/scss ...&lt;/code&gt; 等语言脚本，也包括 &lt;code&gt;images/fonts ...&lt;/code&gt; 等二进制文件。&lt;/p&gt;
&lt;p&gt;其实，webpack 发起之初主要是为了解决以下两个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;代码拆分（Code Splitting）: 可以将应用程序分解成可管理的代码块，可以按需加载，这样用户便可快速与应用交互，而不必等到整个应用程序下载和解析完成才能使用，以此构建复杂的单页应用程序（SPA）；&lt;/li&gt;
&lt;li&gt;静态资源（Static Assets）: 可以将所有的静态资源，如 js、css、图片、字体等，导入到应用程序中，然后由 webpack 使用 hash 重命名需要的资源文件，而无需为文件 URL 增添 hash 而使用 hack 脚本，并且一个资源还能依赖其他资源。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;正是因为 webpack 拥有如此强大的功能，所以 webpack 在进行资源打包的时候，就会产生很多冗余的代码（如果你有查看过 webpack 的 bundle 文件，便会发现）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端进阶" scheme="http://www.barebear.cn/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="前端" scheme="http://www.barebear.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>怎样提升代码质量</title>
    <link href="http://www.barebear.cn/web-advance/code-quality/"/>
    <id>http://www.barebear.cn/web-advance/code-quality/</id>
    <published>2020-02-21T08:41:56.000Z</published>
    <updated>2020-02-21T08:06:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>尽管写了多年的代码，但是始终有一件事不敢确定，就是自己的代码究竟写得好不好？这个问题很难有确切的答案，因为这个跟风格、规范有很大关系，而风格、规范很难说好还是不好。</p><p>但我觉得好的代码，一定是能让别人阅读起来有一种爽心悦目的感觉。</p><a id="more"></a><h2 id="1-开发规范"><a href="#1-开发规范" class="headerlink" title="1. 开发规范"></a>1. 开发规范</h2><p>不管是团队协作还是个人独立开发，遵循一定的开发规范都是很有必要的。就团队协作来说，可能每个人的风格迥然不同，如果没有规范的约束的话，团队之间的协作会大打折扣的。而就个人独立开发来说，很难说一年后的你回头看今天自己写的代码是满意的。</p><h4 id="js-开发规范"><a href="#js-开发规范" class="headerlink" title="js 开发规范"></a><code>js</code> 开发规范</h4><p>一般前端开发的主要工作都要 <code>js</code> 部分，所以一般前端开发规范都是对 <code>js</code> 而言的。</p><p>认可度比较高的有：</p><ul><li><a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener">airbnb js style</a></li><li><a href="https://google.github.io/styleguide/jsguide.html" target="_blank" rel="noopener">google js style</a></li><li><a href="https://github.com/rwaldron/idiomatic.js" target="_blank" rel="noopener">idiomatic js style</a></li><li><a href="https://github.com/standard/standard" target="_blank" rel="noopener">standard js style</a></li></ul><h4 id="css-开发规范"><a href="#css-开发规范" class="headerlink" title="css 开发规范"></a><code>css</code> 开发规范</h4><p>认可度比较高的有：</p><ul><li><a href="https://github.com/airbnb/css" target="_blank" rel="noopener">airbnb css style</a></li><li><a href="https://github.com/necolas/idiomatic-css" target="_blank" rel="noopener">idiomatic css style</a></li></ul><h2 id="2-使用工具检查、自动矫正与优化"><a href="#2-使用工具检查、自动矫正与优化" class="headerlink" title="2. 使用工具检查、自动矫正与优化"></a>2. 使用工具检查、自动矫正与优化</h2><p>尽管有规范可循，但其实开发的时候并不知道自己的代码是否是符合规范的，所以就需要工具来检查与矫正代码。</p><h3 id="2-1-检查与自动矫正"><a href="#2-1-检查与自动矫正" class="headerlink" title="2.1 检查与自动矫正"></a>2.1 检查与自动矫正</h3><p>认可度比较高的有：</p><ol><li><a href="https://github.com/eslint/eslint" target="_blank" rel="noopener">eslint</a>：检查 js 语法（包括 jsx 语法），然后最大程度的矫正不符合规范的代码；</li><li><a href="https://github.com/stylelint/stylelint" target="_blank" rel="noopener">stylelint</a>：检查 css 语法（包括 less, scss 语法），然后最大程度的矫正不符合规范的代码。</li></ol><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p><code>目录文件</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">|-- root&#x2F;                    &#x2F;&#x2F; 项目根目录</span><br><span class="line">    |-- package.json</span><br><span class="line">    |-- .eslintrc            &#x2F;&#x2F; eslint 配置文件</span><br><span class="line">    |-- .eslintignore        &#x2F;&#x2F; eslint 忽略配置，类似 .gitignore</span><br><span class="line">    |-- .stylelintrc         &#x2F;&#x2F; stylelint 配置文件</span><br><span class="line">    |-- .stylelintignore     &#x2F;&#x2F; stylelint 忽略配置，类似 .gitignore</span><br></pre></td></tr></table></figure><p><code>package.json</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;eslint&quot;: &quot;eslint .&quot;,                             &#x2F;&#x2F; 仅检查</span><br><span class="line">  &quot;eslint:fix&quot;: &quot;eslint . --fix&quot;,                   &#x2F;&#x2F; 检查之后自动矫正</span><br><span class="line"></span><br><span class="line">  &quot;stylelint&quot;: &quot;stylelint \&quot;.&#x2F;**&#x2F;*.&#123;css,less,sass,scss&#125;\&quot;&quot;,             &#x2F;&#x2F; 仅检查</span><br><span class="line">  &quot;stylelint:fix&quot;: &quot;stylelint \&quot;.&#x2F;**&#x2F;*.&#123;css,less,sass,scss&#125;\&quot; --fix&quot;    &#x2F;&#x2F; 检查之后自动矫正</span><br><span class="line">&#125;,</span><br><span class="line">&quot;devDependencies&quot;: &#123;</span><br><span class="line">  &quot;eslint&quot;: &quot;^4.19.1&quot;,                              &#x2F;&#x2F; eslint 主文件</span><br><span class="line">  &quot;babel-eslint&quot;: &quot;^8.2.5&quot;,                         &#x2F;&#x2F; babel 转码器 for eslint</span><br><span class="line">  &quot;eslint-config-airbnb&quot;: &quot;^17.0.0&quot;,                &#x2F;&#x2F; airbnb eslint 规则</span><br><span class="line">  &quot;eslint-config-prettier&quot;: &quot;^2.9.0&quot;,               &#x2F;&#x2F; prettier eslint 规则</span><br><span class="line">  &quot;eslint-plugin-babel&quot;: &quot;^5.1.0&quot;,                  &#x2F;&#x2F; eslint 的 babel 转码插件</span><br><span class="line">  &quot;eslint-plugin-import&quot;: &quot;^2.13.0&quot;,                &#x2F;&#x2F; eslint 检查模块输入输出是否正确的插件</span><br><span class="line">  &quot;eslint-plugin-jsx-a11y&quot;: &quot;^6.1.0&quot;,               &#x2F;&#x2F; eslint jsx 语法检查的一个插件</span><br><span class="line">  &quot;eslint-plugin-prettier&quot;: &quot;^2.6.2&quot;,               &#x2F;&#x2F; prettier eslint 插件</span><br><span class="line">  &quot;eslint-plugin-react&quot;: &quot;^7.10.0&quot;,                 &#x2F;&#x2F; eslint react 语法检查插件</span><br><span class="line"></span><br><span class="line">  &quot;stylelint&quot;: &quot;^9.3.0&quot;,                            &#x2F;&#x2F; stylelint 主文件</span><br><span class="line">  &quot;stylelint-config-prettier&quot;: &quot;^3.3.0&quot;,            &#x2F;&#x2F; prettier stylelint 规则</span><br><span class="line">  &quot;stylelint-config-standard&quot;: &quot;^18.2.0&quot;            &#x2F;&#x2F; standard stylelint 规则</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><code>.eslintrc</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;parser&quot;: &quot;babel-eslint&quot;,</span><br><span class="line">  &quot;extends&quot;: [&quot;airbnb&quot;, &quot;prettier&quot;],</span><br><span class="line">  &quot;env&quot;: &#123;</span><br><span class="line">    &quot;browser&quot;: true,</span><br><span class="line">    &quot;node&quot;: true,</span><br><span class="line">    &quot;es6&quot;: true,</span><br><span class="line">    &quot;mocha&quot;: true,</span><br><span class="line">    &quot;jest&quot;: true,</span><br><span class="line">    &quot;jasmine&quot;: true</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;rules&quot;: &#123;</span><br><span class="line">    ... &#x2F;&#x2F; 更多自己定义的规则</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>.stylelintrc</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;extends&quot;: [&quot;stylelint-config-standard&quot;, &quot;stylelint-config-prettier&quot;],</span><br><span class="line">  &quot;rules&quot;: &#123;</span><br><span class="line">    ... &#x2F;&#x2F; 更多自己定义的规则</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行命令"><a href="#运行命令" class="headerlink" title="运行命令"></a>运行命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm run eslint           &#x2F;&#x2F; 检查项目中的 js(jsx) 语法</span><br><span class="line">npm run eslint:fix       &#x2F;&#x2F; 检查项目中的 js(jsx) 语法，并最大程度的矫正</span><br><span class="line"></span><br><span class="line">npm run stylelint        &#x2F;&#x2F; 检查项目中的 css(less,scss) 语法</span><br><span class="line">npm run stylelint:fix    &#x2F;&#x2F; 检查项目中的 css(less,scss) 语法，并最大程度的矫正</span><br></pre></td></tr></table></figure><h3 id="2-2-代码优化"><a href="#2-2-代码优化" class="headerlink" title="2.2 代码优化"></a>2.2 代码优化</h3><p><a href="https://github.com/eslint/eslint" target="_blank" rel="noopener">eslint</a> 与 <a href="https://github.com/stylelint/stylelint" target="_blank" rel="noopener">stylelint</a> 在对代码做检查和自动矫正时，只保证代码的语法是符合一定的规范，并不对代码的格式做任何优化，所以，自动矫正后的代码可能格式会不太好，阅读性不太高。</p><p>所以，一般会在对代码检查与自动矫正之后做代码格式优化。</p><p>使用比较多的：<a href="https://github.com/prettier/prettier" target="_blank" rel="noopener">prettier</a>.</p><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p><code>目录文件</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|-- root&#x2F;                    &#x2F;&#x2F; 项目根目录</span><br><span class="line">    |-- package.json</span><br><span class="line">    |-- .prettierrc          &#x2F;&#x2F; prettier 配置文件</span><br><span class="line">    |-- .prettierignore      &#x2F;&#x2F; prettier 忽略配置，类似 .gitignore</span><br></pre></td></tr></table></figure><p><code>package.json</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &#x2F;&#x2F; 对 js,jsx,css,less,md,json 文件进行优化</span><br><span class="line">  &quot;prettier&quot;: &quot;prettier --write \&quot;.&#x2F;**&#x2F;*.&#123;js,jsx,css,less,md,json&#125;\&quot;&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;devDependencies&quot;: &#123;</span><br><span class="line">  &quot;prettier&quot;: &quot;^1.13.7&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><code>.prettierrc</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;singleQuote&quot;: true,</span><br><span class="line">  &quot;trailingComma&quot;: &quot;es5&quot;,</span><br><span class="line">  &quot;printWidth&quot;: 120,</span><br><span class="line">  &quot;overrides&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;files&quot;: &quot;.prettierrc&quot;,</span><br><span class="line">      &quot;options&quot;: &#123; &quot;parser&quot;: &quot;json&quot; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行命令-1"><a href="#运行命令-1" class="headerlink" title="运行命令"></a>运行命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run prettier</span><br></pre></td></tr></table></figure><h3 id="2-3-强制对代码进行检查、自动矫正与优化"><a href="#2-3-强制对代码进行检查、自动矫正与优化" class="headerlink" title="2.3 强制对代码进行检查、自动矫正与优化"></a>2.3 强制对代码进行检查、自动矫正与优化</h3><p>尽管定好了规范与工具命令，但开发人员完全可以跳过这些步骤，这尤其是在团队开发中很难强制其他组员会去做代码检查、自动矫正与优化。</p><p>所以，使用工具强制开发人员对代码进行检查、自动矫正与优化，就显得很有必要了。</p><p>使用比较多的：</p><ul><li><a href="https://github.com/typicode/husky" target="_blank" rel="noopener">husky</a>：对 git 进行 hook，可以在 git 操作之前做一些操作；</li><li><a href="https://github.com/okonet/lint-staged" target="_blank" rel="noopener">lint-staged</a>：对当前 git 提交的代码进行一些操作。</li></ul><p><code>package.json</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;precommit&quot;: &quot;npm run lint-staged&quot;,     &#x2F;&#x2F; 在 git 提交之前运行 lint-staged 命令</span><br><span class="line">  &quot;lint-staged&quot;: &quot;lint-staged&quot;,           &#x2F;&#x2F; 对 git 将要提交的代码做操作</span><br><span class="line">&#125;,</span><br><span class="line">&quot;devDependencies&quot;: &#123;</span><br><span class="line">  &quot;husky&quot;: &quot;^0.14.3&quot;,</span><br><span class="line">  &quot;lint-staged&quot;: &quot;^7.2.0&quot;,</span><br><span class="line">&#125;,</span><br><span class="line">&quot;lint-staged&quot;: &#123;</span><br><span class="line">  &quot;**&#x2F;*.&#123;js,jsx&#125;&quot;: [</span><br><span class="line">    &quot;eslint --fix&quot;,                      &#x2F;&#x2F; 对 js,jsx 文件进行 eslint 检查、自动矫正</span><br><span class="line">    &quot;prettier --write&quot;,                  &#x2F;&#x2F; 然后 使用 prettier 进行代码格式优化</span><br><span class="line">    &quot;git add&quot;                            &#x2F;&#x2F; 最后重新添加</span><br><span class="line">  ],</span><br><span class="line">  &quot;**&#x2F;*.&#123;css,less&#125;&quot;: [</span><br><span class="line">    &quot;stylelint --fix&quot;,                   &#x2F;&#x2F; 对 css,less 文件进行 stylelint 检查、自动矫正</span><br><span class="line">    &quot;prettier --write&quot;,                  &#x2F;&#x2F; 然后 使用 prettier 进行代码格式优化</span><br><span class="line">    &quot;git add&quot;                            &#x2F;&#x2F; 最后重新添加</span><br><span class="line">  ],</span><br><span class="line">  &quot;**&#x2F;*.&#123;md,json&#125;&quot;: [</span><br><span class="line">    &quot;prettier --write&quot;,                  &#x2F;&#x2F; 使用 prettier 进行代码格式优化</span><br><span class="line">    &quot;git add&quot;                            &#x2F;&#x2F; 最后重新添加</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>这样，在每次 <code>git commit</code> 之前，都会对将要提交的文件进行检查、自动矫正与优化，如果其中有一项发生错误，本次提交都会失败。然后开发人员调整代码之后再进行提交，只有每项任务都是没问题的，才能提交成功。</p><p>这样，便可使每个开发人员都是按照一定的规范与风格写代码的。</p><h2 id="3-编辑器配置：-editorconfig"><a href="#3-编辑器配置：-editorconfig" class="headerlink" title="3. 编辑器配置：.editorconfig"></a>3. 编辑器配置：<code>.editorconfig</code></h2><p>有了规范，也加上了工具做自动化代码检查、矫正与优化，但还有一点需要提及一下，就是在团队协作中，每个开发人员可能使用的编辑器不一样，编辑器的配置也不一样，这就导致工具在做格式优化的时候，不同的开发人员中输出的代码不一样。</p><p>这就需要配置文件 <code>.editorconfig</code> 去统一每个开发人员的编辑器配置。</p><p><code>目录文件</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">|-- root&#x2F;                    &#x2F;&#x2F; 项目根目录</span><br><span class="line">    |-- .editorconfig        &#x2F;&#x2F; 编辑器配置文件</span><br></pre></td></tr></table></figure><p><code>.editorconfig</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># http:&#x2F;&#x2F;editorconfig.org</span><br><span class="line">root &#x3D; true</span><br><span class="line"></span><br><span class="line">[*]</span><br><span class="line">indent_style &#x3D; space                    # 输入的 tab 都用空格代替</span><br><span class="line">indent_size &#x3D; 2                         # 一个 tab 用 2 个空格代替</span><br><span class="line">end_of_line &#x3D; lf                        # 换行符使用 unix 的换行符 \n</span><br><span class="line">charset &#x3D; utf-8                         # 字符编码 utf-8</span><br><span class="line">trim_trailing_whitespace &#x3D; true         # 去掉每行末尾的空格</span><br><span class="line">insert_final_newline &#x3D; true             # 每个文件末尾都加一个空行</span><br><span class="line"></span><br><span class="line">[*.md]</span><br><span class="line">trim_trailing_whitespace &#x3D; false        # .md 文件不去掉每行末尾的空格</span><br></pre></td></tr></table></figure><p>更多的编辑器配置规则，可以查看 <a href="http://editorconfig.org" target="_blank" rel="noopener">http://editorconfig.org</a>.</p><h2 id="4-业务逻辑优化"><a href="#4-业务逻辑优化" class="headerlink" title="4. 业务逻辑优化"></a>4. 业务逻辑优化</h2><p>上面提到的这些只是风格、规范、语法上的优化，但对编码质量的评估更多的是在业务逻辑具体实现这一块。</p><p>一般来说，业务逻辑实现的优化离不开下面几个方向：</p><ol><li>模块化：<ul><li>js 的模块化已经很成熟了，目前使用最多的是 <code>commonjs</code> 模块化规范和 <code>es6</code> 模块；</li><li>css 的模块化也一直在探索中，之前也专门写了一篇 <a href="/10.md">CSS 模块化</a>，可以参考下；</li><li>html 没有模块化，但是可以将一个很长的 html 文件进行分块，参考 <a href="https://github.com/webpack-contrib/html-loader" target="_blank" rel="noopener">html-loader</a>。</li></ul></li><li>组件化：当项目变大、变多，很多公共的代码需要复用或者跨项目使用的时候，组件化就变得很必要了，之前也专门写了一篇 <a href="/6.md">组件化</a>，可以参考下；</li><li>逻辑解耦：把一个复杂的逻辑，分割成多个子逻辑，然后将子逻辑串起来，或者把多个交叉逻辑的公共部分拆出来，然后再挨个串起来；</li><li>功能分块：细化一个一个的功能为单独的模块。</li></ol><h2 id="5-逻辑解耦"><a href="#5-逻辑解耦" class="headerlink" title="5. 逻辑解耦"></a>5. 逻辑解耦</h2><p>逻辑解耦就是把一个复杂的逻辑，分割成多个子逻辑，或者把多个交叉逻辑的公共部分拆成单个逻辑。这样做的目的是降低应用的复杂度，更据阅读性。</p><p>比如，3 个串行的 ajax 请求，可以分割成多个子逻辑：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$.getJSON(url1, data1, res1 &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; do something with res1</span><br><span class="line"></span><br><span class="line">  $.getJSON(url2, data2, res2 &#x3D;&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F; do something with res2</span><br><span class="line"></span><br><span class="line">    $.getJSON(url3, data3, res3 &#x3D;&gt; &#123;</span><br><span class="line">      &#x2F;&#x2F; do something with res3</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>逻辑解耦之后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">const request1 &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  $.getJSON(url1, data1, res1 &#x3D;&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F; do something with res1</span><br><span class="line"></span><br><span class="line">    request2();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">const request2 &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  $.getJSON(url2, data2, res2 &#x3D;&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F; do something with res2</span><br><span class="line"></span><br><span class="line">    request3();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">const request3 &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  $.getJSON(url3, data3, res3 &#x3D;&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F; do something with res3</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">request1();</span><br></pre></td></tr></table></figure><p>再比如，在不同文件中需要依赖同一个 ajax 请求，可以把交叉逻辑的部分拆成单个逻辑：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># file1.js</span><br><span class="line"></span><br><span class="line">$.getJSON(url, data, res &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; do something with res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># file2.js</span><br><span class="line"></span><br><span class="line">$.getJSON(url, data, res &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; do something with res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逻辑解耦之后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># request.js</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; cb &#x3D;&gt; &#123;</span><br><span class="line">  $.getJSON(url, data, res &#x3D;&gt; &#123;</span><br><span class="line">    cb(res);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"># file1.js</span><br><span class="line"></span><br><span class="line">const request &#x3D; require(&#39;.&#x2F;request&#39;);</span><br><span class="line">request(res &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; do something with res</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"># file2.js</span><br><span class="line"></span><br><span class="line">const request &#x3D; require(&#39;.&#x2F;request&#39;);</span><br><span class="line">request(res &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; do something with res</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="6-功能分块"><a href="#6-功能分块" class="headerlink" title="6. 功能分块"></a>6. 功能分块</h2><p>细化功能为单独的模块也是提升代码质量的一个方式。</p><p>比如，将一个文件拆成多个文件（颗粒化）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># util.js</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  func1: args &#x3D;&gt; &#123; ... &#125;,</span><br><span class="line">  func2: args &#x3D;&gt; &#123; ... &#125;,</span><br><span class="line">  func3: args &#x3D;&gt; &#123; ... &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>将功能分块之后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># util&#x2F;func1.js</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; args &#x3D;&gt; &#123; ... &#125;;</span><br><span class="line"></span><br><span class="line"># util&#x2F;func2.js</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; args &#x3D;&gt; &#123; ... &#125;;</span><br><span class="line"></span><br><span class="line"># util&#x2F;func3.js</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; args &#x3D;&gt; &#123; ... &#125;;</span><br></pre></td></tr></table></figure><p>再比如，将一个大功能块分割成多个小功能块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$.getJSON(url, data, res &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; 渲染页面</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 初始化组件</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 装载数据</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 绑定模型</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般这种情况下，一个功能代码块就可能会很长，200 行都有可能，这个时候就需要将其分割成多个小代码块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">const renderPages &#x3D; res &#x3D;&gt; &#123; ... &#125;;</span><br><span class="line">const initComponents &#x3D; res &#x3D;&gt; &#123; ... &#125;;</span><br><span class="line">const fillData &#x3D; res &#x3D;&gt; &#123; ... &#125;;</span><br><span class="line">const bindModels &#x3D; res &#x3D;&gt; &#123; ... &#125;;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$.getJSON(url, data, res &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; 渲染页面</span><br><span class="line">  renderPages();</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 初始化组件</span><br><span class="line">  initComponents();</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 装载数据</span><br><span class="line">  fillData()</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 绑定模型</span><br><span class="line">  bindModels();</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-多阅读"><a href="#7-多阅读" class="headerlink" title="7. 多阅读"></a>7. 多阅读</h2><p>最后，也是最重要的，就是多阅读别人优秀的代码，阅读永远是获取知识最重要的途径，没有之一。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;尽管写了多年的代码，但是始终有一件事不敢确定，就是自己的代码究竟写得好不好？这个问题很难有确切的答案，因为这个跟风格、规范有很大关系，而风格、规范很难说好还是不好。&lt;/p&gt;
&lt;p&gt;但我觉得好的代码，一定是能让别人阅读起来有一种爽心悦目的感觉。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端进阶" scheme="http://www.barebear.cn/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="前端" scheme="http://www.barebear.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>从0开始发布一个无依赖、高质量的 npm 包</title>
    <link href="http://www.barebear.cn/web-advance/npm-package/"/>
    <id>http://www.barebear.cn/web-advance/npm-package/</id>
    <published>2020-02-21T07:40:56.000Z</published>
    <updated>2020-02-21T07:51:51.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>没有发布过npm包的同学，可能会对NPM对开发有一种蜜汁敬畏，觉得这是一个很高大上的东西。甚至有次面试，面试官问我有没有发过npm包，当时只用过还没写过，我想应该挺难的，就小声说了没有，然后就让我回去了o(╯□╰)o。</p><p>其实，在现在的我看来，npm包就是一个我们平时经常写的一个export出来的模块而已，只不过跟其它业务代码耦合性低，具有较高的独立性。</p><p>当然，要发布一个npm包，除了写的模块组件外，还需要做一些基础的包装工作。下面我就以最近开发的「DigitalKeyboard 数字键盘 NPM」 为例，一一列出具体步骤：</p><a id="more"></a><p>1、写基础模块代码；</p><p>2、注册npm账号；</p><p>3、配置package.json；</p><p>4、配置webpack；</p><p>5、添加单元测试；</p><p>6、完善README.md；</p><p>7、发布</p><p>1、2、3足可以完成一个npm，4、5、6是为了开发一个高质量的npm。</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>具体代码移步github（<a href="https://github.com/simbawus/DigitalKeyboard），请反手" target="_blank" rel="noopener">https://github.com/simbawus/DigitalKeyboard），请反手</a> 给个 ★ Star ^_~。完整目录结构如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">├── LICENSE</span><br><span class="line">├── README.md</span><br><span class="line">├── build</span><br><span class="line">│   └── Keyboard.js</span><br><span class="line">├── config</span><br><span class="line">│   └── webpack</span><br><span class="line">│       ├── webpack.base.config.js</span><br><span class="line">│       ├── webpack.config.js</span><br><span class="line">│       ├── webpack.dev.config.js</span><br><span class="line">│       └── webpack.prod.config.js</span><br><span class="line">├── index.html</span><br><span class="line">├── package.json</span><br><span class="line">├── src</span><br><span class="line">│   ├── Keyboard.js</span><br><span class="line">│   ├── Keyboard.scss</span><br><span class="line">│   └── main.js</span><br><span class="line">├── <span class="built_in">test</span></span><br><span class="line">│   └── Keyboard.test.js</span><br><span class="line">└── yarn.lock</span><br></pre></td></tr></table></figure><h3 id="基础模块代码"><a href="#基础模块代码" class="headerlink" title="基础模块代码"></a>基础模块代码</h3><p>现在只需要看src目录下的三个文件。其中，main.js 主要是对将要开发模块的引用，只需存在于开发阶段，同时作为此阶段webpack的入口文件，核心代码在Keyboard.js。</p><p>这里，主要用的是ES6的class和export default，Keyboard的核心思想就是点击哪个键就对外输出什么内容，实现也比较简单，大家都能看得懂，这里就不展开讲了，具体可以看github 源码。</p><h3 id="注册npm账号"><a href="#注册npm账号" class="headerlink" title="注册npm账号"></a>注册npm账号</h3><p>这一步也不用说，大家直接去官网注册就好了。</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>配置package.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"digital-keyboard"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"build/Keyboard.js"</span>,</span><br><span class="line">  <span class="attr">"repository"</span>: <span class="string">"https://github.com/simbawus/DigitalKeyboard.git"</span>,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"simbawu &lt;connect@simbawu.com&gt;"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"DigitalKeyboard Component"</span>,</span><br><span class="line">  <span class="attr">"keywords"</span>: [</span><br><span class="line">    <span class="string">"DigitalKeyboard"</span>,</span><br><span class="line">    <span class="string">"Digital"</span>,</span><br><span class="line">    <span class="string">"Keyboard"</span>,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时的配置文件也比较简单，只需配置npm包名，准备用的名字现在npm搜索一下，已经存在的就不能用了；版本号version，每次发布版本号都需要更新，不然发布不成功；对外<code>export</code>的文件路径，这里我用的是webpack打包后的文件，如果不用webpack，直接引用src/Keyboard.js也可以，只不过要做模块化方式兼容，这个后面说。也可以放上项目所在github地址及作者名，description和keywords比较利于SEO，不过这些都不是必需项。</p><p>到这里，一个npm包就开发完成了，直接发布即可使用。但是，略显粗糙：代码压缩、单元测试、readme都没写，别人不知道怎么用也不敢用。下面一步步完善。</p><p>配置webpack</p><p>这里用的是最新版的webpack4，官方提供production和development两种开发模式，并分别做了默认压缩处理，非常适合这里。有两点要特别说明下：</p><ul><li><p><strong>libraryTarget: ‘umd’</strong></p><p>  umd有的同学可能不是太熟悉，但是cmd、amd大家应该都知道，分别应用于服务端和浏览器端的模块方案。umd就是前面提到的模块化方式兼容。感兴趣可以参考我的另一篇文章JavaScript Module 设计解析及总结。</p></li><li><p><strong>production和development的entry不一样：</strong></p><p>  development的entry是main.js，而production的entry是Keyboard.js。前面说过，开发阶段需要有对模块的引用，但是正式发布就不需要了，所以要分别配置。</p></li></ul><p>其他就不展开讲了，我的webpack配置结构很清晰，欢迎大家直接copy。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">├── webpack.base.config.js</span><br><span class="line">├── webpack.config.js</span><br><span class="line">├── webpack.dev.config.js</span><br><span class="line">└── webpack.prod.config.js</span><br></pre></td></tr></table></figure><h3 id="添加单元测试"><a href="#添加单元测试" class="headerlink" title="添加单元测试"></a>添加单元测试</h3><p>大家经常看到很多不错的项目都有<img src="https://tva1.sinaimg.cn/large/0082zybply1gc41ykp6mwj304o00uq2u.jpg" alt="图片替换文本" width="87" style="margin:0;display:inline-block !important;"/>，这就像一个证明可用性的证书，给人安全感和信任感，所以添加单元测试，还是很有必要的，同时也可以提高代码质量。先介绍需要用到的几个概念：</p><ul><li><p>mocha：测试框架；</p></li><li><p>chai：断言库，断言通俗来讲就是判断代码结果对不对；</p></li><li><p>jsdom：node端是没有js dom对象的，比如window、document等等，所以需要这个库提供；</p></li><li><p>istanbul：代码覆盖率计算工具；</p></li><li><p>coveralls：统计上面的代码测试覆盖率工具；</p></li><li><p>travis-ci：自动集成，比如master代码push到github上之后，travis-ci就会自动进行自动化测试。</p></li></ul><p>这里介绍下jsdom的用法，当时按照几个文档来都跑不通：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;JSDOM&#125; = <span class="built_in">require</span>(<span class="string">'jsdom'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;<span class="built_in">window</span>&#125; = <span class="keyword">new</span> JSDOM(<span class="string">`&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">  &lt;html&gt;</span></span><br><span class="line"><span class="string">  &lt;head&gt;</span></span><br><span class="line"><span class="string">      &lt;meta charset="UTF-8"&gt;</span></span><br><span class="line"><span class="string">      &lt;meta name="viewport" content="width=device-width,initial-scale=1.0,minimum-scale=1.0, maximum-scale=1.0,user-scalable=no"&gt;</span></span><br><span class="line"><span class="string">      &lt;meta name="author" content="吴胜斌,simbawu"&gt;</span></span><br><span class="line"><span class="string">      &lt;title&gt;数字键盘&lt;/title&gt;</span></span><br><span class="line"><span class="string">  &lt;/head&gt;</span></span><br><span class="line"><span class="string">  &lt;body&gt;</span></span><br><span class="line"><span class="string">  &lt;div id="values"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;div id="app"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;/body&gt;</span></span><br><span class="line"><span class="string">  &lt;/html&gt;`</span>);</span><br><span class="line"></span><br><span class="line">propagateToGlobal(<span class="built_in">window</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">propagateToGlobal</span>(<span class="params">window</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">window</span>.hasOwnProperty(key)) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">if</span> (key <span class="keyword">in</span> global) <span class="keyword">continue</span>;</span><br><span class="line">    global[key] = <span class="built_in">window</span>[key];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先引入jsdom，然后构造一个document，并引入其中的window对象然后一一赋值给node的global对象。其实也很简单，只不过第一次接触，而且找的文档写的也不清楚，所以花了点时间。其他几个文档都还不错，可以看看文档再看看我是怎么用的。此时的package.json就很很丰富了，可以执行yarn test和yarn cover看看测试是否通过及测试覆盖率。</p><h3 id="完善README-md"><a href="#完善README-md" class="headerlink" title="完善README.md"></a>完善README.md</h3><p>一个好的readme是决定用户用不用你项目的关键因素，所以要多花点心思，千万不能忽略。</p><ul><li><p>标题：直观的描述这个项目是干什么的。</p></li><li><p>徽章：<br>  分别表示是否构建成功、代码测试覆盖率、npm版本号、下载量、开源证书，看起来逼格满满有木有。推荐去shields io 添加，生成一次，之后会自动更新，不过需要等npm发布后才能搜到。<br>   <img src="https://tva1.sinaimg.cn/large/0082zybply1gc41yzgw8vj305m06kaac.jpg" alt=""></p></li></ul><ul><li><p>配图：要让用户直观的看到这个组件长什么样，是否满足他的需求。</p></li><li><p>API介绍：不能让用户猜。</p></li><li><p>使用示例：尽量降低使用门槛。</p></li></ul><h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#先登录NPM账号：</span></span><br><span class="line">npm login</span><br><span class="line"></span><br><span class="line"><span class="comment">#会依次让你输入用户名、密码、和邮箱</span></span><br><span class="line">Username: simbawu        </span><br><span class="line">Password:</span><br><span class="line">Email: (this IS public) wsbin610@163.com</span><br><span class="line"></span><br><span class="line"><span class="comment">#登录成功会出现以下提示信息：</span></span><br><span class="line">Logged <span class="keyword">in</span> as simbawu on https://registry.npmjs.org/.</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行发布命令：</span></span><br><span class="line">npm publish</span><br><span class="line"></span><br><span class="line"><span class="comment">#发布成功后会出现以下提示信息：</span></span><br><span class="line">+ digital-keyboard@1.0.0</span><br><span class="line"><span class="comment">#这里digital-keyboard是我的NPM包名，1.0.0是包的版本号</span></span><br></pre></td></tr></table></figure><p>接下来，我们可以在npm官网，通过搜索包名或者在个人中心看到刚刚发布的包。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;没有发布过npm包的同学，可能会对NPM对开发有一种蜜汁敬畏，觉得这是一个很高大上的东西。甚至有次面试，面试官问我有没有发过npm包，当时只用过还没写过，我想应该挺难的，就小声说了没有，然后就让我回去了o(╯□╰)o。&lt;/p&gt;
&lt;p&gt;其实，在现在的我看来，npm包就是一个我们平时经常写的一个export出来的模块而已，只不过跟其它业务代码耦合性低，具有较高的独立性。&lt;/p&gt;
&lt;p&gt;当然，要发布一个npm包，除了写的模块组件外，还需要做一些基础的包装工作。下面我就以最近开发的「DigitalKeyboard 数字键盘 NPM」 为例，一一列出具体步骤：&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端进阶" scheme="http://www.barebear.cn/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="前端" scheme="http://www.barebear.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="npm" scheme="http://www.barebear.cn/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>组件化</title>
    <link href="http://www.barebear.cn/web-advance/component/"/>
    <id>http://www.barebear.cn/web-advance/component/</id>
    <published>2020-02-20T13:41:56.000Z</published>
    <updated>2020-02-20T14:03:31.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前端组件化是这几年老生常谈的话题，笔者就不在这里对前端组件化思想的发展史、优劣做详细的介绍。在开发中我们经常会遇到，从初期的小项目，到后期的项目功能迭代，功能模块越来越多，项目越来越大。组件化规范制定不够完善，多人团队协作开发组件耦合度高、复用性低、代码冗余严重，导致项目维护成本越来越高。在此写下笔者自己处理上述问题的思考。</p></blockquote><a id="more"></a><h2 id="发现、提出问题"><a href="#发现、提出问题" class="headerlink" title="发现、提出问题"></a>发现、提出问题</h2><p>第 1 版：组件单向数据流，父组件状态单向传向子组件。<br><img src="https://tva1.sinaimg.cn/large/0082zybply1gc3773ehg4g30fa08ctdo.gif" alt=""></p><p>第 2 版：随着功能迭代，非父子组件会共享一些状态。此处由于非父子组件间状态共享不复杂，优先使用状态提升（状态提升，我们需要把子组件间共享的状态，提升到容器组件进行管理，并由容器组件下发到子组件）解决此类问题</p><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc377b59rhg30fa091won.gif" alt=""></p><p>第 3 版：随着更多的功能迭代，模块分层越来越多，跨多层组件状态共享越来越复杂。</p><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc377ihfgtg30fa0d71ky.gif" alt=""><br>第 4 版：状态管理 redux、vuex 就是为了解决此类问题而出现。<br><img src="https://tva1.sinaimg.cn/large/0082zybply1gc377px80dg30hs0c21kz.gif" alt=""></p><p>通过以上的项目模块迭代周期的发现，不可避免的会出现多组件状态共享的情况。通常处理共享状态有三种方式：</p><ul><li>状态提升，我们需要把子组件间共享的状态，提升到容器组件进行管理，并由容器组件下发到子组件。</li><li>状态管理 redux、vuex。</li><li>事件机制，子组件改变共享的状态，通过事件管理模块 emit 分发出去，需要同步更改状态的子组件通过 on 接收更改事件。</li></ul><p>上述的三种方式会存在哪些问题？</p><ul><li>组件哪些状态需要提取到状态管理？</li><li>如何避免滥用全局状态导致项目混乱？</li><li>容器组件、展示组件如何划分？</li><li>多人协作开发组件规范、风格不统一，组件间共享状态双向修改规则不统一，新人加入学习成本高。</li></ul><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>笔者认为解决问题的方法，就是制定相应规范，保证团队代码规范风格统一。</p><ul><li>容器组件与展示组件开发规范。</li><li>哪些组件状态应该提取到状态管理，状态管理开发规范。</li></ul><p>请看下图：<br><img src="https://tva1.sinaimg.cn/large/0082zybply1gc37asmd3bj30u00eodh4.jpg" alt=""></p><p><code>容器型组件</code>：主要是获取、更新、提交、删除内含展示组件状态数据，不包含任何 DOM 更新。</p><p><code>展示型组件</code>：展示型组件主要表现为组件是怎样渲染的，包含了 Virtual DOM 的修改或组合，也包含组件的样式，同时不依赖任何形式的 store。一般可以写成无状态函数，但实际上由于很多展示型组件里依然存在生命周期方法，所以不一定都是无状态的组件。</p><p>说明：</p><ul><li><p>项目初期版本，只有一个容器组件 A，容器 A 包含三个展示组件 A1、A2、A3，所有共享状态都有容器A管理。</p></li><li><p>随着项目迭代，容器组件 A 会分裂出两个新模块容器组件 B、C。</p></li><li><p>容器组件 B、C 分别包含展示组件 B1、B2，C1、C2，且 B、C 之间存在共享状态。</p></li><li><p>容器组件间共享状态数据，统一由状态管理 store 管理。<br>规范：</p></li><li><p>展示组件必须在容器组件中使用，除了独有的状态，其他共享状态统一由容器组件管理。</p></li><li><p>展示组件涉及修改共享状态的操作，例如点击事件，需要把点击事件通过无状态回调函数抛到容器组件，由容器组件统一做状态获取、更新、提交、删除等等操作。</p></li><li><p>父子容器组件共享状态，子容器只能读取父容器组件共享状态，不能进行修改（例如子容器只能通过无状态回调函数抛到父容器），保证单向数据流。</p></li><li><p>子容器修改父容器或者修改非父子容器共享状态唯一途径，通过状态管理 store 统一修改。</p></li><li><p>由于容器间共享状态不能双向修改，所以状态管理 store 会保存大量的共享状态数据，需要通过系统模块、容器组件名分层注册需要状态共享的容器组件 state。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前端组件化是这几年老生常谈的话题，笔者就不在这里对前端组件化思想的发展史、优劣做详细的介绍。在开发中我们经常会遇到，从初期的小项目，到后期的项目功能迭代，功能模块越来越多，项目越来越大。组件化规范制定不够完善，多人团队协作开发组件耦合度高、复用性低、代码冗余严重，导致项目维护成本越来越高。在此写下笔者自己处理上述问题的思考。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="前端进阶" scheme="http://www.barebear.cn/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="前端" scheme="http://www.barebear.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>git安装</title>
    <link href="http://www.barebear.cn/git/install/"/>
    <id>http://www.barebear.cn/git/install/</id>
    <published>2020-02-20T12:42:56.000Z</published>
    <updated>2020-02-20T13:20:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MAC"><a href="#MAC" class="headerlink" title="MAC"></a>MAC</h2><p>MAC可以使用第三方包管理器 HomeBrew</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure><p>开始安装git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install git</span><br></pre></td></tr></table></figure><p>Linux 可以用自带的yum</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install git</span><br></pre></td></tr></table></figure><p>window<br><a href="https://git-scm.com/" target="_blank" rel="noopener">下载地址</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MAC&quot;&gt;&lt;a href=&quot;#MAC&quot; class=&quot;headerlink&quot; title=&quot;MAC&quot;&gt;&lt;/a&gt;MAC&lt;/h2&gt;&lt;p&gt;MAC可以使用第三方包管理器 HomeBrew&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;
      
    
    </summary>
    
    
      <category term="周边" scheme="http://www.barebear.cn/categories/%E5%91%A8%E8%BE%B9/"/>
    
    
      <category term="git" scheme="http://www.barebear.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>前端开发规范</title>
    <link href="http://www.barebear.cn/web-advance/standard/"/>
    <id>http://www.barebear.cn/web-advance/standard/</id>
    <published>2020-02-20T12:41:56.000Z</published>
    <updated>2020-02-20T13:25:19.000Z</updated>
    
    <content type="html"><![CDATA[<p class="warning">  <b>敲黑板</b>：文档中命令行未备注则默认是linux系统</p><a id="more"></a><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h4 id="安装NodeJs"><a href="#安装NodeJs" class="headerlink" title="安装NodeJs"></a>安装NodeJs</h4><p class="tip">  建议 Node.js 版本在 8.0.0 以上</p><p>参考：<a href="/node/install">Node安装</a></p><h4 id="安装GIT"><a href="#安装GIT" class="headerlink" title="安装GIT"></a>安装GIT</h4><p>参考：<a href="/git/install">git安装</a></p><p>项目根目录下配置<code>.gitignore</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">*.log</span><br><span class="line">tmp&#x2F;</span><br><span class="line">node_modules&#x2F;</span><br><span class="line">dist&#x2F;</span><br><span class="line">npm-debug.log*</span><br><span class="line">yarn-debug.log*</span><br><span class="line">yarn-error.log*</span><br><span class="line">package-lock.json</span><br><span class="line">yarn.lock</span><br><span class="line"></span><br><span class="line"># Editor directories and files</span><br><span class="line">.idea</span><br><span class="line">.vscode</span><br><span class="line">*.suo</span><br><span class="line">*.ntvs*</span><br><span class="line">*.njsproj</span><br><span class="line">*.sln</span><br></pre></td></tr></table></figure><h4 id="配置NPM"><a href="#配置NPM" class="headerlink" title="配置NPM"></a>配置NPM</h4><p>npm最容易产生的就是网络问题,我们可以在每次npm下载的时候指定registry，比如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p><a href="https://npm.taobao.org/" target="_blank" rel="noopener">淘宝npm</a></p><h4 id="推荐IDE"><a href="#推荐IDE" class="headerlink" title="推荐IDE"></a>推荐IDE</h4><h5 id="Visual-Studio（开源免费）"><a href="#Visual-Studio（开源免费）" class="headerlink" title="Visual Studio（开源免费）"></a>Visual Studio（开源免费）</h5><p><a href="https://code.visualstudio.com/Download" target="_blank" rel="noopener">下载地址</a></p><p>统一编辑器格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># http:&#x2F;&#x2F;editorconfig.org</span><br><span class="line">root &#x3D; true</span><br><span class="line"></span><br><span class="line">[*]</span><br><span class="line">charset &#x3D; utf-8</span><br><span class="line">indent_style &#x3D; space</span><br><span class="line">indent_size &#x3D; 4</span><br><span class="line">end_of_line &#x3D; lf</span><br><span class="line">insert_final_newline &#x3D; true</span><br><span class="line">trim_trailing_whitespace &#x3D; true</span><br><span class="line"></span><br><span class="line">[*.md]</span><br><span class="line">insert_final_newline &#x3D; false</span><br><span class="line">trim_trailing_whitespace &#x3D; false</span><br></pre></td></tr></table></figure><blockquote><p>项目根目录下新增文件<code>.editorconfig</code></p></blockquote><h2 id="开发规范"><a href="#开发规范" class="headerlink" title="开发规范"></a>开发规范</h2><h4 id="基本规范"><a href="#基本规范" class="headerlink" title="基本规范"></a>基本规范</h4><ul><li>所有文件的编码格式统一为<code>UTF-8</code></li><li>换行格式为<code>LF</code></li><li><code>tag</code>转为<code>space</code>，默认间隔4个空格</li></ul><h4 id="GIT"><a href="#GIT" class="headerlink" title="GIT"></a>GIT</h4><h6 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h6><ul><li>分支功能命名使用snake case命名法，即下划线命名</li><li>分支类型包括：feature、bugfix、refactor三种类型，即新功能开发、bug修复和代码重构</li><li>分支版本命名规则：比如：ops_v_1_1_0_feature_oeprator</li><li>Tag包括3位版本，前缀使用v。比如v1.2.31。核心基础库或者大版本发布使用第一位,新功能开发使用第2位版本号，bug修复使用第3位版本号</li></ul><h6 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h6><p>每次提交，Commit message 都包括三个部分：header，body 和 footer。<br>其中，header 是必需的，body 和 footer可以省略。不管是哪一个部分，任何一行都不得超过72个字符（或100个字符）。这是为了避免自动换行影响美观。</p><blockquote><p>Header部分只有一行，包括三个字段：type（必需）、scope（可选）和subject（必需）。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class="line">&lt;BLANK LINE&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;BLANK LINE&gt;</span><br><span class="line">&lt;footer&gt;</span><br></pre></td></tr></table></figure><p>type代表某次提交的类型，比如是修复一个bug还是增加一个新的feature。所有的type类型如下</p><ul><li>feat： 新增feature</li><li>fix: 修复bug</li><li>docs: 仅仅修改了文档，比如README, CHANGELOG, CONTRIBUTE等等</li><li>style: 仅仅修改了空格、格式缩进、都好等等，不改变代码逻辑</li><li>refactor: 代码重构，没有加新功能或者修复bug</li><li>perf: 优化相关，比如提升性能、体验</li><li>test: 测试用例，包括单元测试、集成测试等</li><li>chore: 改变构建流程、或者增加依赖库、工具等</li><li>revert: 回滚到上一个版本</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 标题行：50个字符以内，描述主要变更内容</span><br><span class="line">#</span><br><span class="line"># 主体内容：更详细的说明文本，建议72个字符以内。 需要描述的信息包括:</span><br><span class="line">#</span><br><span class="line"># * 为什么这个变更是必须的? 它可能是用来修复一个bug，增加一个feature，提升性能、可靠性、稳定性等等</span><br><span class="line"># * 他如何解决这个问题? 具体描述解决问题的步骤</span><br><span class="line"># * 是否存在副作用、风险? </span><br><span class="line">#</span><br><span class="line"># 尾部：如果需要的化可以添加一个链接到issue地址或者其它文档，或者关闭某个issue。</span><br></pre></td></tr></table></figure><blockquote><p>参考<a href="https://github.com/commitizen/cz-cli" target="_blank" rel="noopener">Commitizen</a>来添加提交消息格式。</p></blockquote><h6 id="生成-Change-log"><a href="#生成-Change-log" class="headerlink" title="生成 Change log"></a>生成 Change log</h6><p>如果你的所有 Commit 都符合 Angular 格式，那么发布新版本时， Change log 就可以用脚本自动生成。生成的文档包括以下三个部分：</p><ul><li>New features</li><li>Bug fixes</li><li>Breaking changes</li></ul><p>每个部分都会罗列相关的 commit ，并且有指向这些 commit 的链接。当然，生成的文档允许手动修改，所以发布前，你还可以添加其他内容。</p><p><a href="https://github.com/conventional-changelog/conventional-changelog" target="_blank" rel="noopener">conventional-changelog</a> 就是生成 Change log 的工具，运行下面的命令即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g conventional-changelog-cli</span><br><span class="line">$ <span class="built_in">cd</span> my-project</span><br><span class="line">$ conventional-changelog -p angular -i CHANGELOG.md -w</span><br></pre></td></tr></table></figure><h4 id="JAVASCRIPT"><a href="#JAVASCRIPT" class="headerlink" title="JAVASCRIPT"></a>JAVASCRIPT</h4><p>遵循eslint规范</p><blockquote><p>项目根目录新增<code>.eslintrc.js</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  root: <span class="literal">true</span>,</span><br><span class="line">  parser: <span class="string">'babel-eslint'</span>,</span><br><span class="line">  parserOptions: &#123;</span><br><span class="line">    sourceType: <span class="string">'module'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  env: &#123;</span><br><span class="line">    browser: <span class="literal">true</span>,</span><br><span class="line">    node: <span class="literal">true</span>,</span><br><span class="line">    es6: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  extends: <span class="string">'eslint:recommended'</span>,</span><br><span class="line">  <span class="comment">// required to lint *.vue files</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="string">'html'</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// check if imports actually resolve</span></span><br><span class="line">  <span class="string">'settings'</span>: &#123;</span><br><span class="line">    <span class="string">'import/resolver'</span>: &#123;</span><br><span class="line">      <span class="string">'webpack'</span>: &#123;</span><br><span class="line">        <span class="string">'config'</span>: <span class="string">'build/webpack.base.conf.js'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// add your custom rules here</span></span><br><span class="line">  <span class="comment">//it is base on https://github.com/vuejs/eslint-config-vue</span></span><br><span class="line">  rules: &#123;</span><br><span class="line">    <span class="string">'accessor-pairs'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'arrow-spacing'</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">      <span class="string">'before'</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">'after'</span>: <span class="literal">true</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">'block-spacing'</span>: [<span class="number">2</span>, <span class="string">'always'</span>],</span><br><span class="line">    <span class="string">'brace-style'</span>: [<span class="number">2</span>, <span class="string">'1tbs'</span>, &#123;</span><br><span class="line">      <span class="string">'allowSingleLine'</span>: <span class="literal">true</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">'camelcase'</span>: [<span class="number">0</span>, &#123;</span><br><span class="line">      <span class="string">'properties'</span>: <span class="string">'always'</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">'comma-dangle'</span>: [<span class="number">2</span>, <span class="string">'never'</span>],</span><br><span class="line">    <span class="string">'comma-spacing'</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">      <span class="string">'before'</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">'after'</span>: <span class="literal">true</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">'comma-style'</span>: [<span class="number">2</span>, <span class="string">'last'</span>],</span><br><span class="line">    <span class="string">'constructor-super'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'curly'</span>: [<span class="number">2</span>, <span class="string">'multi-line'</span>],</span><br><span class="line">    <span class="string">'dot-location'</span>: [<span class="number">2</span>, <span class="string">'property'</span>],</span><br><span class="line">    <span class="string">'eol-last'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'eqeqeq'</span>: [<span class="number">2</span>, <span class="string">'allow-null'</span>],</span><br><span class="line">    <span class="string">'generator-star-spacing'</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">      <span class="string">'before'</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">'after'</span>: <span class="literal">true</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">'handle-callback-err'</span>: [<span class="number">2</span>, <span class="string">'^(err|error)$'</span>],</span><br><span class="line">    <span class="string">'indent'</span>: [<span class="number">2</span>, <span class="number">4</span>, &#123;</span><br><span class="line">      <span class="string">'SwitchCase'</span>: <span class="number">1</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">'jsx-quotes'</span>: [<span class="number">2</span>, <span class="string">'prefer-single'</span>],</span><br><span class="line">    <span class="string">'key-spacing'</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">      <span class="string">'beforeColon'</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">'afterColon'</span>: <span class="literal">true</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">'keyword-spacing'</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">      <span class="string">'before'</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">'after'</span>: <span class="literal">true</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">'new-cap'</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">      <span class="string">'newIsCap'</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">'capIsNew'</span>: <span class="literal">false</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">'new-parens'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-array-constructor'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-caller'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-console'</span>: <span class="string">'off'</span>,</span><br><span class="line">    <span class="string">'no-class-assign'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-cond-assign'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-const-assign'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-control-regex'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-delete-var'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-dupe-args'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-dupe-class-members'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-dupe-keys'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-duplicate-case'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-empty-character-class'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-empty-pattern'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-eval'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-ex-assign'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-extend-native'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-extra-bind'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-extra-boolean-cast'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-extra-parens'</span>: [<span class="number">2</span>, <span class="string">'functions'</span>],</span><br><span class="line">    <span class="string">'no-fallthrough'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-floating-decimal'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-func-assign'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-implied-eval'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-inner-declarations'</span>: [<span class="number">2</span>, <span class="string">'functions'</span>],</span><br><span class="line">    <span class="string">'no-invalid-regexp'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-irregular-whitespace'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-iterator'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-label-var'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-labels'</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">      <span class="string">'allowLoop'</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">'allowSwitch'</span>: <span class="literal">false</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">'no-lone-blocks'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-mixed-spaces-and-tabs'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-multi-spaces'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-multi-str'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-multiple-empty-lines'</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">      <span class="string">'max'</span>: <span class="number">1</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">'no-native-reassign'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-negated-in-lhs'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-new-object'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-new-require'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-new-symbol'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-new-wrappers'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-obj-calls'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-octal'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-octal-escape'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-path-concat'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-proto'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-redeclare'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'no-regex-spaces'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-return-assign'</span>: [<span class="number">2</span>, <span class="string">'except-parens'</span>],</span><br><span class="line">    <span class="string">'no-self-assign'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-self-compare'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-sequences'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-shadow-restricted-names'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-spaced-func'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-sparse-arrays'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-this-before-super'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-throw-literal'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-trailing-spaces'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-undef'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-undef-init'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-unexpected-multiline'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-unmodified-loop-condition'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-unneeded-ternary'</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">      <span class="string">'defaultAssignment'</span>: <span class="literal">false</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">'no-unreachable'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-unsafe-finally'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-unused-vars'</span>: [<span class="number">1</span>, &#123;</span><br><span class="line">      <span class="string">'vars'</span>: <span class="string">'all'</span>,</span><br><span class="line">      <span class="string">'args'</span>: <span class="string">'none'</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">'no-useless-call'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-useless-computed-key'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-useless-constructor'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-useless-escape'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">'no-whitespace-before-property'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-with'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'one-var'</span>: [<span class="number">1</span>, &#123;</span><br><span class="line">      <span class="string">'initialized'</span>: <span class="string">'never'</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">'operator-linebreak'</span>: [<span class="number">2</span>, <span class="string">'after'</span>, &#123;</span><br><span class="line">      <span class="string">'overrides'</span>: &#123;</span><br><span class="line">        <span class="string">'?'</span>: <span class="string">'before'</span>,</span><br><span class="line">        <span class="string">':'</span>: <span class="string">'before'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">'padded-blocks'</span>: [<span class="number">2</span>, <span class="string">'never'</span>],</span><br><span class="line">    <span class="string">'quotes'</span>: [<span class="number">2</span>, <span class="string">'single'</span>, &#123;</span><br><span class="line">      <span class="string">'avoidEscape'</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">'allowTemplateLiterals'</span>: <span class="literal">true</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">'semi'</span>: [<span class="number">1</span>, <span class="string">'always'</span>],</span><br><span class="line">    <span class="string">'semi-spacing'</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">      <span class="string">'before'</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">'after'</span>: <span class="literal">true</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">'space-before-blocks'</span>: [<span class="number">2</span>, <span class="string">'always'</span>],</span><br><span class="line">    <span class="string">'space-before-function-paren'</span>: [<span class="number">2</span>, <span class="string">'never'</span>],</span><br><span class="line">    <span class="string">'space-in-parens'</span>: [<span class="number">2</span>, <span class="string">'never'</span>],</span><br><span class="line">    <span class="string">'space-infix-ops'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'space-unary-ops'</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">      <span class="string">'words'</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">'nonwords'</span>: <span class="literal">false</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">'spaced-comment'</span>: [<span class="number">1</span>, <span class="string">'always'</span>, &#123;</span><br><span class="line">      <span class="string">'markers'</span>: [<span class="string">'global'</span>, <span class="string">'globals'</span>, <span class="string">'eslint'</span>, <span class="string">'eslint-disable'</span>, <span class="string">'*package'</span>, <span class="string">'!'</span>, <span class="string">','</span>]</span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">'template-curly-spacing'</span>: [<span class="number">2</span>, <span class="string">'never'</span>],</span><br><span class="line">    <span class="string">'use-isnan'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'valid-typeof'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'wrap-iife'</span>: [<span class="number">2</span>, <span class="string">'any'</span>],</span><br><span class="line">    <span class="string">'yield-star-spacing'</span>: [<span class="number">2</span>, <span class="string">'both'</span>],</span><br><span class="line">    <span class="string">'yoda'</span>: [<span class="number">2</span>, <span class="string">'never'</span>],</span><br><span class="line">    <span class="string">'prefer-const'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'no-debugger'</span>: process.env.NODE_ENV === <span class="string">'production'</span> ? <span class="number">2</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="string">'object-curly-spacing'</span>: [<span class="number">1</span>, <span class="string">'always'</span>, &#123;</span><br><span class="line">      objectsInObjects: <span class="literal">false</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">'array-bracket-spacing'</span>: [<span class="number">2</span>, <span class="string">'never'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>项目根目录新增<code>.eslintignore</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dist</span><br></pre></td></tr></table></figure><h4 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h4><h6 id="尽量使用类选择器，放弃ID选择器"><a href="#尽量使用类选择器，放弃ID选择器" class="headerlink" title="尽量使用类选择器，放弃ID选择器"></a>尽量使用类选择器，放弃ID选择器</h6><p>ID在一个页面中的唯一性导致了如果以ID为选择器来写CSS，就无法重用。</p><h6 id="分类的命名方法：使用单个字母-”-“为前缀"><a href="#分类的命名方法：使用单个字母-”-“为前缀" class="headerlink" title="分类的命名方法：使用单个字母+”-“为前缀"></a>分类的命名方法：使用单个字母+”-“为前缀</h6><p>布局（grid）（.g-）；模块（module）（.m-）；元件（unit）（.u-）；功能（function）（.f-）；皮肤（skin）（.s-）；状态（.z-）。</p><blockquote><p>注：在你样式中的选择器总是要以上面前五类开头，然后在里面使用后代选择器。</p></blockquote><p>　　如果这五类不能满足你的需求，你可以另外定义一个或多个大类，但必须符合单个字母+”-“为前缀的命名规则，即 .x- 的格式。</p><h6 id="后代选择器命名"><a href="#后代选择器命名" class="headerlink" title="后代选择器命名"></a>后代选择器命名</h6><ul><li>约定不以单个字母+”-“为前缀且长度大于等于2的类选择器为后代选择器，如：.item为m-list模块里的每一个项，.text为m-list模块里的文本部分：.m-list .item{}  .m-list .text{}。</li><li>一个语义化的标签也可以是后代选择器，比如：.m-list li{}。</li><li>不允许单个字母的类选择器出现，原因详见下面的“模块和元件的后代选择器的扩展类”。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 这里的.itm和.cnt只在.m-list中有效 */</span></span><br><span class="line"><span class="selector-class">.m-list</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-class">.m-list</span> <span class="selector-class">.itm</span>&#123;<span class="attribute">margin</span>:<span class="number">1px</span>;<span class="attribute">padding</span>:<span class="number">1px</span>;&#125;</span><br><span class="line"><span class="selector-class">.m-list</span> <span class="selector-class">.cnt</span>&#123;<span class="attribute">margin-left</span>:<span class="number">100px</span>;&#125;</span><br><span class="line"><span class="comment">/* 这里的.cnt和.num只在.m-page中有效 */</span></span><br><span class="line"><span class="selector-class">.m-page</span>&#123;<span class="attribute">height</span>:<span class="number">20px</span>;&#125;</span><br><span class="line"><span class="selector-class">.m-page</span> <span class="selector-class">.cnt</span>&#123;<span class="attribute">text-align</span>:center;&#125;</span><br><span class="line"><span class="selector-class">.m-page</span> <span class="selector-class">.num</span>&#123;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ddd</span>;&#125;</span><br></pre></td></tr></table></figure><h6 id="命名应简约而不失语义"><a href="#命名应简约而不失语义" class="headerlink" title="命名应简约而不失语义"></a>命名应简约而不失语义</h6><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 反对：表现化的或没有语义的命名 */</span></span><br><span class="line"><span class="selector-class">.m-abc</span> <span class="selector-class">.green2</span>&#123;&#125;</span><br><span class="line"><span class="selector-class">.g-left2</span>&#123;&#125;</span><br><span class="line"><span class="comment">/* 推荐：使用有语义的简短的命名 */</span></span><br><span class="line"><span class="selector-class">.m-list</span> <span class="selector-class">.wrap2</span>&#123;&#125;</span><br><span class="line"><span class="selector-class">.g-side2</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h6 id="相同语义的不同类命名"><a href="#相同语义的不同类命名" class="headerlink" title="相同语义的不同类命名"></a>相同语义的不同类命名</h6><p>方法：直接加数字或字母区分即可（如：.m-list2、.m-list3、.m-list-news、.m-list-banner等，都是列表模块，但是是完全不一样的模块）。</p><p>其他举例：.f-fw0、.f-fw1、.s-fc0、.s-fc1、.m-logo2、.m-logo3、u-btn、u-btn2等等。</p><h6 id="模块和元件的扩展类的命名方法"><a href="#模块和元件的扩展类的命名方法" class="headerlink" title="模块和元件的扩展类的命名方法"></a>模块和元件的扩展类的命名方法</h6><p>当A、B、C、…它们类型相同且外形相似区别不大，那么就以它们中出现率最高的做成基类，其他做成基类的扩展。</p><p>方法：+“-”+数字或字母（如：.m-list的扩展类为.m-list-1、.m-list-2等）。<br>补充：基类自身可以独立使用（如：class=”m-list”即可），扩展类必须基于基类使用（如：class=”m-list m-list-2”）。</p><h6 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h6><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 这是某个模块 */</span></span><br><span class="line"><span class="selector-class">.m-nav</span>&#123;&#125;<span class="comment">/* 模块容器 */</span></span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-tag">li</span>,<span class="selector-class">.m-nav</span> <span class="selector-tag">a</span>&#123;&#125;<span class="comment">/* 先共性  优化组合 */</span></span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-tag">li</span>&#123;&#125;<span class="comment">/* 后个性  语义化标签选择器 */</span></span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-tag">a</span>&#123;&#125;<span class="comment">/* 后个性中的共性 按结构顺序 */</span></span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-tag">a</span><span class="selector-class">.a1</span>&#123;&#125;<span class="comment">/* 后个性中的个性 */</span></span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-tag">a</span><span class="selector-class">.a2</span>&#123;&#125;<span class="comment">/* 后个性中的个性 */</span></span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-class">.z-crt</span> <span class="selector-tag">a</span>&#123;&#125;<span class="comment">/* 交互状态变化 */</span></span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-class">.z-crt</span> <span class="selector-tag">a</span><span class="selector-class">.a1</span>&#123;&#125;</span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-class">.z-crt</span> <span class="selector-tag">a</span><span class="selector-class">.a2</span>&#123;&#125;</span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-class">.btn</span>&#123;&#125;<span class="comment">/* 典型后代选择器 */</span></span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-class">.btn-1</span>&#123;&#125;<span class="comment">/* 典型后代选择器扩展 */</span></span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-class">.btn-dis</span>&#123;&#125;<span class="comment">/* 典型后代选择器扩展（状态） */</span></span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-class">.btn</span><span class="selector-class">.z-dis</span>&#123;&#125;<span class="comment">/* 作用同上，请二选一（如果可以不兼容IE6时使用） */</span></span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-class">.m-sch</span>&#123;&#125;<span class="comment">/* 控制内部其他模块位置 */</span></span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-class">.u-sel</span>&#123;&#125;<span class="comment">/* 控制内部其他元件位置 */</span></span><br><span class="line"><span class="selector-class">.m-nav-1</span>&#123;&#125;<span class="comment">/* 模块扩展 */</span></span><br><span class="line"><span class="selector-class">.m-nav-1</span> <span class="selector-tag">li</span>&#123;&#125;</span><br><span class="line"><span class="selector-class">.m-nav-dis</span>&#123;&#125;<span class="comment">/* 模块扩展（状态） */</span></span><br><span class="line"><span class="selector-class">.m-nav</span><span class="selector-class">.z-dis</span>&#123;&#125;<span class="comment">/* 作用同上，请二选一（如果可以不兼容IE6时使用） */</span></span><br></pre></td></tr></table></figure><h6 id="统一语义理解和命名"><a href="#统一语义理解和命名" class="headerlink" title="统一语义理解和命名"></a>统一语义理解和命名</h6><p>布局（.g-）</p><table><thead><tr><th>语义</th><th>命名</th></tr></thead><tbody><tr><td>文档</td><td>doc</td></tr><tr><td>头部</td><td>head</td></tr><tr><td>主体</td><td>body</td></tr><tr><td>尾部</td><td>foot</td></tr><tr><td>主栏</td><td>main</td></tr><tr><td>主栏子容器</td><td>mainc</td></tr><tr><td>侧栏</td><td>side</td></tr><tr><td>侧栏主容器</td><td>sidec</td></tr><tr><td>盒容器</td><td>wrap/box</td></tr></tbody></table><p>模块（.m-）、元件（.u-）</p><table><thead><tr><th>语义</th><th>命名</th></tr></thead><tbody><tr><td>导航</td><td>nav</td></tr><tr><td>子导航</td><td>subnav</td></tr><tr><td>面包屑</td><td>crumb</td></tr><tr><td>菜单</td><td>menu</td></tr><tr><td>选项卡</td><td>tag</td></tr><tr><td>标题区</td><td>headline</td></tr><tr><td>内容区</td><td>content</td></tr><tr><td>列表</td><td>list</td></tr><tr><td>表格</td><td>table</td></tr><tr><td>表单</td><td>form</td></tr><tr><td>热点</td><td>hot</td></tr><tr><td>排行</td><td>top</td></tr><tr><td>登录</td><td>login</td></tr><tr><td>标志</td><td>logo</td></tr><tr><td>广告</td><td>advertise</td></tr><tr><td>搜索</td><td>search</td></tr><tr><td>幻灯</td><td>slide</td></tr><tr><td>提示</td><td>tips</td></tr><tr><td>帮助</td><td>help</td></tr><tr><td>新闻</td><td>news</td></tr><tr><td>下载</td><td>download</td></tr><tr><td>注册</td><td>regist</td></tr><tr><td>投票</td><td>vote</td></tr><tr><td>版权</td><td>copyright</td></tr><tr><td>结果</td><td>result</td></tr><tr><td>按钮</td><td>button</td></tr><tr><td>输入</td><td>input</td></tr></tbody></table><h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><ul><li>世界上最好的语言 <code>JavaScript</code></li><li>啥都能做的前端构建工具 <a href="https://webpack.js.org/" target="_blank" rel="noopener">Webpack</a></li><li>简单好用的文档展示工具 <a href="https://v3.docute.org/" target="_blank" rel="noopener">Docute</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;warning&quot;&gt;
  &lt;b&gt;敲黑板&lt;/b&gt;：文档中命令行未备注则默认是linux系统
&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端进阶" scheme="http://www.barebear.cn/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="前端" scheme="http://www.barebear.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>前后端分离、web 与 static 服务器分离</title>
    <link href="http://www.barebear.cn/web-advance/1/"/>
    <id>http://www.barebear.cn/web-advance/1/</id>
    <published>2020-02-20T12:40:56.000Z</published>
    <updated>2020-02-20T12:49:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-为什么需要-“前后端分离、web-与-static-服务器分离”"><a href="#1-为什么需要-“前后端分离、web-与-static-服务器分离”" class="headerlink" title="1. 为什么需要 “前后端分离、web 与 static 服务器分离”"></a>1. 为什么需要 “前后端分离、web 与 static 服务器分离”</h2><p>web 前端的发展历史大致可以分为两个阶段：<code>node</code> 之前与 <code>node</code> 之后。在 <a href="https://github.com/nodejs/node" target="_blank" rel="noopener">nodejs</a> 出现之前，前端的发展一直比较缓慢，主要是因为：</p><a id="more"></a><ul><li><code>html/css/js</code> 从设计之初开始，都只为浏览器服务，并且在整个 web 程序中，是以后端为主，前端为辅，前端需要配合不同的后端做出调整（如不同后端语言的模板），因此前端程序往往是与后端程序耦合在一起的；</li><li>开发、调试、运行都始终摆脱不了浏览器，并且没有多少可选的工具（如 combo，都是由后端语言在服务器端实现的），不能自动化、工程化的构建前端的代码；</li><li>由于浏览器的运行方式，前端代码一直不能有效的做到模块化、组件化，项目也无法版本化管理，项目间也不能很好的共享代码；</li><li>浏览器运行速度低下，也是早期前端发展的一大障碍，但 <a href="https://chromium.googlesource.com/" target="_blank" rel="noopener">chromium</a> 项目的出现，让前端的运行架上了高铁的速度。</li></ul><p>基于以上的原因，前端一直不能很好的开发大型应用，所以在 web 程序中，前端一直处于配角的角色。在 <a href="https://github.com/nodejs/node" target="_blank" rel="noopener">nodejs</a> 出现之后，前端的发展迎来了质的飞跃，带来了我们当时无法想象的便利与潜力。</p><ul><li><code>node</code> 拓展了 <code>javascript</code> 的运行环境，并且能够开发服务器端程序，这让前端的开发和运行摆脱对浏览器和后端语言的依赖，让它们成为了可选项；</li><li><code>node</code> 使 <code>javascript</code> 拥有了操作本地文件、IO 等权限，于是前端开发人员便可编写各类工具，前端便可做到自动化和工程化；</li><li>再结合 <code>npm</code>，前端代码的模块化、组件化，项目版本化，项目间共享代码也就不是问题了。</li></ul><p><a href="https://github.com/nodejs/node" target="_blank" rel="noopener">nodejs</a> 出现了之后，又陆续出现了扩展前端运行领域的工具，如</p><ul><li><a href="https://github.com/electron/electron" target="_blank" rel="noopener">electron</a>, <a href="https://github.com/nwjs/nw.js" target="_blank" rel="noopener">nw.js</a>: 让前端可以开发桌面软件；</li><li><a href="https://github.com/facebook/react-native" target="_blank" rel="noopener">react-native</a>: 让前端可以开发原生 app。</li></ul><p>随着 <code>node</code> 的出现与前端的发展，工程化自动构建便成了开发人员的一个基本需求，这便是我要说的 “前后端分离、web 与 static 服务器分离”；</p><h2 id="2-前后端分离"><a href="#2-前后端分离" class="headerlink" title="2. 前后端分离"></a>2. 前后端分离</h2><p>前后端分离，就是让前端与后端解耦，开发和运行都不再耦合在一起。这样，前端开发人员便可更好的掌控自己的代码，对自己的代码进行调试，优化等等。</p><h3 id="2-1-工程分离"><a href="#2-1-工程分离" class="headerlink" title="2.1 工程分离"></a>2.1 工程分离</h3><p>首先是工程的分离，也就是代码的分离。这就是说让原来前后端融合在一起的项目分离开，前端一个项目，后端一个项目。</p><p>以 python 的 <a href="https://github.com/django/django" target="_blank" rel="noopener">django</a> 框架为例：</p><h4 id="融合在一起的示例："><a href="#融合在一起的示例：" class="headerlink" title="融合在一起的示例："></a>融合在一起的示例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">|-- app&#x2F;                     # 应用主目录</span><br><span class="line">    |-- templates&#x2F;           # html 模板目录</span><br><span class="line">        |-- app&#x2F;</span><br><span class="line">            |-- home.html    # 主页html</span><br><span class="line">            |-- login.html   # 登陆页html</span><br><span class="line">            |-- about.html   # 关于页html</span><br><span class="line">            |-- ...</span><br><span class="line">    |-- static&#x2F;              # 静态资源目录</span><br><span class="line">        |-- js&#x2F;              # js资源目录</span><br><span class="line">            |-- lib&#x2F;         # js library 资源目录</span><br><span class="line">            |-- page1&#x2F;       # 页面1 js资源目录</span><br><span class="line">            |-- page2&#x2F;       # 页面2 js资源目录</span><br><span class="line">            |-- ...</span><br><span class="line">        |-- css&#x2F;             # css资源目录</span><br><span class="line">        |-- images&#x2F;           # 图片资源目录</span><br><span class="line">        |-- ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    |-- admin.py             # 配置模型models在django原生后台的管理</span><br><span class="line">    |-- apps.py              # 应用级别的配置</span><br><span class="line">    |-- forms.py             # 表单处理逻辑</span><br><span class="line">    |-- managers.py          # 模型处理逻辑</span><br><span class="line">    |-- models.py            # 模型定义</span><br><span class="line">    |-- urls.py              # 路由设置</span><br><span class="line">    |-- views.py             # 控制层</span><br><span class="line">    |-- tests.py</span><br></pre></td></tr></table></figure><h4 id="分离之后的-django-项目示例："><a href="#分离之后的-django-项目示例：" class="headerlink" title="分离之后的 django 项目示例："></a>分离之后的 <a href="https://github.com/django/django" target="_blank" rel="noopener">django</a> 项目示例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">|-- app&#x2F;                     # 应用主目录</span><br><span class="line">    |-- admin.py             # 配置模型models在django原生后台的管理</span><br><span class="line">    |-- apps.py              # 应用级别的配置</span><br><span class="line">    |-- forms.py             # 表单处理逻辑</span><br><span class="line">    |-- managers.py          # 模型处理逻辑</span><br><span class="line">    |-- models.py            # 模型定义</span><br><span class="line">    |-- urls.py              # 路由设置</span><br><span class="line">    |-- views.py             # 控制层</span><br><span class="line">    |-- tests.py</span><br></pre></td></tr></table></figure><h4 id="分离之后的-web-项目示例（以-lila-构建工具为例）："><a href="#分离之后的-web-项目示例（以-lila-构建工具为例）：" class="headerlink" title="分离之后的 web 项目示例（以 lila 构建工具为例）："></a>分离之后的 web 项目示例（以 <a href="https://github.com/senntyou/lila" target="_blank" rel="noopener">lila</a> 构建工具为例）：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">|-- src&#x2F;</span><br><span class="line">    |-- app&#x2F;</span><br><span class="line">        |-- home&#x2F;            # 主页工作目录</span><br><span class="line">            |-- index.html   # html 入口文件</span><br><span class="line">            |-- index.js     # js 入口文件</span><br><span class="line">            |-- ...</span><br><span class="line">        |-- login&#x2F;           # 登陆页工作目录</span><br><span class="line">        |-- about&#x2F;           # 关于页工作目录</span><br><span class="line">        |-- ...</span><br></pre></td></tr></table></figure><p>本地开发完成后，把构建好的文件传到服务器相应的位置就好了，像上面的例子就需要把 <code>html</code> 文件传到 <code>app/templates</code> 目录下，静态资源文件传到 <code>app/static</code> 目录下。（构建的时候要处理好文件路径引用）</p><h3 id="2-2-数据流分离"><a href="#2-2-数据流分离" class="headerlink" title="2.2 数据流分离"></a>2.2 数据流分离</h3><ul><li>前后端数据交流使用 <code>json</code> 数据格式，并且推荐使用全 <code>ajax</code> 的方式获取数据，不用传统的模板交流或渲染数据，如 <code>java &gt; jsp</code>、<code>php &gt; smarty</code>；</li><li>但有时候为了加快前端响应速度，也可以把 <code>json</code> 数据通过模板返回，但要避免使用后端模板进行逻辑判断渲染。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">var data &#x3D; JSON.parse(&#39;通过后端模板返回的 json 数据&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 使用 js 渲染 data 数据</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-web-与-static-服务器分离"><a href="#3-web-与-static-服务器分离" class="headerlink" title="3. web 与 static 服务器分离"></a>3. web 与 static 服务器分离</h2><ul><li><code>web 服务器</code>：存放运行后端 web 应用的程序，以及前端 <code>html</code> 文件（入口文件）</li><li><code>static 服务器</code>：静态资源服务器，存放前端除 <code>html</code> 文件之外的其他资源文件，包括 <code>js</code>， <code>css</code>， <code>images</code>…</li></ul><p>一般地，还是以 django 框架为例，当前端把代码构建好之后，静态资源传到服务器相应的 <code>static</code> 目录，<code>html</code> 文件传到相应的 <code>templates</code> 目录，启动后端脚本就可运行了。两者不分离主要有以下几个缺点：</p><ul><li>前端构建过程中会产生大量的冗余文件，这对后端程序来说十分不友好，比如后端打包程序备份的时候，就会导致包很大；</li><li>不方便前端开发人员管理线上代码，并且前端人员能够直接接触到后端代码，也不够安全；</li><li>静态资源会占用 web 服务器的资源和带宽，当访问量变大的时候，web 与 static 服务器分离是必然的。</li></ul><p>web 与 static 服务器分离之后，前端开发人员便可无顾虑的备份前端代码，清除冗余代码等等。</p><ul><li>大多数情况下，会有多个项目共用同一个 static 服务器，如此便需要在服务器划分多个目录来存放静态资源文件；</li><li>构建的过程中，构建工具需要保证 <code>html</code> 对 <code>js/css/images...</code> 路径的正确引用，以及 <code>css</code> 对 <code>images...</code> 路径的正确引用，以 <a href="https://github.com/senntyou/lila" target="_blank" rel="noopener">lila</a>为例，需要配置 <code>staticServerUrl</code> 为 <code>http://www.static.com/project1</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-为什么需要-“前后端分离、web-与-static-服务器分离”&quot;&gt;&lt;a href=&quot;#1-为什么需要-“前后端分离、web-与-static-服务器分离”&quot; class=&quot;headerlink&quot; title=&quot;1. 为什么需要 “前后端分离、web 与 static 服务器分离”&quot;&gt;&lt;/a&gt;1. 为什么需要 “前后端分离、web 与 static 服务器分离”&lt;/h2&gt;&lt;p&gt;web 前端的发展历史大致可以分为两个阶段：&lt;code&gt;node&lt;/code&gt; 之前与 &lt;code&gt;node&lt;/code&gt; 之后。在 &lt;a href=&quot;https://github.com/nodejs/node&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;nodejs&lt;/a&gt; 出现之前，前端的发展一直比较缓慢，主要是因为：&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端进阶" scheme="http://www.barebear.cn/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="前端" scheme="http://www.barebear.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>npm 常用命令</title>
    <link href="http://www.barebear.cn/npm/1/"/>
    <id>http://www.barebear.cn/npm/1/</id>
    <published>2020-02-20T09:40:56.000Z</published>
    <updated>2020-02-20T09:43:57.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc306takvvj30ui0gqgnh.jpg" alt=""></p><a id="more"></a><h2 id="npm-常用命令"><a href="#npm-常用命令" class="headerlink" title="npm 常用命令"></a>npm 常用命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">npm view moduleNames 或 npm info moduleNames：查看模块的注册信息</span><br><span class="line"></span><br><span class="line">npm list 或 npm ll 或 npm la 或 npm l：查看所有已经安装的模块</span><br><span class="line"></span><br><span class="line">npm list parseable&#x3D;true: 可以目录的形式来展现当前安装的所有 node 包</span><br><span class="line"></span><br><span class="line">npm help：查看帮助命令</span><br><span class="line"></span><br><span class="line">npm view moudleName dependencies：查看包的依赖关系</span><br><span class="line"></span><br><span class="line">npm view moduleName repository.url：查看包的源文件地址</span><br><span class="line"></span><br><span class="line">npm view moduleName engines：查看包所依赖的 Node 的版本</span><br><span class="line"></span><br><span class="line">npm help folders：查看 npm 使用的所有文件夹</span><br><span class="line">   </span><br><span class="line">npm rebuild moduleName：用于更改包内容后进行重建</span><br><span class="line"> </span><br><span class="line">npm outdated：检查包是否已经过时，此命令会列出所有已经过时的包，可以及时进行包的更新，推荐使用检查依赖包更强大的一个工具[npm-check](https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;npm-check)</span><br><span class="line"> </span><br><span class="line">npm update moduleName 或 npm update -g：更新已经安装的模块(或全局的模块)</span><br><span class="line"></span><br><span class="line">npm uninstall moudleName：卸载 node 模块</span><br><span class="line">  </span><br><span class="line">npm help json: 访问 npm 的 json 文件夹,此命令会以默认的方式打开一个网页，如果更改了默认打开程序则可能不会以网页的形式打开</span><br><span class="line"></span><br><span class="line">npm search packageName:检验某个包名是否已存在</span><br><span class="line"></span><br><span class="line">npm init：创建一个 package.json 文件，包括名称、版本、作者这些信息等</span><br><span class="line"></span><br><span class="line">npm root：查看当前包的安装路径</span><br><span class="line"></span><br><span class="line">npm root -g：查看全局的包的安装路径</span><br><span class="line"></span><br><span class="line">npm config ls -l：查看和管理 npm 的基础配置</span><br><span class="line"></span><br><span class="line">npm list --depth&#x3D;0: 查看项目中安装哪些模块</span><br><span class="line"></span><br><span class="line">npm list --depth --global: 查看全局安装了哪些工具</span><br><span class="line"></span><br><span class="line">npm list moduleNames： 查看某个模块是否安装了</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://segmentfault.com/a/1190000013585195" target="_blank" rel="noopener">npm 常见问题小结</a></p><h2 id="更多关于-npm-资料可参考"><a href="#更多关于-npm-资料可参考" class="headerlink" title="更多关于 npm 资料可参考"></a>更多关于 npm 资料可参考</h2><p><a href="https://github.com/ericdum/mujiang.info/issues/6/" target="_blank" rel="noopener">npm 的 package.json 中文文档</a></p><p><a href="https://cloud.tencent.com/developer/chapter/18110" target="_blank" rel="noopener">npm入门</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/0082zybply1gc306takvvj30ui0gqgnh.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="周边" scheme="http://www.barebear.cn/categories/%E5%91%A8%E8%BE%B9/"/>
    
    
      <category term="npm" scheme="http://www.barebear.cn/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>Node.js安装及环境配置之centos篇</title>
    <link href="http://www.barebear.cn/node/install/"/>
    <id>http://www.barebear.cn/node/install/</id>
    <published>2020-02-20T09:15:56.000Z</published>
    <updated>2020-02-20T13:26:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、源码包安装"><a href="#一、源码包安装" class="headerlink" title="一、源码包安装"></a>一、源码包安装</h1><h2 id="首先安装wget"><a href="#首先安装wget" class="headerlink" title="首先安装wget"></a>首先安装wget</h2><p>如果已经安装了可以跳过该步</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y wget</span><br></pre></td></tr></table></figure><p>1、去<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">官网</a>下载和自己系统匹配的文件<br>通过<code>uname -a</code>命令查看到我的系统位数（备注：x86_64表示64位系统， i686 i386表示32位系统)<br><a href="https://nodejs.org/dist/v8.11.3/node-v8.11.3-linux-x64.tar.xz" target="_blank" rel="noopener">64位Linux v8.11.3下载地址</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;nodejs.org&#x2F;dist&#x2F;v8.11.3&#x2F;node-v8.11.3-linux-x64.tar.xz</span><br></pre></td></tr></table></figure><a id="more"></a><p>2、下载下来的tar解压，然后通过建立软连接变为全局；<br>解压后的文件我这边将名字改为了nodejs，这个解压地方随意（比如<code>/usr/software</code>），只要在建立软连接的时候写正确就可以</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/software</span><br><span class="line">tar xvf node-v8.11.3-linux-x64.tar.xz  </span><br><span class="line">mv node-v8.11.3-linux-x64  nodejs</span><br></pre></td></tr></table></figure><p>3）配置命令</p><p>方法一、建立软连接，变为全局</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/software/nodejs/bin/npm /usr/<span class="built_in">local</span>/bin/ </span><br><span class="line">ln -s /usr/software/nodejs/bin/node /usr/<span class="built_in">local</span>/bin/</span><br></pre></td></tr></table></figure><p>方法二、配置全局变量(注：Linux 里面是 .bashrc 而 Mac 是 .bash_profile)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure><p>在末尾新增</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/software/nodejs/bin</span><br></pre></td></tr></table></figure><p>保存退出<code>:wq</code></p><p>运行生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure><p>4）最后一步检验nodejs是否已变为全局</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><blockquote><p>~/.bash_profile: 每个用户都可使用该文件输入专用于自己使用的shell信息,当用户登录时,该文件仅仅执行一次!默认情况下,他设置一些环境变量,执行用户的.bashrc文件.</p></blockquote><h1 id="二、nvm方式安装"><a href="#二、nvm方式安装" class="headerlink" title="二、nvm方式安装"></a>二、nvm方式安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https:&#x2F;&#x2F;raw.github.com&#x2F;creationix&#x2F;nvm&#x2F;master&#x2F;install.sh | sh</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- https:&#x2F;&#x2F;raw.github.com&#x2F;creationix&#x2F;nvm&#x2F;master&#x2F;install.sh | sh</span><br></pre></td></tr></table></figure><p>安装完成后，执行下列命令即可安装 Node.js。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install stable</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><h1 id="三、yum方式"><a href="#三、yum方式" class="headerlink" title="三、yum方式"></a>三、yum方式</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sL https:&#x2F;&#x2F;rpm.nodesource.com&#x2F;setup_10.x | bash -</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y nodejs</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、源码包安装&quot;&gt;&lt;a href=&quot;#一、源码包安装&quot; class=&quot;headerlink&quot; title=&quot;一、源码包安装&quot;&gt;&lt;/a&gt;一、源码包安装&lt;/h1&gt;&lt;h2 id=&quot;首先安装wget&quot;&gt;&lt;a href=&quot;#首先安装wget&quot; class=&quot;headerlink&quot; title=&quot;首先安装wget&quot;&gt;&lt;/a&gt;首先安装wget&lt;/h2&gt;&lt;p&gt;如果已经安装了可以跳过该步&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum install -y wget&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;1、去&lt;a href=&quot;https://nodejs.org/en/download/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网&lt;/a&gt;下载和自己系统匹配的文件&lt;br&gt;通过&lt;code&gt;uname -a&lt;/code&gt;命令查看到我的系统位数（备注：x86_64表示64位系统， i686 i386表示32位系统)&lt;br&gt;&lt;a href=&quot;https://nodejs.org/dist/v8.11.3/node-v8.11.3-linux-x64.tar.xz&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;64位Linux v8.11.3下载地址&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget https:&amp;#x2F;&amp;#x2F;nodejs.org&amp;#x2F;dist&amp;#x2F;v8.11.3&amp;#x2F;node-v8.11.3-linux-x64.tar.xz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="周边" scheme="http://www.barebear.cn/categories/%E5%91%A8%E8%BE%B9/"/>
    
    
      <category term="node" scheme="http://www.barebear.cn/tags/node/"/>
    
      <category term="centos" scheme="http://www.barebear.cn/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>Node.js安装及环境配置之Mac篇</title>
    <link href="http://www.barebear.cn/node/2/"/>
    <id>http://www.barebear.cn/node/2/</id>
    <published>2020-02-20T09:12:56.000Z</published>
    <updated>2020-02-20T13:25:51.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载nodejs"><a href="#下载nodejs" class="headerlink" title="下载nodejs"></a>下载nodejs</h2><p>访问nodejs官网（<a href="https://nodejs.org/en/）选择合适，我选择是mac的" target="_blank" rel="noopener">https://nodejs.org/en/）选择合适，我选择是mac的</a><br><img src="https://tva1.sinaimg.cn/large/0082zybply1gc2z0z4vpkj313c0l0mzu.jpg" alt=""></p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>双击刚下载的.pkg文件，打开之后按照步骤默认安装就行<br><img src="https://tva1.sinaimg.cn/large/0082zybply1gc2z1ym1tej30xw0myabw.jpg" alt=""></p><p>安装完成之后肯定要检查的，打开终端，分别输入 :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node-v   </span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>由于node安装的时候就自带npm了。<br>如果出现版本信息，就说明安装成功。</p><h2 id="修改全局安装权限"><a href="#修改全局安装权限" class="headerlink" title="修改全局安装权限"></a>修改全局安装权限</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod -R 777 &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;下载nodejs&quot;&gt;&lt;a href=&quot;#下载nodejs&quot; class=&quot;headerlink&quot; title=&quot;下载nodejs&quot;&gt;&lt;/a&gt;下载nodejs&lt;/h2&gt;&lt;p&gt;访问nodejs官网（&lt;a href=&quot;https://nodejs.org/en/）选择合适，我选择是mac的&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://nodejs.org/en/）选择合适，我选择是mac的&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/0082zybply1gc2z0z4vpkj313c0l0mzu.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="周边" scheme="http://www.barebear.cn/categories/%E5%91%A8%E8%BE%B9/"/>
    
    
      <category term="node" scheme="http://www.barebear.cn/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Node.js安装及环境配置之Windows篇</title>
    <link href="http://www.barebear.cn/node/1/"/>
    <id>http://www.barebear.cn/node/1/</id>
    <published>2020-02-20T09:10:56.000Z</published>
    <updated>2020-02-20T13:25:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、安装环境"><a href="#一、安装环境" class="headerlink" title="一、安装环境"></a>一、安装环境</h2><p>1、本机系统：Windows 10 Pro（64位）<br>2、Node.js：v6.9.2LTS（64位）</p><a id="more"></a><h2 id="二、安装Node-js步骤"><a href="#二、安装Node-js步骤" class="headerlink" title="二、安装Node.js步骤"></a>二、安装Node.js步骤</h2><p>1、下载对应你系统的Node.js版本: <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a><br>2、选安装目录进行安装<br>3、环境配置<br>4、测试</p><h2 id="三、前期准备"><a href="#三、前期准备" class="headerlink" title="三、前期准备"></a>三、前期准备</h2><p>1、Node.js简介<br>简单的说 Node.js 就是运行在服务端的 JavaScript。Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。<br>2、下载Node.js<br>打开官网下载链接:<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener"><code>https://nodejs.org/en/download/</code></a><br>我这里下载的是node-v6.9.2-x64.msi,如下图：<br><img src="https://tva1.sinaimg.cn/large/0082zybply1gc2yrtobxxj311s0gqgo5.jpg" alt=""></p><p>开始安装</p><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc2yqun8tyj311a0t8gnt.jpg" alt=""></p><h2 id="四、测试"><a href="#四、测试" class="headerlink" title="四、测试"></a>四、测试</h2><p>在键盘按下【win+R】键，输入cmd，然后回车，打开cmd窗口<br><img src="https://tva1.sinaimg.cn/large/0082zybply1gc2yscmb3lj31180jswgq.jpg" alt=""><br>查看版本,如果正常显示则成功了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc2ysw0qpqj311c0iygms.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、安装环境&quot;&gt;&lt;a href=&quot;#一、安装环境&quot; class=&quot;headerlink&quot; title=&quot;一、安装环境&quot;&gt;&lt;/a&gt;一、安装环境&lt;/h2&gt;&lt;p&gt;1、本机系统：Windows 10 Pro（64位）&lt;br&gt;2、Node.js：v6.9.2LTS（64位）&lt;/p&gt;
    
    </summary>
    
    
      <category term="周边" scheme="http://www.barebear.cn/categories/%E5%91%A8%E8%BE%B9/"/>
    
    
      <category term="npm" scheme="http://www.barebear.cn/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>js 函数参数推荐书写方式 ({ param1, param2, ... })</title>
    <link href="http://www.barebear.cn/javascript/3/"/>
    <id>http://www.barebear.cn/javascript/3/</id>
    <published>2020-02-20T05:10:56.000Z</published>
    <updated>2020-02-20T08:29:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>编程语言函数（包括对象的方法）参数的取值方式大致可以分为两种：按序取值与按名取值。</p><p>一般编程语言都是按序取值，比如 C、Java、JavaScript 等，少数语言支持按名取值，比如 Groovy。</p><a id="more"></a><h2 id="1-按序取值"><a href="#1-按序取值" class="headerlink" title="1. 按序取值"></a>1. 按序取值</h2><p>按照顺序，挨个取值，每个参数的顺序是固定的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const func &#x3D; (param1, param2, ...) &#x3D;&gt; &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">func(1, 2, ...)</span><br></pre></td></tr></table></figure><h2 id="2-按名取值"><a href="#2-按名取值" class="headerlink" title="2. 按名取值"></a>2. 按名取值</h2><p>按照名称取值，可以任意安排各个参数的顺序。</p><blockquote><p>以下语法并不存在，只是作为讲解生造的</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const func &#x3D; (param1: value1, param2: value2, ...) &#x3D;&gt; &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">func(param1: 1, param2: 2); &#x2F;&#x2F; ok</span><br><span class="line">func(param2: 2, param1: 1); &#x2F;&#x2F; ok again</span><br></pre></td></tr></table></figure><h2 id="3-js-的按名取值"><a href="#3-js-的按名取值" class="headerlink" title="3. js 的按名取值"></a>3. js 的按名取值</h2><p>JavaScript 语言本身并不支持按名取值，但结合 <a href="http://es6.ruanyifeng.com/#docs/destructuring" target="_blank" rel="noopener">ES6 的解构赋值</a>，可以模拟函数参数的按名取值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const func &#x3D; (&#123; param1, param2, ... &#125;) &#x3D;&gt; &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">func(&#123; param1: 1, param2: 2, ... &#125;);</span><br></pre></td></tr></table></figure><p>但这种方式如果不传参数调用 <code>func()</code> 就会报错，需要 <code>func({})</code> 这样调用才表示什么参数都不传。</p><p>为了兼容这种方式，可以这样做：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const func &#x3D; (&#123; param1, param2, ... &#125; &#x3D; &#123;&#125;) &#x3D;&gt; &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">func();   &#x2F;&#x2F; ok</span><br><span class="line">func(&#123;&#125;); &#x2F;&#x2F; ok again</span><br></pre></td></tr></table></figure><h2 id="4-为什么推荐使用按名取值的方式"><a href="#4-为什么推荐使用按名取值的方式" class="headerlink" title="4. 为什么推荐使用按名取值的方式"></a>4. 为什么推荐使用按名取值的方式</h2><p>按名取值最大的好处是可以随意安排参数的顺序，有利于扩展，特别是对 API 接口来说。</p><p>比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export const dialog &#x3D; (title, content, confirmCallback, cancelCallback) &#x3D;&gt; &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>比如上面的函数中，大部分情况下我只用 <code>content, confirmCallback</code>，那么我就需要这样做：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dialog(null, &#39;content&#39;, () &#x3D;&gt; &#123; ... &#125;);</span><br></pre></td></tr></table></figure><p>如果我需要扩展一个参数 <code>icon</code>， 那么为了兼容以前的版本，我只能加在最后面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export const dialog &#x3D; (title, content, confirmCallback, cancelCallback, icon) &#x3D;&gt; &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>现在，大部分情况下我只用 <code>content, confirmCallback, icon</code>，那么我就需要这样做：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dialog(null, &#39;content&#39;, () &#x3D;&gt; &#123; ... &#125;, null, &#39;icon&#39;);</span><br></pre></td></tr></table></figure><p>如此，便很麻烦，不利于扩展。</p><p>如果使用按名取值的方式，便迎刃而解：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export const dialog &#x3D; (&#123;title, content, confirmCallback, cancelCallback&#125; &#x3D; &#123;&#125;) &#x3D;&gt; &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 扩展 icon</span><br><span class="line">export const dialog &#x3D; (&#123;title, content, icon, confirmCallback, cancelCallback&#125; &#x3D; &#123;&#125;) &#x3D;&gt; &#123; ... &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dialog(&#123;content: &#39;content&#39;, confirmCallback: () &#x3D;&gt; &#123; ... &#125;&#125;);</span><br><span class="line"></span><br><span class="line">dialog(&#123;content: &#39;content&#39;, icon: &#39;icon&#39;, confirmCallback: () &#x3D;&gt; &#123; ... &#125;&#125;);</span><br></pre></td></tr></table></figure><h2 id="5-大家可能的反驳"><a href="#5-大家可能的反驳" class="headerlink" title="5. 大家可能的反驳"></a>5. 大家可能的反驳</h2><p>有人可能会说，可以这样做：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">export const dialog &#x3D; (title, content, confirmCallback, cancelCallback) &#x3D;&gt; &#123;</span><br><span class="line">  if (typeof content &#x3D;&#x3D;&#x3D; &#39;function&#39;) &#123;</span><br><span class="line">    cancelCallback &#x3D; confirmCallback;</span><br><span class="line">    confirmCallback &#x3D; content;</span><br><span class="line">    content &#x3D; title;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于这种方式，我只想说：兄弟，简洁一点不好吗？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;编程语言函数（包括对象的方法）参数的取值方式大致可以分为两种：按序取值与按名取值。&lt;/p&gt;
&lt;p&gt;一般编程语言都是按序取值，比如 C、Java、JavaScript 等，少数语言支持按名取值，比如 Groovy。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://www.barebear.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://www.barebear.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>js 中的 number 为何很怪异</title>
    <link href="http://www.barebear.cn/javascript/2/"/>
    <id>http://www.barebear.cn/javascript/2/</id>
    <published>2020-02-20T04:10:56.000Z</published>
    <updated>2020-02-20T08:29:55.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>声明：需要读者对二进制有一定的了解</p></blockquote><p>对于 JavaScript 开发者来说，或多或少都遇到过 <code>js</code> 在处理数字上的奇怪现象，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt; 0.1 + 0.2</span><br><span class="line">0.30000000000000004</span><br><span class="line"></span><br><span class="line">&gt; 0.1 + 1 - 1</span><br><span class="line">0.10000000000000009</span><br><span class="line"></span><br><span class="line">&gt; 0.1 * 0.2</span><br><span class="line">0.020000000000000004</span><br><span class="line"></span><br><span class="line">&gt; Math.pow(2, 53)</span><br><span class="line">9007199254740992</span><br><span class="line"></span><br><span class="line">&gt; Math.pow(2, 53) + 1</span><br><span class="line">9007199254740992</span><br><span class="line"></span><br><span class="line">&gt; Math.pow(2, 53) + 3</span><br><span class="line">9007199254740996</span><br></pre></td></tr></table></figure><a id="more"></a><p>如果想要弄明白为什么会出现这些奇怪现象，首先要弄清楚 _JavaScript 是怎样编码数字的_。</p><h2 id="1-JavaScript-是怎样编码数字的"><a href="#1-JavaScript-是怎样编码数字的" class="headerlink" title="1. JavaScript 是怎样编码数字的"></a>1. JavaScript 是怎样编码数字的</h2><p>JavaScript 中的数字，不管是整数、小数、分数，还是正数、负数，全部是浮点数，都是用 8 个字节（64 位）来存储的。</p><p>一个数字（如 <code>12</code>、<code>0.12</code>、<code>-999</code>）在内存中占用 8 个字节（64 位），存储方式如下：</p><ol><li><code>0 - 51</code>：分数部分（52 位）</li><li><code>52 - 62</code>：指数部分（11 位）</li><li><code>63</code>：符号位（1 位：0 表示这个数是正数，1 表示这个数是负数）</li></ol><p>符号位很好理解，用于指明是正数还是负数，且只有 1 位、两种情况（0 表示正数，1 表示负数）。</p><p>其他两部分是分数部分和指数部分，用于计算一个数的绝对值。</p><h3 id="1-1-绝对值计算公式"><a href="#1-1-绝对值计算公式" class="headerlink" title="1.1 绝对值计算公式"></a>1.1 绝对值计算公式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1: abs &#x3D; 1.f * 2 ^ (e - 1023)             0 &lt; e &lt; 2047</span><br><span class="line">2: abs &#x3D; 0.f * 2 ^ (e - 1022)             e &#x3D; 0, f &gt; 0</span><br><span class="line">3: abs &#x3D; 0                                e &#x3D; 0, f &#x3D; 0</span><br><span class="line">4: abs &#x3D; NaN                              e &#x3D; 2047, f &gt; 0</span><br><span class="line">5: abs &#x3D; ∞ (infinity, 无穷大)              e &#x3D; 2047, f &#x3D; 0</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>这个公式是二进制的算法公式，结果用 <code>abs</code> 表示，分数部分用 <code>f</code> 表示，指数部分用 <code>e</code> 表示</li><li><code>2 ^ (e - 1023)</code> 表示 <code>2</code> 的 <code>e - 1023</code> 次方</li><li>因为分数部分占 52 位，所以 <code>f</code> 的取值范围为 <code>00...00</code>（中间省略 48 个 0） 到 <code>11...11</code>（中间省略 48 个 1）</li><li>因为指数部分占 11 位，所以 <code>e</code> 的取值范围为 <code>0</code>（<code>00000000000</code>） 到 <code>2047</code>（<code>11111111111</code>）</li></ul><p>从上面的公式可以看出：</p><ul><li><code>1</code> 的存储方式：<code>1.00 * 2 ^ (1023 - 1023)</code>（<code>f = 0000..., e = 1023</code>，<code>...</code> 表示 48 个 0）</li><li><code>2</code> 的存储方式：<code>1.00 * 2 ^ (1024 - 1023)</code>（<code>f = 0000..., e = 1024</code>，<code>...</code> 表示 48 个 0）</li><li><code>9</code> 的存储方式：<code>1.001 * 2 ^ (1026 - 1023)</code>（<code>f = 0010..., e = 1026</code>，<code>...</code> 表示 48 个 0）</li><li><code>0.5</code> 的存储方式：<code>1.00 * 2 ^ (1022 - 1023)</code>（<code>f = 0000..., e = 1022</code>，<code>...</code> 表示 48 个 0）</li><li><code>0.625</code> 的存储方式：<code>1.01 * 2 ^ (1022 - 1023)</code>（<code>f = 0100..., e = 1022</code>，<code>...</code> 表示 48 个 0）</li></ul><h3 id="1-2-绝对值的取值范围与边界"><a href="#1-2-绝对值的取值范围与边界" class="headerlink" title="1.2 绝对值的取值范围与边界"></a>1.2 绝对值的取值范围与边界</h3><p>从上面的公式可以看出：</p><h4 id="1-2-1-0-lt-e-lt-2047"><a href="#1-2-1-0-lt-e-lt-2047" class="headerlink" title="1.2.1 0 &lt; e &lt; 2047"></a>1.2.1 <code>0 &lt; e &lt; 2047</code></h4><p>当 <code>0 &lt; e &lt; 2047</code> 时，取值范围为：<code>f = 0, e = 1</code> 到 <code>f = 11...11, e = 2046</code>（中间省略 48 个 1）</p><p>即：<code>Math.pow(2, -1022)</code> 到 <code>~= Math.pow(2, 1024) - 1</code>（<code>～=</code> 表示约等于）</p><p>这当中，<code>~= Math.pow(2, 1024) - 1</code> 就是 <code>Number.MAX_VALUE</code> 的值，<code>js</code> 所能表示的最大数值。</p><h4 id="1-2-2-e-0-f-gt-0"><a href="#1-2-2-e-0-f-gt-0" class="headerlink" title="1.2.2 e = 0, f &gt; 0"></a>1.2.2 <code>e = 0, f &gt; 0</code></h4><p>当 <code>e = 0, f &gt; 0</code> 时，取值范围为：<code>f = 00...01, e = 0</code>（中间省略 48 个 0） 到 <code>f = 11...11, e = 0</code>（中间省略 48 个 1）</p><p>即：<code>Math.pow(2, -1074)</code> 到 <code>~= Math.pow(2, -1022)</code>（<code>～=</code> 表示约等于）</p><p>这当中，<code>Math.pow(2, -1074)</code> 就是 <code>Number.MIN_VALUE</code> 的值，<code>js</code> 所能表示的最小数值（绝对值）。</p><h4 id="1-2-3-e-0-f-0"><a href="#1-2-3-e-0-f-0" class="headerlink" title="1.2.3 e = 0, f = 0"></a>1.2.3 <code>e = 0, f = 0</code></h4><p>这只表示一个值 <code>0</code>，但加上符号位，所以有 <code>+0</code> 与 <code>-0</code>。</p><p>但在运算中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; +0 &#x3D;&#x3D;&#x3D; -0</span><br><span class="line">true</span><br></pre></td></tr></table></figure><h4 id="1-2-4-e-2047-f-gt-0"><a href="#1-2-4-e-2047-f-gt-0" class="headerlink" title="1.2.4 e = 2047, f &gt; 0"></a>1.2.4 <code>e = 2047, f &gt; 0</code></h4><p>这只表示一种值 <code>NaN</code>。</p><p>但在运算中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; NaN &#x3D;&#x3D; NaN</span><br><span class="line">false</span><br><span class="line"></span><br><span class="line">&gt; NaN &#x3D;&#x3D;&#x3D; NaN</span><br><span class="line">false</span><br></pre></td></tr></table></figure><h4 id="1-2-5-e-2047-f-0"><a href="#1-2-5-e-2047-f-0" class="headerlink" title="1.2.5 e = 2047, f = 0"></a>1.2.5 <code>e = 2047, f = 0</code></h4><p>这只表示一个值 <code>∞</code> (infinity, 无穷大)。</p><p>在运算中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; Infinity &#x3D;&#x3D;&#x3D; Infinity</span><br><span class="line">true</span><br><span class="line"></span><br><span class="line">&gt; -Infinity &#x3D;&#x3D;&#x3D; -Infinity</span><br><span class="line">true</span><br></pre></td></tr></table></figure><h3 id="1-3-绝对值的最大安全值"><a href="#1-3-绝对值的最大安全值" class="headerlink" title="1.3 绝对值的最大安全值"></a>1.3 绝对值的最大安全值</h3><p>从上面可以看出，8 个字节能存储的最大数值是 <code>Number.MAX_VALUE</code> 的值，也就是 <code>~= Math.pow(2, 1024) - 1</code>。</p><p>但这个数值并不安全：从 <code>1</code> 到 <code>Number.MAX_VALUE</code> 中间的数字并不连续，而是离散的。</p><p>比如：<code>Number.MAX_VALUE - 1</code>, <code>Number.MAX_VALUE - 2</code> 等数值都无法用公式得出，就存储不了。</p><p>所以这里引出了最大安全值 <code>Number.MAX_SAFE_INTEGER</code>，也就是从 <code>1</code> 到 <code>Number.MAX_SAFE_INTEGER</code> 中间的数字都是连续的，处在这个范围内的数值计算都是安全的。</p><p>当 <code>f = 11...11, e = 1075</code>（中间省略 48 个 1）时，取得这个值 <code>111...11</code>（中间省略 48 个 1），即 <code>Math.pow(2, 53) - 1</code>。</p><p>大于 <code>Number.MAX_SAFE_INTEGER：Math.pow(2, 53) - 1</code> 的数值都是离散的。</p><p>比如：<code>Math.pow(2, 53) + 1</code>, <code>Math.pow(2, 53) + 3</code> 不能用公式得出，无法存储在内存中。</p><p>所以才会有文章开头的现象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; Math.pow(2, 53)</span><br><span class="line">9007199254740992</span><br><span class="line"></span><br><span class="line">&gt; Math.pow(2, 53) + 1</span><br><span class="line">9007199254740992</span><br><span class="line"></span><br><span class="line">&gt; Math.pow(2, 53) + 3</span><br><span class="line">9007199254740996</span><br></pre></td></tr></table></figure><p>因为 <code>Math.pow(2, 53) + 1</code> 不能用公式得出，就无法存储在内存中，所以只有取最靠近这个数的、能够用公式得出的其他数，<code>Math.pow(2, 53)</code>，然后存储在内存中，这就是失真，即不安全。</p><h3 id="1-4-小数的存储方式与计算"><a href="#1-4-小数的存储方式与计算" class="headerlink" title="1.4 小数的存储方式与计算"></a>1.4 小数的存储方式与计算</h3><p>小数中，除了满足 <code>m / (2 ^ n)</code>（<code>m, n</code> 都是整数）的小数可以用完整的 2 进制表示之外，其他的都不能用完整的 2 进制表示，只能无限的逼近一个 2 进制小数。</p><p>（注：<code>[2]</code> 表示二进制，<code>^</code> 表示 N 次方）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0.5 &#x3D; 1 &#x2F; 2 &#x3D; [2]0.1</span><br><span class="line">0.875 &#x3D; 7 &#x2F; 8 &#x3D; 1 &#x2F; 2 + 1 &#x2F; 4 + 1 &#x2F; 8 &#x3D; [2]0.111</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 0.3 的逼近</span><br><span class="line"></span><br><span class="line">0.25 ([2]0.01) &lt; 0.3 &lt; 0.5 ([2]0.10)</span><br><span class="line"></span><br><span class="line">0.296875 ([2]0.0100110) &lt; 0.3 &lt; 0.3046875 ([2]0.0100111)</span><br><span class="line"></span><br><span class="line">0.2998046875 ([2]0.01001100110) &lt; 0.3 &lt; 0.30029296875 ([2]0.01001100111)</span><br><span class="line"></span><br><span class="line">... 根据公式计算，直到把分数部分的 52 位填满，然后取最靠近的数</span><br><span class="line"></span><br><span class="line">0.3 的存储方式：[2]0.010011001100110011001100110011001100110011001100110011</span><br><span class="line"></span><br><span class="line">(f &#x3D; 0011001100110011001100110011001100110011001100110011, e &#x3D; 1021)</span><br></pre></td></tr></table></figure><p>从上面可以看出，小数中大部分都只是近似值，只有少部分是真实值，所以只有这少部分的值（满足 <code>m / (2 ^ n)</code> 的小数）可以直接比较大小，其他的都不能直接比较。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; 0.5 + 0.125 &#x3D;&#x3D;&#x3D; 0.625</span><br><span class="line">true</span><br><span class="line"></span><br><span class="line">&gt; 0.1 + 0.2 &#x3D;&#x3D;&#x3D; 0.3</span><br><span class="line">false</span><br></pre></td></tr></table></figure><p>为了安全的比较两个小数，引入 <code>Number.EPSILON [Math.pow(2, -52)]</code> 来比较浮点数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; Math.abs(0.1 + 0.2 - 0.3) &lt; Number.EPSILON</span><br><span class="line">true</span><br></pre></td></tr></table></figure><h3 id="1-5-小数最大保留位数"><a href="#1-5-小数最大保留位数" class="headerlink" title="1.5 小数最大保留位数"></a>1.5 小数最大保留位数</h3><p><code>js</code> 从内存中读取一个数时，最大保留 <code>17</code> 位有效数字。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 0.010011001100110011001100110011001100110011001100110011</span><br><span class="line">0.30000000000000000</span><br><span class="line">0.3</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 0.010011001100110011001100110011001100110011001100110010</span><br><span class="line">0.29999999999999993</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 0.010011001100110011001100110011001100110011001100110100</span><br><span class="line">0.30000000000000004</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 0.0000010100011110101110000101000111101011100001010001111100</span><br><span class="line">0.020000000000000004</span><br></pre></td></tr></table></figure><h2 id="2-Number-对象中的常量"><a href="#2-Number-对象中的常量" class="headerlink" title="2. Number 对象中的常量"></a>2. Number 对象中的常量</h2><h3 id="2-1-Number-EPSILON"><a href="#2-1-Number-EPSILON" class="headerlink" title="2.1 Number.EPSILON"></a>2.1 Number.EPSILON</h3><p>表示 1 与 Number 可表示的大于 1 的最小的浮点数之间的差值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Math.pow(2, -52)</span><br></pre></td></tr></table></figure><p>用于浮点数之间安全的比较大小。</p><h3 id="2-2-Number-MAX-SAFE-INTEGER"><a href="#2-2-Number-MAX-SAFE-INTEGER" class="headerlink" title="2.2 Number.MAX_SAFE_INTEGER"></a>2.2 Number.MAX_SAFE_INTEGER</h3><p>绝对值的最大安全值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Math.pow(2, 53) - 1</span><br></pre></td></tr></table></figure><h3 id="2-3-Number-MAX-VALUE"><a href="#2-3-Number-MAX-VALUE" class="headerlink" title="2.3 Number.MAX_VALUE"></a>2.3 Number.MAX_VALUE</h3><p><code>js</code> 所能表示的最大数值（8 个字节能存储的最大数值）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~&#x3D; Math.pow(2, 1024) - 1</span><br></pre></td></tr></table></figure><h3 id="2-4-Number-MIN-SAFE-INTEGER"><a href="#2-4-Number-MIN-SAFE-INTEGER" class="headerlink" title="2.4 Number.MIN_SAFE_INTEGER"></a>2.4 Number.MIN_SAFE_INTEGER</h3><p>最小安全值（包括符号）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-(Math.pow(2, 53) - 1)</span><br></pre></td></tr></table></figure><h3 id="2-5-Number-MIN-VALUE"><a href="#2-5-Number-MIN-VALUE" class="headerlink" title="2.5 Number.MIN_VALUE"></a>2.5 Number.MIN_VALUE</h3><p><code>js</code> 所能表示的最小数值（绝对值）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Math.pow(2, -1074)</span><br></pre></td></tr></table></figure><h3 id="2-6-Number-NEGATIVE-INFINITY"><a href="#2-6-Number-NEGATIVE-INFINITY" class="headerlink" title="2.6 Number.NEGATIVE_INFINITY"></a>2.6 Number.NEGATIVE_INFINITY</h3><p>负无穷大。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Infinity</span><br></pre></td></tr></table></figure><h3 id="2-7-Number-POSITIVE-INFINITY"><a href="#2-7-Number-POSITIVE-INFINITY" class="headerlink" title="2.7 Number.POSITIVE_INFINITY"></a>2.7 Number.POSITIVE_INFINITY</h3><p>正无穷大。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+Infinity</span><br></pre></td></tr></table></figure><h3 id="2-8-Number-NaN"><a href="#2-8-Number-NaN" class="headerlink" title="2.8 Number.NaN"></a>2.8 Number.NaN</h3><p>非数字。</p><h2 id="3-寻找奇怪现象的原因"><a href="#3-寻找奇怪现象的原因" class="headerlink" title="3. 寻找奇怪现象的原因"></a>3. 寻找奇怪现象的原因</h2><h3 id="3-1-为什么-0-1-0-2-结果是-0-30000000000000004"><a href="#3-1-为什么-0-1-0-2-结果是-0-30000000000000004" class="headerlink" title="3.1 为什么 0.1 + 0.2 结果是 0.30000000000000004"></a>3.1 为什么 <code>0.1 + 0.2</code> 结果是 <code>0.30000000000000004</code></h3><p>与 <code>0.3</code> 的逼近算法类似。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0.1 的存储方式：[2]0.00011001100110011001100110011001100110011001100110011010</span><br><span class="line"></span><br><span class="line">(f &#x3D; 1001100110011001100110011001100110011001100110011010, e &#x3D; 1019)</span><br><span class="line"></span><br><span class="line">0.2 的存储方式：[2]0.0011001100110011001100110011001100110011001100110011010</span><br><span class="line"></span><br><span class="line">(f &#x3D; 1001100110011001100110011001100110011001100110011010, e &#x3D; 1020)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0.1 + 0.2: 0.0100110011001100110011001100110011001100110011001100111</span><br><span class="line"></span><br><span class="line">(f &#x3D; 00110011001100110011001100110011001100110011001100111, e &#x3D; 1021)</span><br></pre></td></tr></table></figure><p>但 <code>f = 00110011001100110011001100110011001100110011001100111</code> 有 53 位，超过了正常的 52 位，无法存储，所以取最近的数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0.1 + 0.2: 0.010011001100110011001100110011001100110011001100110100</span><br><span class="line"></span><br><span class="line">(f &#x3D; 0011001100110011001100110011001100110011001100110100, e &#x3D; 1021)</span><br></pre></td></tr></table></figure><p><code>js</code> 读取这个数字为 <code>0.30000000000000004</code></p><h3 id="3-2-为什么-Math-pow-2-53-1-结果是-Math-pow-2-53"><a href="#3-2-为什么-Math-pow-2-53-1-结果是-Math-pow-2-53" class="headerlink" title="3.2 为什么 Math.pow(2, 53) + 1 结果是 Math.pow(2, 53)"></a>3.2 为什么 <code>Math.pow(2, 53) + 1</code> 结果是 <code>Math.pow(2, 53)</code></h3><p>因为 <code>Math.pow(2, 53) + 1</code> 不能用公式得出，无法存储在内存中，所以只有取最靠近这个数的、能够用公式得出的其他数。</p><p>比这个数小的、最靠近的数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Math.pow(2, 53)</span><br><span class="line"></span><br><span class="line">(f &#x3D; 0000000000000000000000000000000000000000000000000000, e &#x3D; 1076)</span><br></pre></td></tr></table></figure><p>比这个数大的、最靠近的数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Math.pow(2, 53) + 2</span><br><span class="line"></span><br><span class="line">(f &#x3D; 0000000000000000000000000000000000000000000000000001, e &#x3D; 1076)</span><br></pre></td></tr></table></figure><p>取第一个数：<code>Math.pow(2, 53)</code>。</p><p>所以：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; Math.pow(2, 53) + 1 &#x3D;&#x3D;&#x3D; Math.pow(2, 53)</span><br><span class="line">true</span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="http://2ality.com/2012/04/number-encoding.html" target="_blank" rel="noopener">How numbers are encoded in JavaScript</a></li><li><a href="https://segmentfault.com/a/1190000017090272" target="_blank" rel="noopener">JavaScript 是怎样编码数字的</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;声明：需要读者对二进制有一定的了解&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于 JavaScript 开发者来说，或多或少都遇到过 &lt;code&gt;js&lt;/code&gt; 在处理数字上的奇怪现象，比如：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; 0.1 + 0.2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0.30000000000000004&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; 0.1 + 1 - 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0.10000000000000009&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; 0.1 * 0.2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0.020000000000000004&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; Math.pow(2, 53)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9007199254740992&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; Math.pow(2, 53) + 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9007199254740992&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; Math.pow(2, 53) + 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9007199254740996&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://www.barebear.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://www.barebear.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>js 中一些意想不到的使用技巧（持续更新，欢迎补充）</title>
    <link href="http://www.barebear.cn/javascript/1/"/>
    <id>http://www.barebear.cn/javascript/1/</id>
    <published>2020-02-20T03:10:56.000Z</published>
    <updated>2020-02-20T08:29:59.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-箭头函数-gt-返回-map-对象"><a href="#1-箭头函数-gt-返回-map-对象" class="headerlink" title="1. 箭头函数 =&gt; 返回 map 对象"></a>1. 箭头函数 <code>=&gt;</code> 返回 <code>map</code> 对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 一般的写法</span><br><span class="line">const makeMap &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  return &#123;key: &#39;value&#39;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 简洁的写法</span><br><span class="line">const makeMap &#x3D; () &#x3D;&gt; (&#123;key: &#39;value&#39;&#125;);</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2-对象属性名不确定，需要动态的传入"><a href="#2-对象属性名不确定，需要动态的传入" class="headerlink" title="2. 对象属性名不确定，需要动态的传入"></a>2. 对象属性名不确定，需要动态的传入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 一般的写法</span><br><span class="line">const makeMap &#x3D; (key, value) &#x3D;&gt; &#123;</span><br><span class="line">  const obj &#x3D; &#123;&#125;;</span><br><span class="line">  obj[key] &#x3D; value;</span><br><span class="line">  return obj;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 简洁的写法</span><br><span class="line">const makeMap &#x3D; (key, value) &#x3D;&gt; (&#123;[key]: value&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-复制一个对象，并重写其中的一些属性"><a href="#3-复制一个对象，并重写其中的一些属性" class="headerlink" title="3. 复制一个对象，并重写其中的一些属性"></a>3. 复制一个对象，并重写其中的一些属性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const source &#x3D; &#123;hello: &#39;hello&#39;, hi: &#39;hi&#39;&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 一般的写法</span><br><span class="line">const target &#x3D; Object.assign(&#123;&#125;, source);</span><br><span class="line">target.hello &#x3D; &#39;hello everyone&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 简洁的写法</span><br><span class="line">const target &#x3D; &#123;...source, hello: &#39;hello everyone&#39;&#125;;</span><br></pre></td></tr></table></figure><h3 id="4-数组解构为函数参数"><a href="#4-数组解构为函数参数" class="headerlink" title="4. 数组解构为函数参数"></a>4. 数组解构为函数参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const arr &#x3D; [1, 2, 3];</span><br><span class="line">const plus &#x3D; (...args) &#x3D;&gt; args.reduce((a, b) &#x3D;&gt; a + b);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 一般的写法</span><br><span class="line">plus(arr[0], arr[1], arr[2], 4, 5);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 简洁的写法</span><br><span class="line">plus(...arr, 4, 5);</span><br></pre></td></tr></table></figure><h3 id="5-向一个数组添加另一数组的所有元素"><a href="#5-向一个数组添加另一数组的所有元素" class="headerlink" title="5. 向一个数组添加另一数组的所有元素"></a>5. 向一个数组添加另一数组的所有元素</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const arr1 &#x3D; [1, 2, 3];</span><br><span class="line">const arr2 &#x3D; [4, 5, 6];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 一般的写法</span><br><span class="line">arr1 &#x3D; arr1.concat(arr2);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 简洁的写法</span><br><span class="line">arr1.push(...arr2);</span><br></pre></td></tr></table></figure><h3 id="6-回调函数简写"><a href="#6-回调函数简写" class="headerlink" title="6. 回调函数简写"></a>6. 回调函数简写</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 一般的写法</span><br><span class="line">promise.catch(e &#x3D;&gt; &#123;</span><br><span class="line">  console.log(e);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 简洁的写法</span><br><span class="line">promise.catch(console.log);</span><br></pre></td></tr></table></figure><h3 id="7-多级箭头函数-gt"><a href="#7-多级箭头函数-gt" class="headerlink" title="7. 多级箭头函数 =&gt;"></a>7. 多级箭头函数 <code>=&gt;</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 一般的写法</span><br><span class="line">const makeTimesFunc &#x3D; times &#x3D;&gt; &#123;</span><br><span class="line">  return value &#x3D;&gt; &#123;</span><br><span class="line">    return value * times;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 简洁的写法</span><br><span class="line">const makeTimesFunc &#x3D; times &#x3D;&gt; value &#x3D;&gt; value * times;</span><br></pre></td></tr></table></figure><h3 id="8-从右向左函数复式调用"><a href="#8-从右向左函数复式调用" class="headerlink" title="8. 从右向左函数复式调用"></a>8. 从右向左函数复式调用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> &#x2F;&#x2F; 不确定元素个数，举例 3 个</span><br><span class="line">const fnCollection &#x3D; [str &#x3D;&gt; &#96;$&#123;str&#125; | fisrt&#96;, str &#x3D;&gt; &#96;$&#123;str&#125; | second&#96;, str &#x3D;&gt; &#96;$&#123;str&#125; | third&#96;];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 一般的写法</span><br><span class="line">const addManySuffixes &#x3D; str &#x3D;&gt; &#123;</span><br><span class="line">  let result &#x3D; str;</span><br><span class="line">  for(let i &#x3D; fnCollection.length - 1; i &gt; -1; i -&#x3D; 1)</span><br><span class="line">    result &#x3D; fnCollection[i](result);</span><br><span class="line"></span><br><span class="line">  return result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 简洁的写法</span><br><span class="line">const addManySuffixes &#x3D; fnCollection.reduce((a, b) &#x3D;&gt; str &#x3D;&gt; a(b(str)));</span><br><span class="line">&#x2F;&#x2F; 可以把 str 参数扩展成任意参数</span><br><span class="line">const addManySuffixes &#x3D; fnCollection.reduce((a, b) &#x3D;&gt; (...args) &#x3D;&gt; a(b(...args)));</span><br></pre></td></tr></table></figure><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>更多博客，查看 <a href="https://github.com/senntyou/blogs" target="_blank" rel="noopener">https://github.com/senntyou/blogs</a></p><p>作者：<a href="https://github.com/senntyou" target="_blank" rel="noopener">深予之 (@senntyou)</a></p><p>版权声明：自由转载-非商用-非衍生-保持署名（<a href="https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" target="_blank" rel="noopener">创意共享 3.0 许可证</a>）</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-箭头函数-gt-返回-map-对象&quot;&gt;&lt;a href=&quot;#1-箭头函数-gt-返回-map-对象&quot; class=&quot;headerlink&quot; title=&quot;1. 箭头函数 =&amp;gt; 返回 map 对象&quot;&gt;&lt;/a&gt;1. 箭头函数 &lt;code&gt;=&amp;gt;&lt;/code&gt; 返回 &lt;code&gt;map&lt;/code&gt; 对象&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#x2F;&amp;#x2F; 一般的写法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const makeMap &amp;#x3D; () &amp;#x3D;&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return &amp;#123;key: &amp;#39;value&amp;#39;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#x2F;&amp;#x2F; 简洁的写法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const makeMap &amp;#x3D; () &amp;#x3D;&amp;gt; (&amp;#123;key: &amp;#39;value&amp;#39;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://www.barebear.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://www.barebear.cn/tags/JavaScript/"/>
    
  </entry>
  
</feed>
