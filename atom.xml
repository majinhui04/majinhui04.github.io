<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>马金慧的博客</title>
  
  <subtitle>斯人如彩虹，遇上方知有</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.barebear.cn/"/>
  <updated>2020-02-10T04:08:08.000Z</updated>
  <id>http://www.barebear.cn/</id>
  
  <author>
    <name>Ma JinHui</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2020史上最全的web前端资源整合</title>
    <link href="http://www.barebear.cn/2020/02/10/web-frontend-resource/"/>
    <id>http://www.barebear.cn/2020/02/10/web-frontend-resource/</id>
    <published>2020-02-10T04:02:37.000Z</published>
    <updated>2020-02-10T04:08:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vue-js高仿饿了么（1-13章全）"><a href="#vue-js高仿饿了么（1-13章全）" class="headerlink" title="vue.js高仿饿了么（1-13章全）"></a>vue.js高仿饿了么（1-13章全）</h2><p>链接：<a href="https://pan.baidu.com/s/1qYSiYXluA1AlEV0EskxWZw" target="_blank" rel="noopener">https://pan.baidu.com/s/1qYSiYXluA1AlEV0EskxWZw</a><br>提取码：25z9</p><h2 id="Vue-js-2-5-cube-ui-重构饿了么-App"><a href="#Vue-js-2-5-cube-ui-重构饿了么-App" class="headerlink" title="Vue.js 2.5 + cube-ui 重构饿了么 App"></a>Vue.js 2.5 + cube-ui 重构饿了么 App</h2><p>链接：<a href="https://pan.baidu.com/s/1UZyLkzYMvhUhhX3GH5ITvA" target="_blank" rel="noopener">https://pan.baidu.com/s/1UZyLkzYMvhUhhX3GH5ITvA</a><br>提取码：bx53</p><h2 id="Vue2-0-Node-js-MongoDB全栈打造商城系统"><a href="#Vue2-0-Node-js-MongoDB全栈打造商城系统" class="headerlink" title="Vue2.0 + Node.js + MongoDB全栈打造商城系统"></a>Vue2.0 + Node.js + MongoDB全栈打造商城系统</h2><p>链接：<a href="https://pan.baidu.com/s/10Jm22uzp4p2NMMRlNac7Rg" target="_blank" rel="noopener">https://pan.baidu.com/s/10Jm22uzp4p2NMMRlNac7Rg</a><br>提取码：uns3</p><h2 id="Vue-2-0-高级实战-开发移动端音乐-WebApp"><a href="#Vue-2-0-高级实战-开发移动端音乐-WebApp" class="headerlink" title="Vue 2.0 高级实战-开发移动端音乐 WebApp"></a>Vue 2.0 高级实战-开发移动端音乐 WebApp</h2><p>链接：<a href="https://pan.baidu.com/s/1RvF1KziTgq4HEaIVnCvz1w" target="_blank" rel="noopener">https://pan.baidu.com/s/1RvF1KziTgq4HEaIVnCvz1w</a><br>提取码：v0vb</p><h2 id="vue去哪儿无密APP"><a href="#vue去哪儿无密APP" class="headerlink" title="vue去哪儿无密APP"></a>vue去哪儿无密APP</h2><p>链接：<a href="https://pan.baidu.com/s/1vQMWuSNJJ8OrxoGVcZTgtw" target="_blank" rel="noopener">https://pan.baidu.com/s/1vQMWuSNJJ8OrxoGVcZTgtw</a><br>提取码：u3yz</p><h2 id="Vue全家桶-SSR-Koa2全栈开发美团网"><a href="#Vue全家桶-SSR-Koa2全栈开发美团网" class="headerlink" title="Vue全家桶+SSR+Koa2全栈开发美团网"></a>Vue全家桶+SSR+Koa2全栈开发美团网</h2><p>链接：<a href="https://pan.baidu.com/s/1KTzsYSB5-Ua47r-jArSgJw" target="_blank" rel="noopener">https://pan.baidu.com/s/1KTzsYSB5-Ua47r-jArSgJw</a><br>提取码：qwen</p><h2 id="7天搞定Node-js微信公众号开发"><a href="#7天搞定Node-js微信公众号开发" class="headerlink" title="7天搞定Node.js微信公众号开发"></a>7天搞定Node.js微信公众号开发</h2><p>链接：<a href="https://pan.baidu.com/s/1Aw6be7tp8ysDs0N1H7Kf_Q" target="_blank" rel="noopener">https://pan.baidu.com/s/1Aw6be7tp8ysDs0N1H7Kf_Q</a><br>提取码：gf6q</p><h2 id="Vue-Node-MongoDB高级全栈"><a href="#Vue-Node-MongoDB高级全栈" class="headerlink" title="Vue + Node + MongoDB高级全栈"></a>Vue + Node + MongoDB高级全栈</h2><p>链接：<a href="https://pan.baidu.com/s/1dK5XH_Uxi21dZTYwGR-KkQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1dK5XH_Uxi21dZTYwGR-KkQ</a><br>提取码：ta3s</p><h2 id="VUE核心技术视频"><a href="#VUE核心技术视频" class="headerlink" title="VUE核心技术视频"></a>VUE核心技术视频</h2><p>链接：<a href="https://pan.baidu.com/s/1hYxRi5nw82Au9AKdvo4RhQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1hYxRi5nw82Au9AKdvo4RhQ</a><br>提取码：aooh</p><h2 id="Vue核心技术-Vue-Vue-Router-Vuex-SSR实战精讲"><a href="#Vue核心技术-Vue-Vue-Router-Vuex-SSR实战精讲" class="headerlink" title="Vue核心技术 Vue+Vue-Router+Vuex+SSR实战精讲"></a>Vue核心技术 Vue+Vue-Router+Vuex+SSR实战精讲</h2><p>链接：<a href="https://pan.baidu.com/s/1TKaSoWhLfxdHZifYMwPbzw" target="_blank" rel="noopener">https://pan.baidu.com/s/1TKaSoWhLfxdHZifYMwPbzw</a><br>提取码：rbcy</p><h2 id="Vue2-x实战项目-axios路由vuex"><a href="#Vue2-x实战项目-axios路由vuex" class="headerlink" title="Vue2.x实战项目(axios路由vuex)"></a>Vue2.x实战项目(axios路由vuex)</h2><p>链接：<a href="https://pan.baidu.com/s/1YPYORI7SnHgGo5Gq7zzGsA" target="_blank" rel="noopener">https://pan.baidu.com/s/1YPYORI7SnHgGo5Gq7zzGsA</a><br>提取码：so0h</p><h2 id="MUI-仿豆瓣电影-APP跨平台混编框架"><a href="#MUI-仿豆瓣电影-APP跨平台混编框架" class="headerlink" title="MUI 仿豆瓣电影 APP跨平台混编框架"></a>MUI 仿豆瓣电影 APP跨平台混编框架</h2><p>链接：<a href="https://pan.baidu.com/s/1CErOI6eWLEhf3qJeSALAng" target="_blank" rel="noopener">https://pan.baidu.com/s/1CErOI6eWLEhf3qJeSALAng</a><br>提取码：59qs</p><h2 id="webApp书城整站开发"><a href="#webApp书城整站开发" class="headerlink" title="webApp书城整站开发"></a>webApp书城整站开发</h2><p>链接：<a href="https://pan.baidu.com/s/1nA7CXe_1IYnmQibK3-ETig" target="_blank" rel="noopener">https://pan.baidu.com/s/1nA7CXe_1IYnmQibK3-ETig</a><br>提取码：orul</p><h2 id="Koa2框架从0开始构建预告片网站"><a href="#Koa2框架从0开始构建预告片网站" class="headerlink" title="Koa2框架从0开始构建预告片网站"></a>Koa2框架从0开始构建预告片网站</h2><p>链接：<a href="https://pan.baidu.com/s/1UiwmhLnX1XOCLCAg_rLJwA" target="_blank" rel="noopener">https://pan.baidu.com/s/1UiwmhLnX1XOCLCAg_rLJwA</a><br>提取码：l0kj</p><h2 id="响应式网页制作实战项目"><a href="#响应式网页制作实战项目" class="headerlink" title="响应式网页制作实战项目"></a>响应式网页制作实战项目</h2><p>链接：<a href="https://pan.baidu.com/s/1pHEe8p0b3f-JbQ7A0D1Xhw" target="_blank" rel="noopener">https://pan.baidu.com/s/1pHEe8p0b3f-JbQ7A0D1Xhw</a><br>提取码：7lon</p><h2 id="Ionic2飞速上手的跨平台App开发"><a href="#Ionic2飞速上手的跨平台App开发" class="headerlink" title="Ionic2飞速上手的跨平台App开发"></a>Ionic2飞速上手的跨平台App开发</h2><p>链接：<a href="https://pan.baidu.com/s/1y3psOTyHez06Xfe9Jb-tWw" target="_blank" rel="noopener">https://pan.baidu.com/s/1y3psOTyHez06Xfe9Jb-tWw</a><br>提取码：0eje</p><h2 id="快速上手Ionic3-多平台开发企业级问答社区"><a href="#快速上手Ionic3-多平台开发企业级问答社区" class="headerlink" title="快速上手Ionic3 多平台开发企业级问答社区"></a>快速上手Ionic3 多平台开发企业级问答社区</h2><p>链接：<a href="https://pan.baidu.com/s/1OJhxoef5v6BL9W6MnjNZ3Q" target="_blank" rel="noopener">https://pan.baidu.com/s/1OJhxoef5v6BL9W6MnjNZ3Q</a><br>提取码：souy</p><h2 id="Webpack-React全栈工程架构项目实战精讲"><a href="#Webpack-React全栈工程架构项目实战精讲" class="headerlink" title="Webpack + React全栈工程架构项目实战精讲"></a>Webpack + React全栈工程架构项目实战精讲</h2><p>链接：<a href="https://pan.baidu.com/s/1gUDZ5sDBIGNa_jnJnioWgQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1gUDZ5sDBIGNa_jnJnioWgQ</a><br>提取码：t4zq</p><h2 id="Redux-react-Router-Node-js全栈开发"><a href="#Redux-react-Router-Node-js全栈开发" class="headerlink" title="Redux + react + Router + Node.js全栈开发"></a>Redux + react + Router + Node.js全栈开发</h2><p>链接：<a href="https://pan.baidu.com/s/1aDUmEJIt3USjxwVQrT-Mkg" target="_blank" rel="noopener">https://pan.baidu.com/s/1aDUmEJIt3USjxwVQrT-Mkg</a><br>提取码：olfg</p><h2 id="React16-React-Router4-从零打造企业级电商后台管理系统"><a href="#React16-React-Router4-从零打造企业级电商后台管理系统" class="headerlink" title="React16 + React-Router4 从零打造企业级电商后台管理系统"></a>React16 + React-Router4 从零打造企业级电商后台管理系统</h2><p>链接：<a href="https://pan.baidu.com/s/1Hlykhdh0Nm02SMj1NxDqbw" target="_blank" rel="noopener">https://pan.baidu.com/s/1Hlykhdh0Nm02SMj1NxDqbw</a><br>提取码：m47b</p><h2 id="React-js入门与实战-开发适配PC端及移动端新闻头条平台"><a href="#React-js入门与实战-开发适配PC端及移动端新闻头条平台" class="headerlink" title="React.js入门与实战[开发适配PC端及移动端新闻头条平台]"></a>React.js入门与实战[开发适配PC端及移动端新闻头条平台]</h2><p>链接：<a href="https://pan.baidu.com/s/1GrBYd69i7LmiD6ONIT9zGw" target="_blank" rel="noopener">https://pan.baidu.com/s/1GrBYd69i7LmiD6ONIT9zGw</a><br>提取码：vcjb</p><h2 id="React-高级实战-打造大众点评-WebApp"><a href="#React-高级实战-打造大众点评-WebApp" class="headerlink" title="React 高级实战 打造大众点评 WebApp"></a>React 高级实战 打造大众点评 WebApp</h2><p>链接：<a href="https://pan.baidu.com/s/10aUtKTFc2lA2uLrqCOsv3Q" target="_blank" rel="noopener">https://pan.baidu.com/s/10aUtKTFc2lA2uLrqCOsv3Q</a><br>提取码：f6am</p><h2 id="React-Native开发App狗狗说"><a href="#React-Native开发App狗狗说" class="headerlink" title="React Native开发App狗狗说"></a>React Native开发App狗狗说</h2><p>链接：<a href="https://pan.baidu.com/s/1uZBZsviDWJOAMrb98GDijQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1uZBZsviDWJOAMrb98GDijQ</a><br>提取码：gmtt</p><h2 id="掌握React-Native技术转型随意切换"><a href="#掌握React-Native技术转型随意切换" class="headerlink" title="掌握React Native技术转型随意切换"></a>掌握React Native技术转型随意切换</h2><p>链接：<a href="https://pan.baidu.com/s/1OLf5EHEeCvTkqBbxft_jsA" target="_blank" rel="noopener">https://pan.baidu.com/s/1OLf5EHEeCvTkqBbxft_jsA</a><br>提取码：hjji</p><h2 id="ReactJS"><a href="#ReactJS" class="headerlink" title="ReactJS"></a>ReactJS</h2><p>链接：<a href="https://pan.baidu.com/s/1dNf4fNWLyZ8kTwsOne564Q" target="_blank" rel="noopener">https://pan.baidu.com/s/1dNf4fNWLyZ8kTwsOne564Q</a><br>提取码：hd6o</p><h2 id="实战-贯穿全栈React-Native开发App"><a href="#实战-贯穿全栈React-Native开发App" class="headerlink" title="实战 贯穿全栈React Native开发App"></a>实战 贯穿全栈React Native开发App</h2><p>链接：<a href="https://pan.baidu.com/s/13spZQ3nGBZiiT9dsakEY0g" target="_blank" rel="noopener">https://pan.baidu.com/s/13spZQ3nGBZiiT9dsakEY0g</a><br>提取码：7jqz</p><h2 id="东方要React-native全教程"><a href="#东方要React-native全教程" class="headerlink" title="东方要React-native全教程"></a>东方要React-native全教程</h2><p>链接：<a href="https://pan.baidu.com/s/1k7D5QHrJAae3SyV7fgH_Pg" target="_blank" rel="noopener">https://pan.baidu.com/s/1k7D5QHrJAae3SyV7fgH_Pg</a><br>提取码：zzpb</p><h2 id="React-框架课程套装"><a href="#React-框架课程套装" class="headerlink" title="React 框架课程套装"></a>React 框架课程套装</h2><p>链接：<a href="https://pan.baidu.com/s/1NfYV4qfKdi95GbebH-PNaA" target="_blank" rel="noopener">https://pan.baidu.com/s/1NfYV4qfKdi95GbebH-PNaA</a><br>提取码：s9uv</p><h2 id="React-高级实战大众点评"><a href="#React-高级实战大众点评" class="headerlink" title="React 高级实战大众点评"></a>React 高级实战大众点评</h2><p>链接：<a href="https://pan.baidu.com/s/1vrItn64u49mwXMkG0foItg" target="_blank" rel="noopener">https://pan.baidu.com/s/1vrItn64u49mwXMkG0foItg</a><br>提取码：ceoz</p><h2 id="React-Native-快速开发App一步到位"><a href="#React-Native-快速开发App一步到位" class="headerlink" title="React Native 快速开发App一步到位"></a>React Native 快速开发App一步到位</h2><p>链接：<a href="https://pan.baidu.com/s/1vIaYd68hPC6WZTTGEuLFog" target="_blank" rel="noopener">https://pan.baidu.com/s/1vIaYd68hPC6WZTTGEuLFog</a><br>提取码：jtr9</p><h2 id="彻底征服-React-js"><a href="#彻底征服-React-js" class="headerlink" title="彻底征服 React.js"></a>彻底征服 React.js</h2><p>链接：<a href="https://pan.baidu.com/s/1XwzTYO8U3Z9mN6PIP4gafQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1XwzTYO8U3Z9mN6PIP4gafQ</a><br>提取码：4sp3</p><h2 id="React-js-es6包含实战"><a href="#React-js-es6包含实战" class="headerlink" title="React.js es6包含实战"></a>React.js es6包含实战</h2><p>链接：<a href="https://pan.baidu.com/s/1l4jh_kIOsXEKSaIo4fUzIA" target="_blank" rel="noopener">https://pan.baidu.com/s/1l4jh_kIOsXEKSaIo4fUzIA</a><br>提取码：gdp6</p><h2 id="React-Redux-react-router"><a href="#React-Redux-react-router" class="headerlink" title="React+Redux+react-router"></a>React+Redux+react-router</h2><p>链接：<a href="https://pan.baidu.com/s/1xNPe582fJsMoVObw5_O5Bw" target="_blank" rel="noopener">https://pan.baidu.com/s/1xNPe582fJsMoVObw5_O5Bw</a><br>提取码：yr94</p><h2 id="React-Native小码哥电商"><a href="#React-Native小码哥电商" class="headerlink" title="React Native小码哥电商"></a>React Native小码哥电商</h2><p>链接：<a href="https://pan.baidu.com/s/1ev6I-2qkFZry0ar_LnaZ4A" target="_blank" rel="noopener">https://pan.baidu.com/s/1ev6I-2qkFZry0ar_LnaZ4A</a><br>提取码：96dw</p><h2 id="React-Native快速开发-厕所在哪App"><a href="#React-Native快速开发-厕所在哪App" class="headerlink" title="React Native快速开发-厕所在哪App"></a>React Native快速开发-厕所在哪App</h2><p>链接：<a href="https://pan.baidu.com/s/1cKSNHhNkK0mC6bUOHaIPsg" target="_blank" rel="noopener">https://pan.baidu.com/s/1cKSNHhNkK0mC6bUOHaIPsg</a><br>提取码：u5cl</p><h2 id="React-苹果官网产品展示效果-源码等多个文件"><a href="#React-苹果官网产品展示效果-源码等多个文件" class="headerlink" title="React 苹果官网产品展示效果+源码等多个文件"></a>React 苹果官网产品展示效果+源码等多个文件</h2><p>链接：<a href="https://pan.baidu.com/s/1bPfUcAHH0g8eLFIDqtBNpQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1bPfUcAHH0g8eLFIDqtBNpQ</a><br>提取码：54o2</p><h2 id="Angular-JS-仿拉勾网-WebApp"><a href="#Angular-JS-仿拉勾网-WebApp" class="headerlink" title="Angular JS 仿拉勾网 WebApp"></a>Angular JS 仿拉勾网 WebApp</h2><p>链接：<a href="https://pan.baidu.com/s/1EaEdEkFZMLvI3NNPYodc5A" target="_blank" rel="noopener">https://pan.baidu.com/s/1EaEdEkFZMLvI3NNPYodc5A</a><br>提取码：5tkc</p><h2 id="Angular-打造企业级协作平台"><a href="#Angular-打造企业级协作平台" class="headerlink" title="Angular 打造企业级协作平台"></a>Angular 打造企业级协作平台</h2><p>链接：<a href="https://pan.baidu.com/s/1vEsBm8drlsyYI3vYVT1m7A" target="_blank" rel="noopener">https://pan.baidu.com/s/1vEsBm8drlsyYI3vYVT1m7A</a><br>提取码：vysn</p><h2 id="Angular-4-0从入门到实战-打造股票管理网站"><a href="#Angular-4-0从入门到实战-打造股票管理网站" class="headerlink" title="Angular 4.0从入门到实战 打造股票管理网站"></a>Angular 4.0从入门到实战 打造股票管理网站</h2><p>链接：<a href="https://pan.baidu.com/s/1CKOtDYw25maVbkYDh84qig" target="_blank" rel="noopener">https://pan.baidu.com/s/1CKOtDYw25maVbkYDh84qig</a><br>提取码：kodf</p><h2 id="AngularJS全栈开发知乎"><a href="#AngularJS全栈开发知乎" class="headerlink" title="AngularJS全栈开发知乎"></a>AngularJS全栈开发知乎</h2><p>链接：<a href="https://pan.baidu.com/s/1wUHp0kF1wcDBNpH4qUOJrg" target="_blank" rel="noopener">https://pan.baidu.com/s/1wUHp0kF1wcDBNpH4qUOJrg</a><br>提取码：bbi6</p><h2 id="AngularJS"><a href="#AngularJS" class="headerlink" title="AngularJS"></a>AngularJS</h2><p>链接：<a href="https://pan.baidu.com/s/17cLzs-AkNAqD8eLR9hmeOg" target="_blank" rel="noopener">https://pan.baidu.com/s/17cLzs-AkNAqD8eLR9hmeOg</a><br>提取码：qyxa</p><h2 id="Angular4-视频教程-it营（大地）"><a href="#Angular4-视频教程-it营（大地）" class="headerlink" title="Angular4 视频教程-it营（大地）"></a>Angular4 视频教程-it营（大地）</h2><p>链接：<a href="https://pan.baidu.com/s/1NiwYVNiQORp9s1IPlK8lZw" target="_blank" rel="noopener">https://pan.baidu.com/s/1NiwYVNiQORp9s1IPlK8lZw</a><br>提取码：kxz5</p><h2 id="手把手从0打造电商平台"><a href="#手把手从0打造电商平台" class="headerlink" title="手把手从0打造电商平台"></a>手把手从0打造电商平台</h2><p>链接：<a href="https://pan.baidu.com/s/1o81d8TozMI72MX_IIRCD9w" target="_blank" rel="noopener">https://pan.baidu.com/s/1o81d8TozMI72MX_IIRCD9w</a><br>提取码：bq1y</p><h2 id="ES6-开发电商网站的账号体系-JS-SDK"><a href="#ES6-开发电商网站的账号体系-JS-SDK" class="headerlink" title="ES6+ 开发电商网站的账号体系 JS SDK"></a>ES6+ 开发电商网站的账号体系 JS SDK</h2><p>链接：<a href="https://pan.baidu.com/s/19Tqk4ERUM7m3PdhGDAss7A" target="_blank" rel="noopener">https://pan.baidu.com/s/19Tqk4ERUM7m3PdhGDAss7A</a><br>提取码：12dk</p><h2 id="ES6零基础教学-解析彩票项目"><a href="#ES6零基础教学-解析彩票项目" class="headerlink" title="ES6零基础教学 解析彩票项目"></a>ES6零基础教学 解析彩票项目</h2><p>链接：<a href="https://pan.baidu.com/s/1A7gSrfadxw88lVwiP98Skg" target="_blank" rel="noopener">https://pan.baidu.com/s/1A7gSrfadxw88lVwiP98Skg</a><br>提取码：cdd7</p><h2 id="Node-js入门到企业Web开发中的应用"><a href="#Node-js入门到企业Web开发中的应用" class="headerlink" title="Node.js入门到企业Web开发中的应用"></a>Node.js入门到企业Web开发中的应用</h2><p>链接：<a href="https://pan.baidu.com/s/1Qt252KSqSAIJi-EmKib4PQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1Qt252KSqSAIJi-EmKib4PQ</a><br>提取码：qnrd</p><h2 id="Node-js项目线上服务器部署与发布"><a href="#Node-js项目线上服务器部署与发布" class="headerlink" title="Node.js项目线上服务器部署与发布"></a>Node.js项目线上服务器部署与发布</h2><p>链接：<a href="https://pan.baidu.com/s/1WmKWjLzuuGXbkK9qFnrLeQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1WmKWjLzuuGXbkK9qFnrLeQ</a><br>提取码：c6md</p><h2 id="四大维度解锁-Webpack-3-0-前端工程化"><a href="#四大维度解锁-Webpack-3-0-前端工程化" class="headerlink" title="四大维度解锁 Webpack 3.0 前端工程化"></a>四大维度解锁 Webpack 3.0 前端工程化</h2><p>链接：<a href="https://pan.baidu.com/s/1hXgm27tTZoRBN8HCE7W0Hw" target="_blank" rel="noopener">https://pan.baidu.com/s/1hXgm27tTZoRBN8HCE7W0Hw</a><br>提取码：85yw</p><h2 id="6小时-jQuery开发一个前端应用"><a href="#6小时-jQuery开发一个前端应用" class="headerlink" title="6小时 jQuery开发一个前端应用"></a>6小时 jQuery开发一个前端应用</h2><p>链接：<a href="https://pan.baidu.com/s/1hwO36zQKZp1gKx6mHxKQ_w" target="_blank" rel="noopener">https://pan.baidu.com/s/1hwO36zQKZp1gKx6mHxKQ_w</a><br>提取码：hnao</p><h2 id="HTTP协议原理-实践-Web开发工程师必学"><a href="#HTTP协议原理-实践-Web开发工程师必学" class="headerlink" title="HTTP协议原理+实践 Web开发工程师必学"></a>HTTP协议原理+实践 Web开发工程师必学</h2><p>链接：<a href="https://pan.baidu.com/s/1isAvkjKOMLsWGGNckOXsPw" target="_blank" rel="noopener">https://pan.baidu.com/s/1isAvkjKOMLsWGGNckOXsPw</a><br>提取码：mk98</p><h2 id="微信小程序入门与实战"><a href="#微信小程序入门与实战" class="headerlink" title="微信小程序入门与实战"></a>微信小程序入门与实战</h2><p>链接：<a href="https://pan.baidu.com/s/1EGZ8QG9MJJjJ_3wTu3Wmeg" target="_blank" rel="noopener">https://pan.baidu.com/s/1EGZ8QG9MJJjJ_3wTu3Wmeg</a><br>提取码：rme0</p><h2 id="全新升级-Kotlin系统入门与进阶"><a href="#全新升级-Kotlin系统入门与进阶" class="headerlink" title="全新升级 Kotlin系统入门与进阶"></a>全新升级 Kotlin系统入门与进阶</h2><p>链接：<a href="https://pan.baidu.com/s/1WF6ORDNrg4Mel4HllX0zTg" target="_blank" rel="noopener">https://pan.baidu.com/s/1WF6ORDNrg4Mel4HllX0zTg</a><br>提取码：h4mn</p><h2 id="Kotlin打造完整电商APP-模块化-MVP-主流框架"><a href="#Kotlin打造完整电商APP-模块化-MVP-主流框架" class="headerlink" title="Kotlin打造完整电商APP 模块化 + MVP + 主流框架"></a>Kotlin打造完整电商APP 模块化 + MVP + 主流框架</h2><p>链接：<a href="https://pan.baidu.com/s/1CW-EV7HU70btAOs_v0uMVQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1CW-EV7HU70btAOs_v0uMVQ</a><br>提取码：nrht</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;vue-js高仿饿了么（1-13章全）&quot;&gt;&lt;a href=&quot;#vue-js高仿饿了么（1-13章全）&quot; class=&quot;headerlink&quot; title=&quot;vue.js高仿饿了么（1-13章全）&quot;&gt;&lt;/a&gt;vue.js高仿饿了么（1-13章全）&lt;/h2&gt;&lt;p&gt;链接
      
    
    </summary>
    
    
      <category term="前端" scheme="http://www.barebear.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://www.barebear.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="教程" scheme="http://www.barebear.cn/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>前端面试之简历篇</title>
    <link href="http://www.barebear.cn/2020/02/08/resume/"/>
    <id>http://www.barebear.cn/2020/02/08/resume/</id>
    <published>2020-02-08T06:46:31.000Z</published>
    <updated>2020-02-10T02:33:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-前期准备"><a href="#1-前期准备" class="headerlink" title="1.前期准备"></a>1.前期准备</h2><blockquote><p>投其所好</p></blockquote><p>一般公司招聘都会有一些硬性要求，比如工作经历、学历、技术栈、岗位要求等等。<br>因此应聘之前，一方面，要花时间将自己力所能及的盲点覆盖到，一方面，找对合适的公司进行投递。盲目的海投只会让简历石沉大海。也会打击你的信心。</p><p>下面从网上整理了两份的不同级别招聘需求，供大家参考<br><strong>中级前端工程师</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">岗位职责：</span><br><span class="line">1、负责WEB端开发工作，与后端工程师配合，为项目提供最优化的技术解决方案；</span><br><span class="line">2、开发前端代码，实现产品的页面交互和数据逻辑展示；</span><br><span class="line">3、与产品讨论确定，并实现良好体验的交互效果</span><br><span class="line">4、解决兼容性问题，优化前端性能，改善用户体验；</span><br><span class="line">5、统一可重用组件，规范前端模块化开发。</span><br><span class="line">任职要求：</span><br><span class="line">1. 一年及以上相关工作经验</span><br><span class="line">2. 熟练使用HTML，CSS，Javascript等前端技术，熟练处理浏览器兼容问题；</span><br><span class="line">3. 熟悉react、vue、Angular等至少一种框架，有实际项目经验，能独立开发高质量组件，能够封装一些常用的函数类库</span><br><span class="line">4. 熟练使用Webpack，Gulp等前端构建工具</span><br><span class="line">5. 代码编写规范，熟悉W3C标准，熟悉前端性能优化并能熟练运用；</span><br><span class="line">6. 有较强的团队合作能力与独立解决技术问题的能力。</span><br><span class="line">7. 熟练使用git或者svn版本管理工具；</span><br><span class="line">8. 加分项：有优秀的开源作品，优秀技术博客（如果有，请贴上地址，如github，npm等地址）</span><br></pre></td></tr></table></figure><p><strong>高级前端工程师</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">岗位职责： </span><br><span class="line">1. 构建可视化研发平台，优化前端开发方式及协作流程，创建技术标准及规范，用智能化方式提高前端研发效能，逐步实现‘无代码研发’</span><br><span class="line">2. 抽象业务问题，管控业务需求，主导平台型业务的技术架构设计，推动数据化运营模式升级</span><br><span class="line">3. 为组员的技术成长制定目标、计划并帮助实施，提升整体技术水平</span><br><span class="line">岗位要求： </span><br><span class="line">1. 精通各种Web前端技术（HTML&#x2F;CSS&#x2F;Javascript等)，熟悉网络协议（HTTP&#x2F;SSL），熟悉常见安全问题和对策</span><br><span class="line">2. 精通Babel&#x2F;Webpack，对AST有深度理解</span><br><span class="line">3. 熟悉BaaS&#x2F;FaaS，对serverless有深刻理解</span><br><span class="line">4. 对前端事件流、数据流有深度理解，具备抽象视图层与数据层交互协议的能力，有复杂可视化搭建平台的研发经验优先</span><br><span class="line">5. 具备跨端研发能力，有前端渲染容器实现和沙箱隔离相关实践经验</span><br><span class="line">6. 个性乐观开朗，逻辑性强，善于和各种背景的人合作，有丰富的项目管理、团队管理经验。</span><br></pre></td></tr></table></figure><h2 id="2-关于内容"><a href="#2-关于内容" class="headerlink" title="2.关于内容"></a>2.关于内容</h2><blockquote><p>突出重点</p></blockquote><p>一般前端简历包括以下的几个部分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">基础信息</span><br><span class="line">职业技能</span><br><span class="line">工作经历</span><br><span class="line">项目经验</span><br><span class="line">自我评价(选填，别超过120字)</span><br></pre></td></tr></table></figure><p>很多同学都一上来就是一片洋洋洒洒的论文。只要会一点的知识点、专业术语都恨不得都往上搬，显得很饱满。注意，简历不是论文，<strong>没有字数要求</strong>。 要突出重点，对自己擅长的领域着重描述一下。这几块里面，其中面试官一般最关注是<code>项目经验</code>，所以大家要花点心思在这里进行一番“吹逼”。</p><p><strong>关于格式</strong><br>投递简历的时候一定要<code>word</code> 或者 <code>pdf</code>格式的，有些同学喜欢制作网页版简历，虽然看着比较酷炫，但是初次筛选的都是HR，并不会看源码，整理起来也比较麻烦。所以<code>word</code> 和 <code>pdf</code> 格式的载体足够了，多花精力放在简历内容上。</p><h3 id="基础信息"><a href="#基础信息" class="headerlink" title="基础信息"></a>基础信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">姓名、性别、年纪、手机、邮箱</span><br><span class="line">工作经验、应聘职位、期望待遇（选填）</span><br><span class="line">博客地址（选填）、</span><br><span class="line">GitHub 地址（选填，没作品不填）</span><br><span class="line">学校（选填）</span><br><span class="line">学历</span><br><span class="line">专业</span><br></pre></td></tr></table></figure><h3 id="职业技能"><a href="#职业技能" class="headerlink" title="职业技能"></a>职业技能</h3><p>这一块基本千篇一律，为什么会这样呢，因为大家都习惯性的把前端相关技术的都罗列了一遍。没有重点。</p><p>反面教材：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1、熟练使用HTML&#x2F;HTML5、CSS&#x2F;CSS3、js进行合理的PC端和移动端网页布局与交互；</span><br><span class="line">2、熟悉web客户端各主流浏览器之间的兼容性，熟悉响应式布局；</span><br><span class="line">3、掌握JavaScript、DOM等前端技术；</span><br><span class="line">4、熟练运用 ajax，jsonp 技术与后台处理数据，熟悉浏览器跟服务器交互机制； </span><br><span class="line">5、熟悉 webpack自动化构建工具；</span><br><span class="line">6、熟练使用 sass、less、stylus预处理器执行编译 css； </span><br><span class="line">7、熟练使用jQuery、MUI等框架；</span><br><span class="line">8、熟练使用bootstrap、swiper等辅助工具；  </span><br><span class="line">9、熟练使用vue、vue-cli，能基于 vue（2.0）使用 mintUI 以及 ElementUI 开发项目；</span><br><span class="line">10、熟练微信小程序开发，支付宝小程序开发；</span><br><span class="line">11、了解PHP等后台编程语言，有前后端分离开发经验；</span><br><span class="line">12、了解MySQL数据库使用、对前后端合作开发有一定的认知；</span><br><span class="line">13、可以熟练使用Git、SVN进行项目管理。</span><br><span class="line">14、使用HBuilder进行软件的打包发布、配置权限</span><br><span class="line">15、对svg、canvas有一定了解；</span><br><span class="line">16、了解界面UI设计、页面架构与布局，具备良好的用户体验意识；</span><br><span class="line">17、了解部分图形图像软件（如Photoshop），对从设计转换为产品有一定的认识，可以进行简单的切图操作。</span><br></pre></td></tr></table></figure><p>一般情况下面试官都会自动无视<strong>了解</strong>(除非是应届生)，所以不如花更多的精力在<strong>熟悉</strong>和<strong>精通</strong>上面</p><p>正面教材：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 1、2、3</span><br><span class="line">熟练使用各种 web 前端技术,包括 HTML(5)&#x2F;CSS(3)&#x2F;JS 等,能快速还原 PSD 源文件,解决各类浏览器兼容性。</span><br><span class="line">&#x2F;&#x2F; 7、8、9</span><br><span class="line">熟练使用 vue 框架快速的构建项目,以及第三方库(mintUI、ElementUI、bootstrap、jQuery、MUI)</span><br><span class="line">&#x2F;&#x2F; 5、6</span><br><span class="line">熟悉webpack自动化构建工具，熟练使用 sass、less、stylus预处理器</span><br><span class="line">&#x2F;&#x2F; 10</span><br><span class="line">熟练微信小程序开发，支付宝小程序开发</span><br><span class="line">&#x2F;&#x2F; 13</span><br><span class="line">熟练使用Git、SVN进行项目管理，制作过一个版本管理工具(https:&#x2F;&#x2F;github.com&#x2F;xxxx&#x2F;xxx)</span><br></pre></td></tr></table></figure><p>前端技术现在有NodeJS、H5、Hybrid、架构和业务研发等方向，不要什么都全栈不易，尽量将内容聚焦于自己最擅长的领域，扬长避短，以此来引导面试官来问你擅长的部分。</p><blockquote><p>不关注：证书、四六级、了解的编程语言（如果不精通就不要写）、自我评价。</p></blockquote><h3 id="工作经历"><a href="#工作经历" class="headerlink" title="工作经历"></a>工作经历</h3><p>不要出现和前端不相关的工作经历。<br>内容包含：公司、工作时间、工作职位、工作内容、公司介绍（选填，公司性质、规模、行业，不要出现大段描述）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">XXX公司 2019.01.01~2020.01.01 前端负责人</span><br><span class="line">工作内容</span><br><span class="line">1. 招聘，培养新人</span><br><span class="line">2. 制定前端规范</span><br><span class="line">3. 任务管理，团队管理</span><br><span class="line">4. 前端WIKI维护</span><br><span class="line">5. 混合开发框架优化</span><br><span class="line">6. 金融APP开发</span><br><span class="line">7. 相关管理端开发</span><br><span class="line">8. 协助组员解决各类问题</span><br><span class="line">9. 支撑产品，评审产品可行性</span><br><span class="line">10. 支撑后端，解答前端相关问题</span><br></pre></td></tr></table></figure><h3 id="项目经验"><a href="#项目经验" class="headerlink" title="项目经验"></a>项目经验</h3><blockquote><p>千万不要把所有的项目罗列一遍，一般不同类型的三个项目足够了，要经得起推敲，表现出亮点。</p></blockquote><p>现在招一个能干活的人不难，难的是招一个能解决问题的。是不是能够分辨真实需求，合理制定技术方案，推动项目进度，产出结果，复盘问题很重要。所以，应对这每个环节所需的技能，最好在简历里有所表现。具体说就是描述每个项目时，不仅要有背景、过程，还要有你为这个项目带来的结果。</p><p>一般项目基本都会包含组件、UI交互、脚手架、业务模块、沟通协作。<br>如果是组件，要知道设计思路。<br>如果是UI交互，要说明这样的交互体验更好的原因。<br>如果是脚手架，讲原理和适用场景。<br>如果是业务模块，讲一下难点和核心代码。<br>如果是沟通协作，讲一下方式方法。</p><p>反面教材1：<br><img src="https://tva1.sinaimg.cn/large/0082zybply1gbp9kjcihij30im042q37.jpg" alt=""><br>谁也不知道你都做了什么，用什么做的，结果如何，完成得怎么样，没有看到具体成果</p><p>反面教材2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">BI后台系统</span><br><span class="line"></span><br><span class="line">项目介绍:使用vue-cli+element来构建BI后台,并通过axios来请求数据。</span><br><span class="line"></span><br><span class="line">主要职责: 独立研发BI系统,通过系统来请求后台的模板、工作表、数据转换的数据请求以及用 vue 的 echart 插件和组件功能来显示图表插件并能动态编辑图表数据。</span><br></pre></td></tr></table></figure><p>有结果，但是看不出解决了什么问题，没有可量化的指标，没法凸显你的价值</p><p>正面教材：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">BI后台系统</span><br><span class="line"></span><br><span class="line">项目介绍: 提供商品&amp;品牌等各项指标报表，运营活动转化率，用户画像采集等数据可视化功能，实现智能化运营</span><br><span class="line">项目职责:</span><br><span class="line">1.独立构建SPA脚手架，支持不同环境加载不同CDN资源</span><br><span class="line">2.项目支持PC端和IPAD端的自适应布局，完成统一的RESTFUL的标准化接口</span><br><span class="line">3.进行二次业务组件，将常规的查询、自定义表单等封装成公共组件</span><br><span class="line">4.完成动态编辑图表等五个模块，支持PDF下载</span><br><span class="line">项目业绩: </span><br><span class="line">1.通过vue-cli3进行了打包依赖优化，节省了大概20%的编译时间。</span><br><span class="line">2.利用elementUI封装的业务组件不仅统一了各个业务模块的UI交互，而且减少了30%的开发时间。大大减低了研发成本。</span><br><span class="line">3.通过使用YAPI以及自定义数据mock方案，克服了项目开发前期的数据联调困难，极大得提高了开发效率。</span><br><span class="line">4.基于echart完成的动态报表组件，实现了不同的报表需求随时动态编辑，快速上线，不再需要每次重新开发和发版。</span><br><span class="line">5.最终基于这个项目整理出了标准化的后台模板，并在其他业务线进行了推广。</span><br></pre></td></tr></table></figure><blockquote><p>不要堆砌一大堆的专业名称，HR表示看不懂，尽量把成果具体化，数字化</p></blockquote><p><strong>请遵循STAR法则</strong><br>Situation（情景）: 工作背景是什么<br>Task（任务）我负责做什么<br>Action（行动）: 我做了什么<br>Result（结果）: 结果怎么样(最好可以量化)</p><h2 id="3-典型问题"><a href="#3-典型问题" class="headerlink" title="3.典型问题"></a>3.典型问题</h2><blockquote><p>谦虚谨慎</p></blockquote><p>此外面试中还会问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 哪个项目让你最满意、代表你的最高水平？如何做的？</span><br><span class="line">2. 让你印象最深刻的一个（技术）难点，害的你搞了很久，最后怎么解的，有什么心得？</span><br><span class="line">3. 你能给我们团队或者产品带来什么？</span><br></pre></td></tr></table></figure><p>这些问题不是硬性的，主要看平时是不是除了技术还琢磨点别的，特别是产品基本形态成型的基础上，你如何试错、创新、提效、求精、找方向，这种情况下，只具备技术能力已经远不够了，而更需要辩证的执行。</p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>最后，简历一定要实事求是，千万不能弄虚作假，这不仅关系到对你专业能力的评估，更是对人品的考验，即便能力再强，被发现后，不仅可能丢掉到手的offer，甚至臭名远扬。</p><blockquote><p>ps: 如果有简历和面试相关的疑惑可以联系我：QQ 504397517</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-前期准备&quot;&gt;&lt;a href=&quot;#1-前期准备&quot; class=&quot;headerlink&quot; title=&quot;1.前期准备&quot;&gt;&lt;/a&gt;1.前期准备&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;投其所好&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一般公司招聘都会有一些硬性要求
      
    
    </summary>
    
    
      <category term="其他" scheme="http://www.barebear.cn/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="简历" scheme="http://www.barebear.cn/tags/%E7%AE%80%E5%8E%86/"/>
    
      <category term="前端" scheme="http://www.barebear.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>前端资源分享</title>
    <link href="http://www.barebear.cn/2020/02/05/front-end-resources/"/>
    <id>http://www.barebear.cn/2020/02/05/front-end-resources/</id>
    <published>2020-02-05T14:44:48.000Z</published>
    <updated>2020-02-06T14:24:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="front-end-resources"><a href="#front-end-resources" class="headerlink" title="front-end-resources"></a>front-end-resources</h1><h2 id="一、团队组织"><a href="#一、团队组织" class="headerlink" title="一、团队组织"></a>一、团队组织</h2><table><thead><tr><th>网站</th><th>说明</th></tr></thead><tbody><tr><td><a href="http://www.alloyteam.com/" target="_blank" rel="noopener">腾讯 AlloyTeam 团队</a></td><td>腾讯Web前端团队，代表作品WebQQ，致力于前端技术的研究</td></tr><tr><td><a href="https://isux.tencent.com/" target="_blank" rel="noopener">ISUX</a></td><td>腾讯社交用户体验设计，简称ISUX，腾讯设计团队网站</td></tr><tr><td><a href="http://cdc.tencent.com/" target="_blank" rel="noopener">CDC</a></td><td>腾讯用户研究与体验设计部</td></tr><tr><td><a href="http://fex.baidu.com/" target="_blank" rel="noopener">FEX</a></td><td>百度Web前端研发部出品</td></tr><tr><td><a href="http://taobaofed.org/" target="_blank" rel="noopener">淘宝前端团队（FED）</a></td><td>用技术为体验提供无限可能</td></tr><tr><td><a href="https://aotu.io/" target="_blank" rel="noopener">凹凸实验室</a></td><td>京东用户体验设计部出品</td></tr><tr><td><a href="https://75team.com/" target="_blank" rel="noopener">奇舞团</a></td><td>奇虎360旗下前端开发团队出品</td></tr><tr><td><a href="http://www.aliued.com/" target="_blank" rel="noopener">阿里巴巴国际UED团队</a></td><td>在更新的屏幕里创造出更好的产品和更优的体验</td></tr><tr><td><a href="http://efe.baidu.com/" target="_blank" rel="noopener">EFE</a></td><td>由百度多个遵循统一技术体系的前端团队所组成</td></tr><tr><td><a href="http://ued.baidu.com/" target="_blank" rel="noopener">UXC</a></td><td>覆盖了百度85%以上的产品体验设计</td></tr></tbody></table><h2 id="二、开发社区"><a href="#二、开发社区" class="headerlink" title="二、开发社区"></a>二、开发社区</h2><table><thead><tr><th>网站</th><th>说明</th></tr></thead><tbody><tr><td><a href="http://stackoverflow.com/" target="_blank" rel="noopener">StackOverflow</a></td><td>加入世界上最大的开发者社区</td></tr><tr><td><a href="https://segmentfault.com/" target="_blank" rel="noopener">SegmentFault</a></td><td>中文领域最大的技术问答交流社区平台</td></tr><tr><td><a href="http://www.zhihu.com/" target="_blank" rel="noopener">知乎</a></td><td>中文互联网最大的知识分享和社交平台</td></tr><tr><td><a href="http://www.oschina.net/" target="_blank" rel="noopener">开源中国</a></td><td>目前国内最大的开源技术社区</td></tr><tr><td><a href="https://www.w3ctech.com/" target="_blank" rel="noopener">w3ctech</a></td><td>中国最大的前端技术社区</td></tr><tr><td><a href="https://juejin.im/" target="_blank" rel="noopener">掘金</a></td><td>一个帮助开发者成长的社区</td></tr><tr><td><a href="https://www.v2ex.com/" target="_blank" rel="noopener">V2EX</a></td><td>创意工作者们的社区</td></tr><tr><td><a href="https://www.cnblogs.com/" target="_blank" rel="noopener">博客园</a></td><td>一个面向开发者的知识分享社区</td></tr><tr><td><a href="https://cnodejs.org/" target="_blank" rel="noopener">CNode</a></td><td>国内最大最具影响力的 Node.js 开源技术社区</td></tr><tr><td><a href="https://ruby-china.org/" target="_blank" rel="noopener">Ruby China</a></td><td>由众多爱好者共同维护的 Ruby 中文社区</td></tr></tbody></table><h2 id="三、前端门户"><a href="#三、前端门户" class="headerlink" title="三、前端门户"></a>三、前端门户</h2><table><thead><tr><th>网站</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://www.qdfuns.com/" target="_blank" rel="noopener">前端网</a></td><td>一个专注于Web前端开发行业的综合性门户网站</td></tr><tr><td><a href="http://www.daqianduan.com/" target="_blank" rel="noopener">大前端</a></td><td>一个集前端开发和Wordpress内容为一体的双轨独立网站</td></tr></tbody></table><h2 id="四、前端大牛"><a href="#四、前端大牛" class="headerlink" title="四、前端大牛"></a>四、前端大牛</h2><table><thead><tr><th>网站</th><th>说明</th></tr></thead><tbody><tr><td><a href="http://www.alloyteam.com/" target="_blank" rel="noopener">AlloyTeam</a></td><td>腾讯Web前端团队</td></tr><tr><td><a href="http://taobaofed.org/" target="_blank" rel="noopener">taobaofed</a></td><td>淘宝前端团队（FED）</td></tr><tr><td><a href="https://alinode.aliyun.com/blog" target="_blank" rel="noopener">alinode团队博客</a></td><td>基于 Node 运行时的应用性能管理解决方案</td></tr><tr><td><a href="http://www.zhangxinxu.com/" target="_blank" rel="noopener">鑫空间-鑫生活</a></td><td><strong>张鑫旭</strong>,上海阅文信息技术有限公司用户体验设计师</td></tr><tr><td><a href="https://www.liaoxuefeng.com/" target="_blank" rel="noopener">廖雪峰的官方网站</a></td><td><strong>廖雪峰</strong>，著有《Spring 2.0核心技术与最佳实践》一书。</td></tr><tr><td><a href="http://www.ruanyifeng.com/home.html" target="_blank" rel="noopener">阮一峰的个人网站</a></td><td><strong>阮一峰</strong>,2014年出版《ECMAScript 6入门》</td></tr><tr><td><a href="http://bonsaiden.github.io/JavaScript-Garden/zh/" target="_blank" rel="noopener">JavaScript 秘密花园</a></td><td><strong>三生石上</strong></td></tr><tr><td><a href="http://jiongks.name/" target="_blank" rel="noopener">囧克斯</a></td><td>勾三股四</td></tr><tr><td><a href="https://www.w3cplus.com/" target="_blank" rel="noopener">w3cplus</a></td><td><strong>大漠</strong>，就职淘宝，CSS3、CSS处理器和Drupal中国布道者。2014年出版《图解CSS3：核心技术与案例实战》。</td></tr><tr><td><a href="https://coolshell.cn/" target="_blank" rel="noopener">酷 壳 – COOLSHELL</a></td><td><strong>陈皓</strong>，就职经历Amazon中国任研发经理；阿里北京研发中心、商家业务部资深专家；阿里核心系统和阿里云ECS相关的虚拟化平台的开发工作。</td></tr><tr><td><a href="http://html5ify.com/" target="_blank" rel="noopener">html5ify</a></td><td><strong>朴灵</strong>，阿里数据产品部资深工程师。致力前端、数据可视化、Node等领域</td></tr><tr><td><a href="http://www.cnblogs.com/rubylouvre" target="_blank" rel="noopener">Ruby’s Louvre</a></td><td><strong>钟钦成</strong>,网名<strong>司徒正美</strong>,著名的JavaScript专家,去哪儿网前端架构师</td></tr><tr><td><a href="http://blog.cssforest.org/" target="_blank" rel="noopener">CSS森林</a></td><td><strong>GhostZhang</strong>,微信支付设计中心，负责重构前端团队的管理工作。</td></tr><tr><td><a href="http://www.99css.com/" target="_blank" rel="noopener">99css</a></td><td><strong>ytzong</strong>,就职经历139 邮箱前端工程师；腾讯 ISUX 前端工程师； iOS 独立开发者</td></tr><tr><td><a href="https://s5s5.me/" target="_blank" rel="noopener">[米随随] s5s5</a></td><td><strong>刘小超</strong>，现在就职于 Tencent ISUX ，岗位 UI Engineer，主要从事UI开发方面工作。</td></tr><tr><td><a href="https://www.barretlee.com/" target="_blank" rel="noopener">小胡子哥的个人网站</a></td><td><strong>Barret李靖</strong>，阿里巴巴职员</td></tr><tr><td><a href="https://imququ.com/" target="_blank" rel="noopener">Jerry Qu</a></td><td><strong>屈光宇</strong>，奇虎 360，前端开发</td></tr><tr><td><a href="http://evilcos.me/" target="_blank" rel="noopener">EVILCOS</a></td><td><strong>余弦</strong>，知道创宇</td></tr><tr><td><a href="http://www.css88.com/" target="_blank" rel="noopener">WEB前端开发</a></td><td><strong>愚人码头</strong>，内容涵盖Web前端开发原创教程、技术中文文档、前端工具、资源分享、疑难解答、最新技术、招聘信息等</td></tr><tr><td><a href="http://www.jobbole.com/" target="_blank" rel="noopener">伯乐在线</a></td><td><strong>黄余粮</strong>，<strong>黄利民</strong></td></tr><tr><td><a href="https://aimingoo.github.io/" target="_blank" rel="noopener">Aimingoo’s Blog</a></td><td><strong>周爱民</strong>，一名程序员、架构师，就职物联网公司（ruff.io）</td></tr><tr><td><a href="http://justjavac.com/" target="_blank" rel="noopener">justjavac(迷渡)</a></td><td>justjavac，天津维基科技有限公司研发工程师</td></tr><tr><td><a href="http://beforweb.com/" target="_blank" rel="noopener">Be For Web</a></td><td>C7210，交互设计师、UX热爱者、译者</td></tr><tr><td><a href="http://jinlong.github.io/" target="_blank" rel="noopener">Alon’s Blog</a></td><td>Alon Zhang，互联网资讯博主</td></tr><tr><td><a href="http://www.qiqiboy.com/" target="_blank" rel="noopener">I’m qiqiboy!</a></td><td>qiqiboy，wordpress开发、web前端</td></tr></tbody></table><h2 id="五、活跃微博"><a href="#五、活跃微博" class="headerlink" title="五、活跃微博"></a>五、活跃微博</h2><table><thead><tr><th>网站</th><th>说明</th></tr></thead><tbody><tr><td><a href="http://weibo.com/xitucircle" target="_blank" rel="noopener">掘金技术社区</a></td><td>挖掘最优质的互联网技术</td></tr><tr><td><a href="https://weibo.com/w3cchina?is_hot=1" target="_blank" rel="noopener">w3c中国</a></td><td>万维网联盟中国办事处官方微博</td></tr></tbody></table><h2 id="六、书籍推荐"><a href="#六、书籍推荐" class="headerlink" title="六、书籍推荐"></a>六、书籍推荐</h2><table><thead><tr><th>书籍</th><th>作者</th><th>译者</th></tr></thead><tbody><tr><td>《Web标准设计》</td><td>刘杰（嗷嗷）</td><td></td></tr><tr><td>《大巧不工 Web前端设计修炼之道》</td><td>赖定清 / 林坚</td><td></td></tr><tr><td>《高性能网站建设指南 前端工程师技能精髓》</td><td>Steve Souders</td><td>刘彦博</td></tr><tr><td>《高性能网站建设进阶指南 Web开发者性能优化最佳实践》</td><td>Steve Souders</td><td>口碑网前端团队</td></tr><tr><td>《Web站点优化》</td><td>金</td><td></td></tr><tr><td>《Node.js开发指南》</td><td>郭家寶（BYVoid）</td><td></td></tr><tr><td>《JavaScript高级程序设计（第3版）》</td><td>[美] 尼古拉斯·泽卡斯</td><td>李松峰 / 曹力</td></tr><tr><td>《JavaScript权威指南》</td><td>弗拉纳根</td><td>李强</td></tr><tr><td>《JavaScript语言精粹》</td><td>Douglas Crockford</td><td>赵泽欣/ 鄢学鹍</td></tr><tr><td>《深入浅出Node.js》</td><td>朴灵</td><td></td></tr><tr><td>《CSS开发王》</td><td>张亚飞</td><td></td></tr><tr><td>《JavaScript DOM编程艺术 （第2版）》</td><td>[英] Jeremy Keith / [加] Jeffrey Sambells</td><td>杨涛 / 王建桥 / 杨晓云 等</td></tr></tbody></table><h2 id="七、前端教程"><a href="#七、前端教程" class="headerlink" title="七、前端教程"></a>七、前端教程</h2><table><thead><tr><th>网站</th><th>说明</th></tr></thead><tbody><tr><td><a href="http://www.chinaw3c.org/" target="_blank" rel="noopener">W3C中国</a></td><td>Web技术领域最具权威和影响力的国际中立性技术标准机构</td></tr><tr><td><a href="https://developer.mozilla.org/" target="_blank" rel="noopener">MDN Web 文档</a></td><td>学习 Web 开发的最佳实践</td></tr><tr><td><a href="https://www.w3cschool.cn/" target="_blank" rel="noopener">w3cschool</a></td><td>学编程，从w3cschool开始</td></tr><tr><td><a href="https://msdn.microsoft.com/zh-cn/library/aa155073.aspx" target="_blank" rel="noopener">Microsoft Web 开发</a></td><td>Developer Network</td></tr></tbody></table><h2 id="八、HTML-5"><a href="#八、HTML-5" class="headerlink" title="八、HTML(5)"></a>八、HTML(5)</h2><table><thead><tr><th>网站</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML" target="_blank" rel="noopener">HTML(超文本标记语言)MDN</a></td><td>MDN Web 文档</td></tr><tr><td><a href="http://tgideas.qq.com/webplat/info/news_version3/804/7104/7106/m5723/201506/354489.shtml" target="_blank" rel="noopener">后HTML5时代Ⅰ</a></td><td>TGideas 万技师</td></tr><tr><td><a href="http://tgideas.qq.com/webplat/info/news_version3/804/7104/7106/m5723/201506/355023.shtml" target="_blank" rel="noopener">后HTML5时代Ⅱ</a></td><td>TGideas 鬼爪手</td></tr><tr><td><a href="https://zhuanlan.zhihu.com/linshuai?topic=HTML5" target="_blank" rel="noopener">HTML5 进阶系列</a></td><td>爱前端 林鑫</td></tr><tr><td><a href="http://geek.csdn.net/news/detail/209887" target="_blank" rel="noopener">匠心打造canvas签名组件</a></td><td>翟灿东，网名路易斯，平安健康前端工程师。</td></tr><tr><td><a href="https://www.zhihu.com/question/24398907" target="_blank" rel="noopener">HTML5 有哪些让你惊艳的 demo？</a></td><td>知乎 关注者 8K</td></tr><tr><td><a href="http://supperjet.github.io/tags/canvas/" target="_blank" rel="noopener">一只会飞的鱼</a></td><td>每周一点canvas动画</td></tr></tbody></table><h2 id="九、CSS-3"><a href="#九、CSS-3" class="headerlink" title="九、CSS(3)"></a>九、CSS(3)</h2><table><thead><tr><th>网站</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://tympanus.net/codrops/css_reference/" target="_blank" rel="noopener">CSS Reference</a></td><td>从基础知识中学习CSS的所有重要属性</td></tr><tr><td><a href="https://zhuanlan.zhihu.com/c_29157201?topic=CSS" target="_blank" rel="noopener">You Don’t Know CSS</a></td><td>杨健</td></tr><tr><td><a href="https://link.juejin.im/?target=http://www.cnblogs.com/zhuzhenwei918/p/6120294.html">强大的css3</a></td><td>Wayne Zhu</td></tr><tr><td><a href="https://www.ibm.com/developerworks/cn/web/1202_zhouxiang_css3/" target="_blank" rel="noopener">深入了解 CSS3 新特性</a></td><td>周 翔</td></tr><tr><td><a href="https://link.juejin.im/?target=http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">Flex 布局教程：语法篇</a></td><td>阮一峰</td></tr><tr><td><a href="https://link.juejin.im/?target=http://www.ruanyifeng.com/blog/2015/07/flex-examples.html">Flex 布局教程：实例篇</a></td><td>阮一峰</td></tr><tr><td><a href="http://www.cnblogs.com/nzbin/archive/2017/08/06/7073601.html" target="_blank" rel="noopener">如何编写轻量级 CSS 框架</a></td><td>叙帝利</td></tr><tr><td><a href="https://github.com/AllThingsSmitty/css-protips/tree/master/translations/zh-CN#table-of-contents" target="_blank" rel="noopener">CSS 专业技巧</a></td><td>一个帮你提升 CSS 技巧的收藏集</td></tr><tr><td><a href="http://www.cnblogs.com/aaronjs/p/4744014.html" target="_blank" rel="noopener">CSS3技术-雪碧图自适应缩放与精灵动画方案</a></td><td>慕课网 艾伦 Aaron</td></tr><tr><td><a href="http://imweb.io/topic/5643850eed18cc424277050e" target="_blank" rel="noopener">搞定这些疑难杂症，向css3动画说yes</a></td><td>IMWeb 结一</td></tr><tr><td><a href="http://yincheng.site/using-html-css-instead-of-js" target="_blank" rel="noopener">Effective前端1：能使用html/css解决的问题就不要使用JS</a></td><td>会编程的银猪</td></tr><tr><td><a href="http://www.imweb.io/topic/55e32fd5771670e207a16bb9" target="_blank" rel="noopener">前端如何呼风唤雨</a></td><td>IMWeb coverguo</td></tr><tr><td><a href="https://juejin.im/post/591873170ce4630069f3013d" target="_blank" rel="noopener">默认的checkbox、input、radio太丑了？我来教你改变使用纯css3改写的带动画的默认样式</a></td><td>掘金 sunshine小小倩</td></tr><tr><td><a href="http://www.cnblogs.com/xiaoloulan/p/5801663.html" target="_blank" rel="noopener">CSS性能分析，如何优化CSS提高性能</a></td><td>博客园 楼兰小骑士</td></tr><tr><td><a href="https://segmentfault.com/a/1190000011354975" target="_blank" rel="noopener">CSS 黑魔法小技巧，让你少写不必要的JS，代码更优雅</a></td><td>思否 微醺岁月</td></tr><tr><td><a href="https://css-tricks.com/examples/ShapesOfCSS/" target="_blank" rel="noopener">CSS-Tricks</a></td><td>The Shapes of CSS</td></tr></tbody></table><h2 id="十、ECMAScript"><a href="#十、ECMAScript" class="headerlink" title="十、ECMAScript"></a>十、ECMAScript</h2><table><thead><tr><th>网站</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://leanpub.com/understandinges6/read" target="_blank" rel="noopener">Understanding ECMAScript 6</a></td><td>Nicholas C. Zakas</td></tr><tr><td><a href="http://es6-org.github.io/exploring-es6/" target="_blank" rel="noopener">探索 ES6</a></td><td>翻译自《 Exploring ES6 》</td></tr><tr><td><a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">ECMAScript 6 入门</a></td><td>阮一峰</td></tr><tr><td><a href="http://yanhaijing.com/es5/#about" target="_blank" rel="noopener">ES5合集</a></td><td>颜海镜</td></tr><tr><td><a href="https://link.juejin.im/?target=http://taobaofed.org/blog/2016/07/22/es6-basics/">ES6 你可能不知道的事 - 基础篇</a></td><td>化辰，淘宝前端团队（FED）</td></tr><tr><td><a href="https://link.juejin.im/?target=http://taobaofed.org/blog/2016/11/03/es6-advanced/">ES6 你可能不知道的事 - 进阶篇</a></td><td>化辰，淘宝前端团队（FED）</td></tr></tbody></table><h2 id="十一、JavaScript"><a href="#十一、JavaScript" class="headerlink" title="十一、JavaScript"></a>十一、JavaScript</h2><table><thead><tr><th>网站</th><th>说明</th></tr></thead><tbody><tr><td><a href="http://javascript.ruanyifeng.com/" target="_blank" rel="noopener">JavaScript 标准参考教程（alpha）</a></td><td>阮一峰</td></tr><tr><td><a href="http://bonsaiden.github.io/JavaScript-Garden/zh/" target="_blank" rel="noopener">JavaScript 秘密花园</a></td><td>三生石上 中文翻译</td></tr><tr><td><a href="http://liubin.org/promises-book/" target="_blank" rel="noopener">JavaScript Promise迷你书（中文版）</a></td><td>原著：azu / 翻译：liubin、kaku、honnkyou</td></tr><tr><td><a href="https://legacy.gitbook.com/book/llh911001/mostly-adequate-guide-chinese/details" target="_blank" rel="noopener">JS 函数式编程指南</a></td><td>Linghao Li</td></tr><tr><td><a href="https://github.com/stone0090/javascript-lessons" target="_blank" rel="noopener">JavaScript 闯关记</a></td><td>stone0090</td></tr></tbody></table><h2 id="十二、jQuery"><a href="#十二、jQuery" class="headerlink" title="十二、jQuery"></a>十二、jQuery</h2><table><thead><tr><th>网站</th><th>说明</th></tr></thead><tbody><tr><td><a href="http://learn.jquery.com/" target="_blank" rel="noopener">学习jQuery</a></td><td>Learning Center</td></tr><tr><td><a href="https://www.jquery123.com/" target="_blank" rel="noopener">jQuery API 中文文档</a></td><td>官方</td></tr><tr><td><a href="http://www.css88.com/jqapi-1.9/" target="_blank" rel="noopener">jQuery API中文文档</a></td><td>愚人码头</td></tr><tr><td><a href="http://www.css88.com/jquery-ui-api/" target="_blank" rel="noopener">jQuery UI API中文文档</a></td><td>愚人码头</td></tr><tr><td><a href="http://hemin.cn/jq/" target="_blank" rel="noopener">jQuery中文手册</a></td><td>hemin</td></tr><tr><td><a href="http://youmightnotneedjquery.com/" target="_blank" rel="noopener">YOU MIGHT NOT NEED JQUERY</a></td><td>你可能不需要JQUERY</td></tr></tbody></table><h2 id="十三、Vue-js"><a href="#十三、Vue-js" class="headerlink" title="十三、Vue.js"></a>十三、Vue.js</h2><table><thead><tr><th>网站</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://cn.vuejs.org/" target="_blank" rel="noopener">Vue.js</a></td><td>官方网站</td></tr><tr><td><a href="https://github.com/vuejs" target="_blank" rel="noopener">vuejs</a></td><td>官方仓库</td></tr><tr><td><a href="https://www.vue-js.com/" target="_blank" rel="noopener">Vue 中文社区</a></td><td>全球最大的 Vueframework 中文开源技术社区</td></tr><tr><td><a href="https://vuefe.cn/" target="_blank" rel="noopener">vuefe.cn</a></td><td>Vue.js 中文文档</td></tr><tr><td><a href="http://forum.vuejs.org/" target="_blank" rel="noopener">Vue Forum</a></td><td>Vue 论坛</td></tr><tr><td><a href="https://discordapp.com/invite/HBherRA" target="_blank" rel="noopener">Vue Land</a></td><td>Vue 聊天室</td></tr><tr><td><a href="https://github.com/vuejs/vue-devtools" target="_blank" rel="noopener">vue-devtools</a></td><td>用于调试Vue.js应用程序的浏览器devtools扩展</td></tr><tr><td><a href="https://vue-loader.vuejs.org/zh-cn/" target="_blank" rel="noopener">Vue Loader</a></td><td>一个 webpack 的 loader</td></tr><tr><td><a href="https://router.vuejs.org/zh-cn/" target="_blank" rel="noopener">vue-router</a></td><td>官方路由</td></tr><tr><td><a href="https://vuex.vuejs.org/zh-cn/" target="_blank" rel="noopener">Vuex</a></td><td>状态管理模式</td></tr><tr><td><a href="https://ssr.vuejs.org/zh/" target="_blank" rel="noopener">Vue 服务端渲染</a></td><td>Vue.js 服务器端渲染指南</td></tr><tr><td><a href="https://curated.vuejs.org/" target="_blank" rel="noopener">Vue package</a></td><td>Find the best packages for your Vue app!</td></tr><tr><td><a href="https://github.com/vuejs/awesome-vue" target="_blank" rel="noopener">awesome-vue</a></td><td>Awesome Vue.js</td></tr><tr><td><a href="http://element-cn.eleme.io/#/zh-CN" target="_blank" rel="noopener">Element</a></td><td>一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的桌面端组件库</td></tr><tr><td><a href="https://www.iviewui.com/" target="_blank" rel="noopener">iView</a></td><td>一套基于 Vue.js 的高质量 UI 组件库</td></tr><tr><td><a href="http://jiongks.name/blog/just-vue/" target="_blank" rel="noopener">Vue + webpack 项目实践</a></td><td>勾三股四</td></tr><tr><td><a href="https://github.com/Coffcer/Blog/issues/3" target="_blank" rel="noopener">vue 性能优化</a></td><td>岛书,Coffcer</td></tr></tbody></table><h2 id="十四、AngularJS"><a href="#十四、AngularJS" class="headerlink" title="十四、AngularJS"></a>十四、AngularJS</h2><table><thead><tr><th>网站</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://angular.cn/" target="_blank" rel="noopener">Angular 中文版</a></td><td>官方网站</td></tr><tr><td><a href="http://www.ituring.com.cn/book/1206" target="_blank" rel="noopener">AngularJS入门教程</a></td><td>严清 , 李诗剑 (译者)</td></tr><tr><td><a href="http://each.sinaapp.com/angular/" target="_blank" rel="noopener">AngularJS在线教程</a></td><td>乔乐共享</td></tr><tr><td><a href="https://www.zouyesheng.com/angular.html" target="_blank" rel="noopener">AngularJS学习笔记</a></td><td>邹业盛</td></tr><tr><td><a href="http://blog.aijc.net/AngularLearning/" target="_blank" rel="noopener">Angularlearning</a></td><td>Angular.js 的一些学习资源</td></tr><tr><td><a href="http://angular-ui.github.io/bootstrap/" target="_blank" rel="noopener">UI Bootstrap</a></td><td>Bootstrap components written in pureAngularJSby theAngularUI Team</td></tr><tr><td><a href="http://mgcrea.github.io/angular-strap/" target="_blank" rel="noopener">AngularStrap</a></td><td>AngularJS 1.2+ native directives for Bootstrap 3</td></tr><tr><td><a href="https://github.com/dolymood/AngularLearning" target="_blank" rel="noopener">AngularLearning</a></td><td>dolymood</td></tr></tbody></table><h2 id="十五、React"><a href="#十五、React" class="headerlink" title="十五、React"></a>十五、React</h2><table><thead><tr><th>网站</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://reactjs.org/" target="_blank" rel="noopener">React</a></td><td>官方网站</td></tr><tr><td><a href="http://nav.react-china.org/#docs" target="_blank" rel="noopener">React 中文索引</a></td><td>Made by 题叶 &amp; Feifei Hang</td></tr><tr><td><a href="http://www.react-china.org/" target="_blank" rel="noopener">React China</a></td><td>React 中文的论坛</td></tr><tr><td><a href="http://www.ruanyifeng.com/blog/2015/03/react.html" target="_blank" rel="noopener">React 入门实例教程</a></td><td>阮一峰</td></tr><tr><td><a href="http://www.ruanyifeng.com/blog/2016/05/react_router.html?utm_source=tool.lu" target="_blank" rel="noopener">React Router 使用教程</a></td><td>阮一峰</td></tr><tr><td><a href="http://wiki.jikexueyuan.com/project/react-native/" target="_blank" rel="noopener">React Native 中文版</a></td><td>极客学院</td></tr><tr><td><a href="http://www.phperz.com/special/14.html" target="_blank" rel="noopener">React.JS教程</a></td><td>PHPERZ</td></tr><tr><td><a href="http://www.alloyteam.com/2016/01/reactjs-best-practices-for-2016/" target="_blank" rel="noopener">React.js 2016 最佳实践</a></td><td>腾讯全端 AlloyTeam 团队 Blog</td></tr><tr><td><a href="http://60sky.com/" target="_blank" rel="noopener">React 导读</a></td><td>小撸,国双科技</td></tr><tr><td><a href="http://cn.redux.js.org/" target="_blank" rel="noopener">Redux 中文文档</a></td><td>收到 Redux 作者 Dan 的多次点赞</td></tr><tr><td><a href="https://github.com/react-guide/react-router-cn" target="_blank" rel="noopener">React Router 中文文档</a></td><td>官方文档中文翻译</td></tr><tr><td><a href="https://www.ibm.com/developerworks/cn/web/1509_dongyue_react/index.html" target="_blank" rel="noopener">React 介绍及实践教程</a></td><td>董越 和 徐新茹</td></tr><tr><td><a href="https://github.com/react-guide/react-basic" target="_blank" rel="noopener">React 设计思想</a></td><td>React 核心开发者、有 React API 终结者之称的 Sebastian Markbåge 撰写</td></tr><tr><td><a href="https://fakefish.github.io/react-webpack-cookbook/index.html" target="_blank" rel="noopener">React Webpack 小书</a></td><td>作者 Christian Alfoni and Juho Vepsäläinen 中文译者 Fakefish</td></tr><tr><td><a href="http://material-ui.com/" target="_blank" rel="noopener">Material-UI</a></td><td>React 前端 UI 库</td></tr><tr><td><a href="http://amazeui.org/react/" target="_blank" rel="noopener">Amaze UI React</a></td><td>基于 React.js 开发的 Web 组件库</td></tr><tr><td><a href="https://github.com/dvajs/dva/blob/master/README_zh-CN.md" target="_blank" rel="noopener">dva</a></td><td>基于 redux、redux-saga 和 react-router 的轻量级前端框架</td></tr><tr><td><a href="https://motion.ant.design/" target="_blank" rel="noopener">Ant Motion</a></td><td>能够快速在 React 框架中使用动画</td></tr></tbody></table><h2 id="十六、Node-js"><a href="#十六、Node-js" class="headerlink" title="十六、Node.js"></a>十六、Node.js</h2><table><thead><tr><th>网站</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://nodeschool.io/zh-cn/" target="_blank" rel="noopener">NODESCHOOL</a></td><td>教你 Web 开发技能的开源课程，自学或者参加一个附近的教学活动</td></tr><tr><td><a href="https://www.nodebeginner.org/index-zh-cn.html" target="_blank" rel="noopener">Node入门</a></td><td>作者： Manuel Kiessling 翻译： goddyzhao &amp; GrayZhang &amp; MondayChen</td></tr><tr><td><a href="http://nqdeng.github.io/7-days-nodejs/" target="_blank" rel="noopener">七天学会NodeJS</a></td><td>Alibaba.com</td></tr><tr><td><a href="https://github.com/alsotang/node-lessons" target="_blank" rel="noopener">Node.js 包教不包会</a></td><td>alsotang</td></tr><tr><td><a href="http://blog.fens.me/series-nodejs/" target="_blank" rel="noopener">从零开始nodejs系列文章</a></td><td>粉丝日志</td></tr><tr><td><a href="https://www.barretlee.com/blog/2015/10/07/debug-nodejs-in-command-line/" target="_blank" rel="noopener">NodeJS的代码调试和性能调优</a></td><td>小胡子哥</td></tr><tr><td><a href="http://www.expressjs.com.cn/" target="_blank" rel="noopener">Express</a></td><td>基于 Node.js 平台，快速、开放、极简的 web 开发框架</td></tr><tr><td><a href="http://javascript.ruanyifeng.com/nodejs/express.html" target="_blank" rel="noopener">Express框架</a></td><td>阮一峰</td></tr><tr><td><a href="http://javascript.ruanyifeng.com/nodejs/koa.html" target="_blank" rel="noopener">Koa 框架</a></td><td>阮一峰</td></tr><tr><td><a href="https://koa.bootcss.com/" target="_blank" rel="noopener">Koa</a></td><td>Koajs 中文文档</td></tr></tbody></table><h2 id="十七、RequireJS"><a href="#十七、RequireJS" class="headerlink" title="十七、RequireJS"></a>十七、RequireJS</h2><table><thead><tr><th>网站</th><th>说明</th></tr></thead><tbody><tr><td><a href="http://www.ruanyifeng.com/blog/2012/10/javascript_module.html" target="_blank" rel="noopener">Javascript模块化编程</a></td><td>阮一峰</td></tr><tr><td><a href="http://www.cnblogs.com/yexiaochai/tag/require.js/" target="_blank" rel="noopener">RequireJS学习</a></td><td>叶小钗</td></tr><tr><td><a href="http://www.cnblogs.com/snandy/archive/2012/05/22/2513652.html" target="_blank" rel="noopener">RequireJS入门</a></td><td>Snandy</td></tr><tr><td><a href="https://www.oschina.net/translate/getting-started-with-the-requirejs-library" target="_blank" rel="noopener">RequireJS 入门指南</a></td><td>参与翻译 NCThinker, 姜鹏飞, super0555</td></tr></tbody></table><h2 id="十八、Sass和Less"><a href="#十八、Sass和Less" class="headerlink" title="十八、Sass和Less"></a>十八、Sass和Less</h2><table><thead><tr><th>网站</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://www.sass.hk/" target="_blank" rel="noopener">Sass中文网</a></td><td>世界上最成熟、最稳定、最强大的专业级CSS扩展语言</td></tr><tr><td><a href="http://sass.bootcss.com/" target="_blank" rel="noopener">SASS中文文档</a></td><td>Sass 是成熟、稳定、强大的 CSS 扩展语言</td></tr><tr><td><a href="http://www.ruanyifeng.com/blog/2012/06/sass.html" target="_blank" rel="noopener">SASS用法指南</a></td><td>阮一峰</td></tr><tr><td><a href="https://www.w3cplus.com/sassguide/" target="_blank" rel="noopener">Sass入门</a></td><td>大漠</td></tr><tr><td><a href="https://less.bootcss.com/" target="_blank" rel="noopener">Less中文文档</a></td><td>给 CSS 加点料</td></tr></tbody></table><h2 id="十九、Webpack"><a href="#十九、Webpack" class="headerlink" title="十九、Webpack"></a>十九、Webpack</h2><table><thead><tr><th>网站</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://webpack.js.org/" target="_blank" rel="noopener">webpack</a></td><td>官方网站</td></tr><tr><td><a href="https://doc.webpack-china.org/" target="_blank" rel="noopener">webpack 中文</a></td><td>中文官网</td></tr><tr><td><a href="https://github.com/webpack/webpack" target="_blank" rel="noopener">webpack</a></td><td>github</td></tr><tr><td><a href="https://github.com/ruanyf/webpack-demos" target="_blank" rel="noopener">webpack-demos</a></td><td>阮一峰</td></tr><tr><td></td><td></td></tr></tbody></table><h2 id="二十、Markdown"><a href="#二十、Markdown" class="headerlink" title="二十、Markdown"></a>二十、Markdown</h2><table><thead><tr><th>网站</th><th>说明</th></tr></thead><tbody><tr><td><a href="http://wowubuntu.com/markdown/" target="_blank" rel="noopener">Markdown 语法说明 (简体中文版)</a></td><td>riku</td></tr><tr><td><a href="https://github.com/LearnShare/Learning-Markdown/blob/master/README.md" target="_blank" rel="noopener">Markdown 入门参考</a></td><td>LearnShare</td></tr><tr><td><a href="https://legacy.gitbook.com/" target="_blank" rel="noopener">GitBook</a></td><td>帮助团队在线撰写，协作和发布内容</td></tr><tr><td><a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="noopener">Cmd Markdown</a></td><td>Cmd Markdown 编辑阅读器</td></tr><tr><td><a href="https://stackedit.io/" target="_blank" rel="noopener">StackEdit</a></td><td>浏览器中的Markdown编辑器</td></tr><tr><td><a href="http://bh-lay.github.io/mditor/" target="_blank" rel="noopener">Mditor</a></td><td>一款轻量级的markdown编辑器</td></tr></tbody></table><h2 id="二十一、Git和GitHub"><a href="#二十一、Git和GitHub" class="headerlink" title="二十一、Git和GitHub"></a>二十一、Git和GitHub</h2><table><thead><tr><th>网站</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">Git-Book</a></td><td>官方文档</td></tr><tr><td><a href="http://www.runoob.com/manual/git-guide/" target="_blank" rel="noopener">git - 简明指南</a></td><td>罗杰·杜德勒</td></tr><tr><td><a href="https://backlog.com/git-tutorial/cn/" target="_blank" rel="noopener">猴子都能懂得GIT入门</a></td><td>backlog</td></tr><tr><td><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰的官方网站 Git教程</a></td><td>廖雪峰</td></tr><tr><td><a href="https://learngitbranching.js.org/" target="_blank" rel="noopener">Learn Git Branching</a></td><td>通过一系列刺激的关卡挑战，逐步深入的学习 Git 的强大功能</td></tr><tr><td><a href="https://github.com/oldratlee/translations/blob/master/git-workflows-and-tutorials/README.md" target="_blank" rel="noopener">Git工作流指南</a></td><td>李鼎(哲良),taobao</td></tr><tr><td><a href="https://github.com/xirong/my-git" target="_blank" rel="noopener">有关 git 的学习资料</a></td><td>xirong,alibaba</td></tr><tr><td><a href="http://github.phodal.com/" target="_blank" rel="noopener">GitHub 漫游指南</a></td><td>Phodal Huang,黄峰达,ThoughtWorks 高级咨询师</td></tr><tr><td><a href="https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.zh-cn.md" target="_blank" rel="noopener">GitHub秘籍</a></td><td>Star 24.8k  Fork 3.8k</td></tr></tbody></table><h2 id="二十二、Github大牛"><a href="#二十二、Github大牛" class="headerlink" title="二十二、Github大牛"></a>二十二、Github大牛</h2><table><thead><tr><th>网站</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://github.com/AlloyTeam/" target="_blank" rel="noopener">AlloyTeam</a></td><td>腾讯 AlloyTeam</td></tr><tr><td><a href="https://github.com/fex-team/" target="_blank" rel="noopener">fex-team</a></td><td>Baidu FEX team</td></tr><tr><td><a href="https://github.com/tmallfe" target="_blank" rel="noopener">tmallfe</a></td><td>天猫前端团队</td></tr><tr><td><a href="https://github.com/nzakas" target="_blank" rel="noopener">nzakas</a></td><td><strong>尼古拉斯·泽卡斯</strong> Nicholas C. Zakas，雅虎首页的前端技术主管， YUI 库的贡献者，目前在 Box 公司任职</td></tr><tr><td><a href="https://github.com/tj" target="_blank" rel="noopener">tj</a></td><td><strong>TJ Holowaychuk</strong>，Koa、Co、Express、jade、mocha、node-canvas、commander.js等知名开源项目的创建和贡献者</td></tr><tr><td><a href="https://github.com/JacksonTian" target="_blank" rel="noopener">JacksonTian</a></td><td><strong>朴灵(田永强)</strong>，就职阿里巴巴数据平台，Node.js布道者</td></tr><tr><td><a href="https://github.com/lifesinger" target="_blank" rel="noopener">lifesinger</a></td><td><strong>玉伯</strong>，支付宝前端，seajs作者</td></tr><tr><td><a href="https://github.com/jobbole" target="_blank" rel="noopener">jobbole</a></td><td><strong>伯乐在线</strong></td></tr><tr><td><a href="https://github.com/paulirish" target="_blank" rel="noopener">paulirish</a></td><td>Google Chrome</td></tr><tr><td><a href="https://github.com/kejun" target="_blank" rel="noopener">kejun</a></td><td>Douban Inc</td></tr><tr><td><a href="https://github.com/fengmk2" target="_blank" rel="noopener">fengmk2</a></td><td>fengmk2，Alipay</td></tr><tr><td><a href="https://github.com/fool2fish" target="_blank" rel="noopener">fool2fish</a></td><td>Zhouxuan Yang，Alipay</td></tr><tr><td><a href="https://github.com/jayli" target="_blank" rel="noopener">jayli</a></td><td>Taobao</td></tr></tbody></table><h2 id="二十三、框架类库"><a href="#二十三、框架类库" class="headerlink" title="二十三、框架类库"></a>二十三、框架类库</h2><table><thead><tr><th>网站</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://github.com/Tencent/weui/blob/master/README_cn.md" target="_blank" rel="noopener">WeUI</a></td><td>微信官方设计团队为微信 Web 开发量身设计</td></tr><tr><td><a href="http://zui.sexy/" target="_blank" rel="noopener">ZUI</a></td><td>一个基于 Bootstrap 深度定制开源前端实践方案，帮助你快速构建现代跨屏应用。</td></tr><tr><td><a href="http://zui.sexy/m/" target="_blank" rel="noopener">MZUI</a></td><td>为移动端设计，基于 Flex 的 UI 框架</td></tr><tr><td><a href="http://m.sui.taobao.org/" target="_blank" rel="noopener">SUI Mobile</a></td><td>阿里他她，一套基于 Framework7 开发的UI库</td></tr><tr><td><a href="http://docs.kissyui.com/" target="_blank" rel="noopener">KISSY</a></td><td>一款跨终端、模块化、高性能、使用简单的 JavaScript 框架</td></tr><tr><td><a href="https://validator.niceue.com/" target="_blank" rel="noopener">nice validator</a></td><td>领先的表单验证解决方案</td></tr><tr><td><a href="http://www.css88.com/doc/underscore/" target="_blank" rel="noopener">Underscore.js</a></td><td>一整套函数式编程的实用功能</td></tr><tr><td><a href="https://lodash.com/" target="_blank" rel="noopener">Lodash</a></td><td>通过解决数组，数字，对象，字符串等问题，让JavaScript变得更轻松。</td></tr><tr><td><a href="https://www.w3cplus.com/MetroUICSS/index.php" target="_blank" rel="noopener">Metro UI CSS</a></td><td>一个 BizSpark Startup</td></tr><tr><td><a href="http://hiloki.github.io/kitecss/" target="_blank" rel="noopener">Kite CSS</a></td><td>一个灵活的布局助手</td></tr><tr><td><a href="https://tympanus.net/Development/CreativeLinkEffects/" target="_blank" rel="noopener">Creative Link Effects</a></td><td>创意链接或菜单项效果</td></tr><tr><td><a href="http://www.javascripting.com/" target="_blank" rel="noopener">JAVASCRIPTING</a></td><td>最优的javascript库、框架和插件。</td></tr><tr><td><a href="http://microjs.com/" target="_blank" rel="noopener">Microjs</a></td><td>神奇的微型框架</td></tr></tbody></table><h2 id="二十四、动画"><a href="#二十四、动画" class="headerlink" title="二十四、动画"></a>二十四、动画</h2><table><thead><tr><th>网站</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://daneden.github.io/animate.css/" target="_blank" rel="noopener">Animate.css</a></td><td>一个跨浏览器的CSS动画库</td></tr><tr><td><a href="http://bouncejs.com/" target="_blank" rel="noopener">Bounce.js</a></td><td>触摸库 CSS3关键帧动画</td></tr><tr><td><a href="http://fian.my.id/Waves/" target="_blank" rel="noopener">Waves.js</a></td><td>点击按钮或背景动画</td></tr><tr><td><a href="http://easings.net/zh-cn" target="_blank" rel="noopener">缓动函数</a></td><td>指定动画效果在执行时的速度，使其看起来更加真实</td></tr></tbody></table><h2 id="二十五、移动端"><a href="#二十五、移动端" class="headerlink" title="二十五、移动端"></a>二十五、移动端</h2><table><thead><tr><th>网站</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://github.com/AlloyTeam/Mars" target="_blank" rel="noopener">腾讯移动Web前端知识库</a></td><td>Mars - mobile needs a hero</td></tr><tr><td><a href="http://tgideas.github.io/mtips/#home" target="_blank" rel="noopener">Mobi Tips</a></td><td>TGideas</td></tr><tr><td><a href="https://github.com/jtyjty99999/mobileTech" target="_blank" rel="noopener">mobileTech</a></td><td>jtyjty99999-Alibaba，收集移动端开发所需要的一些资源与小技巧</td></tr><tr><td><a href="http://am-team.github.io/amg/dev-exp-doc.html" target="_blank" rel="noopener">无线Web开发经验谈</a></td><td>支付宝</td></tr><tr><td><a href="https://github.com/hoosin/mobile-web-favorites" target="_blank" rel="noopener">Mobile Web Favorites</a></td><td>hoosin</td></tr><tr><td><a href="http://www.cnblogs.com/PeunZhang/p/3407453.html" target="_blank" rel="noopener">移动web资源整理</a></td><td>白树，就职微信支付，负责移动端产品，擅长小程序、H5前端开发</td></tr><tr><td><a href="http://www.css88.com/doc/zeptojs_api/" target="_blank" rel="noopener">Zepto.js API 中文版</a></td><td>愚人码头,一些可选功能是专门针对移动端浏览器的</td></tr><tr><td><a href="http://framework7.taobao.org/" target="_blank" rel="noopener">Framework7</a></td><td>阿里他她，特色的HTML框架 可以创建精美的iOS应用</td></tr><tr><td><a href="http://m.sui.taobao.org/" target="_blank" rel="noopener">SUI Mobile</a></td><td>阿里他她，一套基于 Framework7 开发的UI库</td></tr><tr><td><a href="http://www.swiper.com.cn/" target="_blank" rel="noopener">Swiper</a></td><td>开源、免费、强大的移动端触摸滑动插件</td></tr></tbody></table><h2 id="二十六、开发平台"><a href="#二十六、开发平台" class="headerlink" title="二十六、开发平台"></a>二十六、开发平台</h2><table><thead><tr><th>网站</th><th>简介</th></tr></thead><tbody><tr><td><a href="http://jsfiddle.net/" target="_blank" rel="noopener">JSFiddle</a></td><td>一款在线的代码编辑器,通过流行的JS框架创建自定义的环境,以简化JS代码</td></tr><tr><td><a href="http://jsbin.com/" target="_blank" rel="noopener">JSBin</a></td><td>Collaborative JavaScript Debugging</td></tr><tr><td><a href="https://babeljs.io/" target="_blank" rel="noopener">BabelJS</a></td><td>一个 JavaScript 编译器</td></tr><tr><td><a href="http://runjs.cn/" target="_blank" rel="noopener">RunJS</a></td><td>在线编辑、展示、分享、交流你的 JavaScript 代码</td></tr><tr><td><a href="http://jsdm.com/" target="_blank" rel="noopener">JSDM</a></td><td>一个WEB前端在线编辑器，可同时编辑HTML、CSS、JAVASCRIPT代码，并即时预览！</td></tr><tr><td><a href="https://codepen.io/" target="_blank" rel="noopener">CodePen</a></td><td>面向前端设计人员和开发人员的社交开发环境</td></tr><tr><td><a href="https://ideone.com/" target="_blank" rel="noopener">IDeone</a></td><td>一个在线编译器和调试工具，它允许您编译源代码并在线执行超过60种编程语言</td></tr><tr><td><a href="https://code.hcharts.cn/" target="_blank" rel="noopener">HCODE</a></td><td>一个在线代码测试、托管、分享的工具，方便与别人一起调试、分享代码，具有代码高亮、一键代码格式化、贴心的快捷键等功能。</td></tr><tr><td><a href="https://thimble.mozilla.org/zh-CN/" target="_blank" rel="noopener">Thimble</a></td><td>一个在线代码编辑器，用它可以很轻松地创建和发布一个您自己的网页，一切伴随着 HTML、CSS 和 JavaScript。</td></tr></tbody></table><h2 id="二十七、在线工具"><a href="#二十七、在线工具" class="headerlink" title="二十七、在线工具"></a>二十七、在线工具</h2><table><thead><tr><th>网站</th><th>简介</th></tr></thead><tbody><tr><td><a href="http://caniuse.com/" target="_blank" rel="noopener">CanIUse</a></td><td>查看浏览器版本对HTML5和CSS3的支持情况</td></tr><tr><td><a href="http://kangax.github.io/compat-table/es6/" target="_blank" rel="noopener">ECMAScript 6 compatibility table</a></td><td>ECMAScript 6兼容性表</td></tr><tr><td><a href="http://jigsaw.w3.org/css-validator/validator.html.zh-cn" target="_blank" rel="noopener">CSS Validation Service</a></td><td>W3C CSS 验证服务</td></tr><tr><td><a href="http://browserhacks.com/" target="_blank" rel="noopener">BROWSERHACKS</a></td><td>browser specific CSS and JavaScript hacks</td></tr></tbody></table><h2 id="二十八、正则表达式"><a href="#二十八、正则表达式" class="headerlink" title="二十八、正则表达式"></a>二十八、正则表达式</h2><table><thead><tr><th>网站</th><th>简介</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions" target="_blank" rel="noopener">正则表达式 MDN</a></td><td>MDN Web 文档</td></tr><tr><td><a href="http://javascript.ruanyifeng.com/stdlib/regexp.html" target="_blank" rel="noopener">RegExp对象</a></td><td>阮一峰</td></tr><tr><td><a href="http://es6.ruanyifeng.com/#docs/regex" target="_blank" rel="noopener">正则的扩展</a></td><td>阮一峰</td></tr><tr><td><a href="http://div.io/topic/764?page=1" target="_blank" rel="noopener">进阶正则表达式</a></td><td>小胡子哥 ( Barret Lee )</td></tr><tr><td><a href="http://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="noopener">正则表达式30分钟入门教程</a></td><td>deerchao</td></tr><tr><td><a href="http://louiszhai.github.io/2016/06/13/regexp/" target="_blank" rel="noopener">正则表达式前端使用手册</a></td><td>路易斯</td></tr><tr><td><a href="https://segmentfault.com/a/1190000002471140" target="_blank" rel="noopener">JS正则表达式元字符</a></td><td>思否 小弟调调</td></tr></tbody></table><h2 id="二十九、CDN"><a href="#二十九、CDN" class="headerlink" title="二十九、CDN"></a>二十九、CDN</h2><table><thead><tr><th>网站</th><th>简介</th></tr></thead><tbody><tr><td><a href="http://cdn.code.baidu.com/" target="_blank" rel="noopener">百度静态资源公共库</a></td><td>稳定，快速，全面，开源的国内CDN加速服务。</td></tr><tr><td><a href="http://libs.useso.com/" target="_blank" rel="noopener">360网站卫士常用前端公共库CDN服务</a></td><td>常用前端公共库以及和谐使用Google公共库&amp;字体库的调用方法</td></tr><tr><td><a href="http://qydev.weixin.qq.com/" target="_blank" rel="noopener">前端库CDN服务</a></td><td>微信，主要包括一些常用的 JS 库，CSS库，甚至是SWF文件。</td></tr><tr><td><a href="http://www.bootcdn.cn/" target="_blank" rel="noopener">BootCDN</a></td><td>Bootstrap 中文网支持并维护的前端开源项目免费 CDN 服务</td></tr><tr><td><a href="http://npm.taobao.org/" target="_blank" rel="noopener">TAONPM</a></td><td>淘宝 NPM 镜像,可以用此代替官方版本(只读)</td></tr><tr><td><a href="http://staticfile.org/" target="_blank" rel="noopener">Staticfile CDN</a></td><td>免费、快速、开放的 CDN 服务</td></tr><tr><td><a href="http://code.jquery.com/" target="_blank" rel="noopener">jQuery CDN</a></td><td>最新的稳定版本</td></tr></tbody></table><h2 id="三十、API"><a href="#三十、API" class="headerlink" title="三十、API"></a>三十、API</h2><table><thead><tr><th>网站</th><th>简介</th></tr></thead><tbody><tr><td><a href="http://overapi.com/" target="_blank" rel="noopener">OverAPI.com</a></td><td>Collecting All Cheat Sheets</td></tr><tr><td><a href="http://tool.oschina.net/apidocs" target="_blank" rel="noopener">常用API文档索引</a></td><td>开源中国社区 在线API文档</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;front-end-resources&quot;&gt;&lt;a href=&quot;#front-end-resources&quot; class=&quot;headerlink&quot; title=&quot;front-end-resources&quot;&gt;&lt;/a&gt;front-end-resources&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Javascript基础-执行机制</title>
    <link href="http://www.barebear.cn/2020/01/20/Javascript%E5%9F%BA%E7%A1%80-%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6/"/>
    <id>http://www.barebear.cn/2020/01/20/Javascript%E5%9F%BA%E7%A1%80-%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6/</id>
    <published>2020-01-20T02:50:14.000Z</published>
    <updated>2020-01-20T14:27:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="try-里面放-return，finally-里的代码会不会执行，理解其内部机制"><a href="#try-里面放-return，finally-里的代码会不会执行，理解其内部机制" class="headerlink" title="try 里面放 return，finally 里的代码会不会执行，理解其内部机制"></a>try 里面放 return，finally 里的代码会不会执行，理解其内部机制</h3><p>会执行,在方法返回给调用者前执行,因为如果存在<code>finally</code>代码块,<code>try</code>中的<code>return</code>语句<br>不会立马返回给调用者,而是记录下返回值待<code>finally</code>代码块执行完毕之后再返回;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// return 执行了但是没有立即返回，而是先执行了 finally</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">kaimo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(kaimo()) <span class="comment">// a 0</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// finally 中的 return 覆盖了 try 中的 return。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">kaimo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(kaimo()) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong><br>1、不管有木有出现异常，<code>finally</code> 块中代码都会执行；<br>2、当 <code>try</code> 和 <code>catch</code> 中有 <code>return</code> 时，<code>finally</code> 仍然会执行；<br>3、<code>finally</code> 是在 <code>return</code> 后面的表达式运算后执行的（此时并没有返回运算后的值，而是先把要返回的值保存起来，不管 <code>finally</code> 中的代码怎么样，返回的值都不会改变，任然是之前保存的值），所以函数返回值是在 <code>finally</code> 执行前确定的；<br>4、<code>finally</code> 中最好不要包含 <code>return</code>，否则程序会提前退出，返回值不是 <code>try</code> 或 <code>catch</code> 中保存的返回值。</p><blockquote><p>参考资料： <a href="https://blog.csdn.net/kaimo313/article/details/90323824" target="_blank" rel="noopener">重学前端学习笔记（二十）–try 里面放 return，finally 还会执行吗？</a></p></blockquote><h3 id="JavaScript-如何实现异步编程"><a href="#JavaScript-如何实现异步编程" class="headerlink" title="JavaScript 如何实现异步编程"></a>JavaScript 如何实现异步编程</h3><p><strong>1.回调函数</strong><br>但会导致两个问题:<br>缺乏顺序性： 回调地狱导致的调试困难，和大脑的思维方式不符<br>缺乏可信任性： 控制反转导致的一系列信任问题<br><strong>2.Promise</strong><br><code>Promise</code> 是基于 <code>PromiseA+</code>规范的实现，它很好的解决了控制反转导致的信任问题，将代码执行的主动权重新拿了回来。<br><strong>3.生成器函数 Generator</strong><br>使用 <code>Generator</code>，可以让我们用同步的方式来书写代码，解决了顺序性的问题，但是需要手动去控制 <code>next(...)</code>，将回调成功返回的数据送回 JavaScript 主流程中。<br><strong>4.Async/Await</strong><br><code>Async/Await</code> 结合了 <code>Promise</code> 和 <code>Generator</code>，在 <code>await</code> 后面跟一个 <code>Promise</code>，它会自动等待 <code>Promise</code> 的决议值，解决了 <code>Generator</code> 需要手动控制 <code>next(...)</code>执行的问题，真正实现了用同步的方式书写异步代码。<br><strong>5.发布订阅模式</strong><br>在 <code>JavaScript</code> 中应用非常广泛，比如一些前端框架比如 React,Vue 等，都有使用这一设计模式，<code>nodejs</code> 使用的就更多了。<br>使用发布订阅模式的好处是事件集中管理，修改方便，缺点就是，代码可读性下降，事件容易冲突。</p><p>简单实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//async_Event.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//单对象写法 Event 就相当于事件中心</span></span><br><span class="line"><span class="keyword">const</span> Event = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//使用闭包的好处 : 把EventPool私有化，外界无法访问EventPool</span></span><br><span class="line">  <span class="keyword">const</span> EventPool = <span class="keyword">new</span> <span class="built_in">Map</span>() <span class="comment">//使用es6 map来存 event，callback 键值对</span></span><br><span class="line">  <span class="keyword">const</span> isFunction = <span class="function"><span class="params">func</span> =&gt;</span> <span class="keyword">typeof</span> func === <span class="string">'function'</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> on = <span class="function">(<span class="params">event, callback</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//注册事件</span></span><br><span class="line">    EventPool.get(event) || EventPool.set(event, [])</span><br><span class="line">    <span class="keyword">if</span> (isFunction(callback)) &#123;</span><br><span class="line">      EventPool.get(event).push(callback)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'callback not is function'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> addEventListenr = <span class="function">(<span class="params">event, callback</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//on方法别名</span></span><br><span class="line">    on(event, callback)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> emit = <span class="function">(<span class="params">event, ...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//触发(发布)事件</span></span><br><span class="line">    <span class="comment">//让事件的触发为一个异步的过程，即排在同步代码后执行</span></span><br><span class="line">    <span class="comment">//也可以setTimeout(fn,0)</span></span><br><span class="line">    <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> funcs = EventPool.get(event)</span><br><span class="line">      <span class="keyword">if</span> (funcs) &#123;</span><br><span class="line">        funcs.forEach(<span class="function"><span class="params">f</span> =&gt;</span> f(...args))</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`<span class="subst">$&#123;event&#125;</span> not register`</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> send = <span class="function">(<span class="params">event, ...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//emit方法别名</span></span><br><span class="line">    emit(event, ...args)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> removeListener = <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//删除事件</span></span><br><span class="line">    <span class="built_in">Promise</span>.resolve(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//删除事件也为异步的过程</span></span><br><span class="line">      <span class="keyword">if</span> (event) &#123;</span><br><span class="line">        EventPool.delete(event)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`<span class="subst">$&#123;event&#125;</span> not register`</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    on,</span><br><span class="line">    emit,</span><br><span class="line">    addEventListenr,</span><br><span class="line">    send</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>简单使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注册事件，名为event</span></span><br><span class="line">Event.on(<span class="string">'event'</span>, data =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;);</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      Event.emit(<span class="string">'event'</span>,<span class="string">'hello wrold'</span>)</span><br><span class="line">    &#125;，<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1s后触发事件，输出hello world</span></span><br></pre></td></tr></table></figure><h3 id="宏任务和微任务分别有哪些"><a href="#宏任务和微任务分别有哪些" class="headerlink" title="宏任务和微任务分别有哪些"></a>宏任务和微任务分别有哪些</h3><p>宏队列，<code>macrotask</code>，也叫 <code>tasks</code>。 一些异步任务的回调会依次进入 <code>macro task queue</code>，等待后续被调用，这些异步任务包括：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setTimeout</span><br><span class="line">setInterval</span><br><span class="line">setImmediate (Node独有)</span><br><span class="line">requestAnimationFrame (浏览器独有)</span><br><span class="line">I&#x2F;O</span><br><span class="line">UI rendering (浏览器独有)</span><br></pre></td></tr></table></figure><p>微队列，<code>microtask</code>，也叫 <code>jobs</code>。 另一些异步任务的回调会依次进入 <code>micro task queue</code>，等待后续被调用，这些异步任务包括：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">process.nextTick (Node独有)</span><br><span class="line">Promise</span><br><span class="line">Object.observe</span><br><span class="line">MutationObserver</span><br></pre></td></tr></table></figure><h3 id="使用-Promise-实现串行"><a href="#使用-Promise-实现串行" class="headerlink" title="使用 Promise 实现串行"></a>使用 Promise 实现串行</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个 promise 的 function</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delay</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`wait <span class="subst">$&#123;time&#125;</span>s`</span>)</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'execute'</span>)</span><br><span class="line">      resolve()</span><br><span class="line">    &#125;, time * <span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><p><strong>1.reduce</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr.reduce(<span class="function">(<span class="params">s, v</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> s.then(<span class="function"><span class="params">()</span> =&gt;</span> delay(v))</span><br><span class="line">&#125;, <span class="built_in">Promise</span>.resolve())</span><br></pre></td></tr></table></figure><p><strong>2.async + 循环 + await</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> v <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="keyword">await</span> delay(v)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p><strong>3.普通循环</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="built_in">Promise</span>.resolve()</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> i <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  p = p.then(<span class="function"><span class="params">()</span> =&gt;</span> delay(i))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.递归</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">i, p = Promise.resolve(</span>)) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!arr[i]) <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve()</span><br><span class="line">  <span class="keyword">return</span> p.then(<span class="function"><span class="params">()</span> =&gt;</span> dispatch(i + <span class="number">1</span>, delay(arr[i])))</span><br><span class="line">&#125;</span><br><span class="line">dispatch(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="EventLoop-是什么"><a href="#EventLoop-是什么" class="headerlink" title="EventLoop 是什么"></a>EventLoop 是什么</h3><p><strong><code>event loop</code> 是一个执行模型，在不同的地方有不同的实现。浏览器和 <code>NodeJS</code> 基于不同的技术实现了各自的 <code>Event Loop</code></strong>。</p><p><strong>浏览器的 Event Loop</strong><br><img src="https://tva1.sinaimg.cn/large/006tNbRwly1gb3dt2bp73j30jq0kt0sv.jpg" alt=""><br>这张图将浏览器的 Event Loop 完整的描述了出来，我来讲执行一个 JavaScript 代码的具体流程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.执行全局Script同步代码，这些同步代码有一些是同步语句，有一些是异步语句（比如setTimeout等）；</span><br><span class="line">2.全局Script代码执行完毕后，调用栈Stack会清空；</span><br><span class="line">3.从微队列microtask queue中取出位于队首的回调任务，放入调用栈Stack中执行，执行完后microtask queue长度减1；</span><br><span class="line">4.继续取出位于队首的任务，放入调用栈Stack中执行，以此类推，直到直到把microtask queue中的所有任务都执行完毕。注意，如果在执行microtask的过程中，又产生了microtask，那么会加入到队列的末尾，也会在这个周期被调用执行；</span><br><span class="line">5.microtask queue中的所有任务都执行完毕，此时microtask queue为空队列，调用栈Stack也为空；</span><br><span class="line">6.取出宏队列macrotask queue中位于队首的任务，放入Stack中执行；</span><br><span class="line">7.执行完毕后，调用栈Stack为空；</span><br><span class="line">8.重复第3-7个步骤；</span><br><span class="line">9.重复第3-7个步骤；</span><br><span class="line">10.......</span><br></pre></td></tr></table></figure><p>这里归纳 3 个重点： 1.宏队列<code>macrotask</code>一次只从队列中取一个任务执行，执行完后就去执行微任务队列中的任务； 2.微任务队列中所有的任务都会被依次取出来执行，知道<code>microtask queue</code>为空； 3.图中没有画<code>UI rendering</code>的节点，因为这个是由浏览器自行判断决定的，但是只要执行<code>UI rendering</code>，它的节点是在执行完所有的<code>microtask</code>之后，下一个<code>macrotask</code>之前，紧跟着执行<code>UI render</code>。</p><p>测试一下你是否掌握了:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">  resolve(<span class="number">5</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">6</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">7</span>)</span><br></pre></td></tr></table></figure><p>这里结果会是什么呢？运用上面了解到的知识，先自己做一下试试看。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 正确答案</span><br><span class="line">1</span><br><span class="line">4</span><br><span class="line">7</span><br><span class="line">5</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">6</span><br></pre></td></tr></table></figure><blockquote><p>参考资料： <a href="https://segmentfault.com/a/1190000016278115" target="_blank" rel="noopener">带你彻底弄懂 Event Loop</a></p></blockquote><h3 id="如何解决页面加载海量数据而页面不卡顿"><a href="#如何解决页面加载海量数据而页面不卡顿" class="headerlink" title="如何解决页面加载海量数据而页面不卡顿"></a>如何解决页面加载海量数据而页面不卡顿</h3><p>1.分治思想，在一定的时间内多次加载数据，直至渲染完成，使用 <code>window.requestAnimationFrame</code> 和 <code>document.createDocumentFragment()</code> 实现</p><p>2.局部显示，毕竟用户能看到的就一屏内容，监听用户的滚动行为，改变显示元素，可使 <code>DOM</code> 结构最简单化</p><p>题目：页面上有个空的无序列表节点 ul ，其 id 为 list-with-big-data ，现需要往列表插入 10w 个 li ，每个列表项的文本内容可自行定义，且要求当每个 li 被单击时，通过 alert 显示列表项内的文本内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>页面加载海量数据<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list-with-big-data"</span>&gt;</span></span><br><span class="line">      100000 数据</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 此处添加你的代码逻辑</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>解决方案</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ulContainer = <span class="built_in">document</span>.getElementById(<span class="string">'list-with-big-data'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 防御性编程</span></span><br><span class="line">  <span class="keyword">if</span> (!ulContainer) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> total = <span class="number">100000</span> <span class="comment">// 插入数据的总数</span></span><br><span class="line">  <span class="keyword">const</span> batchSize = <span class="number">4</span> <span class="comment">// 每次批量插入的节点个数，个数越多，界面越卡顿</span></span><br><span class="line">  <span class="keyword">const</span> batchCount = total / batchSize <span class="comment">// 批处理的次数</span></span><br><span class="line">  <span class="keyword">let</span> batchDone = <span class="number">0</span> <span class="comment">// 已完成的批处理个数</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">appendItems</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 使用 DocumentFragment 减少 DOM 操作次数，对已有元素不进行回流</span></span><br><span class="line">    <span class="keyword">const</span> fragment = <span class="built_in">document</span>.createDocumentFragment()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; batchSize; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> liItem = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>)</span><br><span class="line">      liItem.innerText = batchDone * batchSize + i + <span class="number">1</span></span><br><span class="line">      fragment.appendChild(liItem)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每次批处理只修改 1 次 DOM</span></span><br><span class="line">    ulContainer.appendChild(fragment)</span><br><span class="line">    batchDone++</span><br><span class="line">    doAppendBatch()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">doAppendBatch</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (batchDone &lt; batchCount) &#123;</span><br><span class="line">      <span class="comment">// 在重绘之前，分批插入新节点</span></span><br><span class="line">      <span class="built_in">window</span>.requestAnimationFrame(appendItems)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// kickoff</span></span><br><span class="line">  doAppendBatch()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用 事件委托 ，利用 JavaScript 的事件机制，实现对海量元素的监听，有效减少事件注册的数量</span></span><br><span class="line">  ulContainer.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> target = e.target</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (target.tagName === <span class="string">'LI'</span>) &#123;</span><br><span class="line">      alert(target.innerText)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;try-里面放-return，finally-里的代码会不会执行，理解其内部机制&quot;&gt;&lt;a href=&quot;#try-里面放-return，finally-里的代码会不会执行，理解其内部机制&quot; class=&quot;headerlink&quot; title=&quot;try 里面放 retu
      
    
    </summary>
    
    
      <category term="前端" scheme="http://www.barebear.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://www.barebear.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Javascript基础-作用域和闭包</title>
    <link href="http://www.barebear.cn/2020/01/15/Javascript%E5%9F%BA%E7%A1%80-%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E9%97%AD%E5%8C%85/"/>
    <id>http://www.barebear.cn/2020/01/15/Javascript%E5%9F%BA%E7%A1%80-%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E9%97%AD%E5%8C%85/</id>
    <published>2020-01-15T13:12:24.000Z</published>
    <updated>2020-01-15T13:57:42.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="理解词法作用域和动态作用域"><a href="#理解词法作用域和动态作用域" class="headerlink" title="理解词法作用域和动态作用域"></a>理解词法作用域和动态作用域</h3><p>动态作用域不关心函数和作用域是如何声明以及在何处声明的，只关心它们从何处调用。<br>作用域链式基于调用栈的，而不是代码中的作用域嵌套。</p><p>需要明确的是，<code>JavaScript</code>并不具有动态作用域。它只有词法作用域，简单明了。但是<code>this</code>机制某种程度上很像动态作用域。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);<span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a=<span class="number">3</span>;</span><br><span class="line">    foo();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a=<span class="number">2</span>;</span><br><span class="line">bar();</span><br></pre></td></tr></table></figure><h3 id="理解-JavaScript-的作用域和作用域链"><a href="#理解-JavaScript-的作用域和作用域链" class="headerlink" title="理解 JavaScript 的作用域和作用域链"></a>理解 JavaScript 的作用域和作用域链</h3><p>作用域链的定义：函数在调用参数时会从函数内部到函数外部逐个”搜索“参数，一直找到参数为止，如果没有声明就返回<code>null</code>，声明了没有赋值就返回<code>undefined</code>，就像沿着一条链子一样去搜索，这就是作用域的链式调用。</p><p>javascrip的全局变量的作用域是全局的，在代码的任何地方都是有定义的。函数的参数和局部变量只在函数体内有定义。在函数内部如果调用一个变量，就会发生上述的作用域链式调用的过程。</p><h3 id="this的原理以及几种不同使用场景的取值"><a href="#this的原理以及几种不同使用场景的取值" class="headerlink" title="this的原理以及几种不同使用场景的取值"></a>this的原理以及几种不同使用场景的取值</h3><p>1.作为对象方法调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = &#123;</span><br><span class="line">    a:<span class="number">0</span>,</span><br><span class="line">    b:<span class="number">0</span></span><br><span class="line">    <span class="keyword">get</span>:function()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.作为函数调用<br>函数也可以直接被调用，此时 <code>this</code> 绑定到全局对象。在浏览器中，<code>window</code> 就是该全局对象。比如下面的例子：函数被调用时，<code>this</code> 被绑定到全局对象，接下来执行赋值语句，相当于隐式的声明了一个全局变量，这显然不是调用者希望的。</p><p>3.作为构造函数调用<br><code>javaScript</code> 支持面向对象式编程，与主流的面向对象式编程语言不同，<code>JavaScript</code> 并没有类（<code>class</code>）的概念，而是使用基于原型（<code>prototype</code>）的继承方式。相应的，<code>JavaScript</code> 中的构造函数也很特殊，如果不使用 <code>new</code>调用，则和普通函数一样。作为又一项约定俗成的准则，构造函数以<strong>大写字母</strong>开头，提醒调用者使用正确的方式调用。如果调用正确，<code>this</code> 绑定到新创建的对象上。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">x, y</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">this</span>.x = x; </span><br><span class="line">    <span class="keyword">this</span>.y = y; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.在call或者apply，bind中调用<br>让我们再一次重申，在 <code>JavaScript</code> 中函数也是对象，对象则有方法，<code>apply</code> 和 <code>call</code> 就是函数对象的方法。这两个方法异常强大，他们允许切换函数执行的上下文环境（<code>context</code>），即 <code>this</code> 绑定的对象。很多 <code>JavaScript</code> 中的技巧以及类库都用到了该方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">x, y</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">this</span>.x = x; </span><br><span class="line">    <span class="keyword">this</span>.y = y; </span><br><span class="line">    <span class="keyword">this</span>.moveTo = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>)</span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.x = x; </span><br><span class="line">        <span class="keyword">this</span>.y = y; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Point(<span class="number">0</span>, <span class="number">0</span>); </span><br><span class="line"><span class="keyword">var</span> p2 = &#123;<span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span>&#125;; </span><br><span class="line">p1.moveTo(<span class="number">1</span>, <span class="number">1</span>); </span><br><span class="line">p1.moveTo.apply(p2, [<span class="number">10</span>, <span class="number">10</span>])</span><br></pre></td></tr></table></figure><h3 id="闭包的实现原理和作用，可以列举几个开发中闭包的实际应用"><a href="#闭包的实现原理和作用，可以列举几个开发中闭包的实际应用" class="headerlink" title="闭包的实现原理和作用，可以列举几个开发中闭包的实际应用"></a>闭包的实现原理和作用，可以列举几个开发中闭包的实际应用</h3><p><strong>原理：</strong>闭包就是能够读取其他函数内部变量的函数。由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成”定义在一个函数内部的函数”。</p><p>所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p><p><strong>作用：</strong>闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。</p><p><strong>应用：</strong>1. 匿名自执行函数 2. 结果缓存 3. 封装局部变量</p><h3 id="理解堆栈溢出和内存泄漏的原理，如何防止"><a href="#理解堆栈溢出和内存泄漏的原理，如何防止" class="headerlink" title="理解堆栈溢出和内存泄漏的原理，如何防止"></a>理解堆栈溢出和内存泄漏的原理，如何防止</h3><p><strong>1、内存泄露：</strong>是指申请的内存执行完后没有及时的清理或者销毁，占用空闲内存，内存泄露过多的话，就会导致后面的程序申请不到内存。因此内存泄露会导致内部内存溢出</p><p><strong>2、堆栈溢出：</strong>由于过多的函数调用，导致调用堆栈无法容纳这些调用的返回地址，一般在递归中产生。堆栈溢出很可能由无限递归（Infinite recursion）产生，但也可能仅仅是过多的堆栈层级</p><p>3、在一些编程软件中，比如c语言中，需要使用malloc来申请内存空间，再使用free释放掉，需要手动清除。而js中是有自己的垃圾回收机制的，一般常用的垃圾收集方法就是标记清除。</p><p><strong>标记清除法：</strong>在一个变量进入执行环境后就给它添加一个标记：进入环境，进入环境的变量不会被释放，因为只要“执行流”进入响应的环境，就可能用到他们。当变量离开环境后，则将其标记为“离开环境”。</p><p><strong>4、常见的内存泄露的原因：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">全局变量引起的内存泄露</span><br><span class="line">闭包</span><br><span class="line">没有被清除的计时器</span><br></pre></td></tr></table></figure><p><strong>5、解决方法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">减少不必要的全局变量</span><br><span class="line">减少闭包的使用（因为闭包会导致内存泄露）</span><br><span class="line">避免死循环的发生</span><br></pre></td></tr></table></figure><h3 id="如何处理循环的异步操作"><a href="#如何处理循环的异步操作" class="headerlink" title="如何处理循环的异步操作"></a>如何处理循环的异步操作</h3><p>在实际开发中，异步总是不可逃避的一个问题，尤其是Node.js端对于数据库的操作涉及大量的异步，同时循环又是不可避免的，想象一下一次一个数据组的存储数据库就是一个典型的循环异步操作，而在循环之后进行查询的话就需要确保之前的数据组已经全部存储在了数据库中。可以得到关于循环的异步操作主要有两个问题：<br>1.如何确保循环的所有异步操作完成之后执行某个其他操作<br>2.循环中的下一步操作依赖于前一步的操作，如何解决</p><p>———————分割线———————-<br><strong>方法一：设置一个flag，在每个异步操作中对flag进行检测</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> func1 = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'foo'</span>);</span><br><span class="line">      <span class="keyword">typeof</span>(callback) !== <span class="string">'function'</span> || callback();</span><br><span class="line">    &#125;, <span class="number">499</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> func2 = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'bar'</span>);</span><br><span class="line">      <span class="keyword">typeof</span>(callback) !== <span class="string">'function'</span> || callback();</span><br><span class="line">    &#125;, <span class="number">500</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> func3 = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'foobar'</span>);</span><br><span class="line">      <span class="keyword">typeof</span>(callback) !== <span class="string">'function'</span> || callback();</span><br><span class="line">    &#125;, <span class="number">501</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> func_arr = [func1, func2, func3];</span><br><span class="line"><span class="keyword">let</span> len = func_arr.length;</span><br><span class="line"><span class="keyword">let</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    func_arr[i](<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        flag++;</span><br><span class="line">        <span class="keyword">if</span>(flag === len) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'job finished'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法二：将所有的循环放在一个promise中，使用then处理</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// promisify those callback functions</span></span><br><span class="line"><span class="keyword">var</span> promisify = <span class="function"><span class="keyword">function</span>(<span class="params">func</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">      func(resolve);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// array can be infinitely long</span></span><br><span class="line"><span class="keyword">var</span> func_arr = [promisify(func1), promisify(func2), promisify(func3)];</span><br><span class="line"></span><br><span class="line">func_arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">cur, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cur.then(next);</span><br><span class="line">&#125;, <span class="built_in">Promise</span>.resolve()).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'job finished'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>方法三：使用递归，在异步操作完成之后调用下一次异步操作</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loop</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (i != func_arr.length) &#123;</span><br><span class="line">    <span class="keyword">return</span> func_arr[i]()</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> loop(i+<span class="number">1</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loop(<span class="number">0</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">loop_times</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'job finished'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>方法四：使用async和await</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">loop</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">await</span> func_arr[i]();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;理解词法作用域和动态作用域&quot;&gt;&lt;a href=&quot;#理解词法作用域和动态作用域&quot; class=&quot;headerlink&quot; title=&quot;理解词法作用域和动态作用域&quot;&gt;&lt;/a&gt;理解词法作用域和动态作用域&lt;/h3&gt;&lt;p&gt;动态作用域不关心函数和作用域是如何声明以及在何处声明
      
    
    </summary>
    
    
      <category term="前端" scheme="http://www.barebear.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://www.barebear.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Javascript基础-原型和原型链</title>
    <link href="http://www.barebear.cn/2020/01/13/Javascript%E5%9F%BA%E7%A1%80-%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>http://www.barebear.cn/2020/01/13/Javascript%E5%9F%BA%E7%A1%80-%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/</id>
    <published>2020-01-13T08:23:27.000Z</published>
    <updated>2020-01-13T10:57:20.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="理解原型设计模式以及-JavaScript-中的原型规则"><a href="#理解原型设计模式以及-JavaScript-中的原型规则" class="headerlink" title="理解原型设计模式以及 JavaScript 中的原型规则"></a>理解原型设计模式以及 JavaScript 中的原型规则</h3><p>原型链：每一个实例对象都有一个<code>__proto__</code>属性（隐式原型），在js内部用来查找原型链；每一个构造函数都有<code>prototype</code>属性（显示原型），用来显示修改对象的原型，实例.<code>__proto__</code>=构造函数.<code>prototype</code>=原型。原型链的特点就是：通过实例.<code>__proto__</code>查找原型上的属性，从子类一直向上查找对象原型的属性，继而形成一个查找链即原型链。</p><h3 id="instanceof-的底层实现原理，手动实现一个-instanceof"><a href="#instanceof-的底层实现原理，手动实现一个-instanceof" class="headerlink" title="instanceof 的底层实现原理，手动实现一个 instanceof"></a>instanceof 的底层实现原理，手动实现一个 instanceof</h3><p>简单说就是判断实例对象的<code>__proto__</code>是不是强等于对象的<code>prototype</code>属性，如果不是继续往原型链上找，直到 <code>__proto__</code> 为 <code>null</code> 为止。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//obj 表示实例对象，object 表示对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">instanceOf</span>(<span class="params">obj, object</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> O = object.prototype;</span><br><span class="line">  obj = obj.__proto__;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123; </span><br><span class="line">      <span class="keyword">if</span> (obj === <span class="literal">null</span>) </span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">      <span class="keyword">if</span> (O === obj) <span class="comment">// 这里重点：当 O 严格等于 obj 时，返回 true </span></span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">      obj = obj.__proto__; </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="理解-JavaScript-的执行上下文栈，可以应用堆栈信息快速定位问题"><a href="#理解-JavaScript-的执行上下文栈，可以应用堆栈信息快速定位问题" class="headerlink" title="理解 JavaScript 的执行上下文栈，可以应用堆栈信息快速定位问题"></a>理解 JavaScript 的执行上下文栈，可以应用堆栈信息快速定位问题</h3><p><strong>执行上下文</strong> 就是当前 <code>JavaScript</code> 代码被解析和执行时所在环境的抽象概念， <code>JavaScript</code> 中运行任何的代码都是在执行上下文中运行。</p><p>执行上下文总共有三种类型：全局执行上下文, 函数执行上下文, <code>Eval</code> 函数执行上下文</p><p><strong>执行栈</strong>，在其他编程语言中也被叫做调用栈，具有 LIFO（后进先出）结构，用于存储在代码执行期间创建的所有执行上下文。</p><h3 id="实现继承的几种方式以及他们的优缺点"><a href="#实现继承的几种方式以及他们的优缺点" class="headerlink" title="实现继承的几种方式以及他们的优缺点"></a>实现继承的几种方式以及他们的优缺点</h3><p><strong>1.原型链继承</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//父类，带属性  </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Super</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">this</span>.flag = <span class="literal">true</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//为了提高复用性，方法绑定在父类原型属性上  </span></span><br><span class="line">Super.prototype.getFlag = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.flag;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//来个子类  </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">this</span>.subFlag = <span class="literal">false</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//实现继承  </span></span><br><span class="line">Sub.prototype = <span class="keyword">new</span> Super;  </span><br><span class="line"><span class="comment">//给子类添加子类特有的方法，注意顺序要在继承之后  </span></span><br><span class="line">Sub.prototype.getSubFlag = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.subFlag;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//构造实例  </span></span><br><span class="line"><span class="keyword">var</span> es5 = <span class="keyword">new</span> Sub;</span><br></pre></td></tr></table></figure><p>缺点：构造函数原型上的属性在所有该构造函数构造的实例上是共享的，即属性没有私有化，原型上属性的改变会作用到所有的实例上。</p><p><strong>2.构造函数继承</strong><br>在构造子类构造函数时内部使用call或apply来调用父类的构造函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Super</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">this</span>.flag = <span class="literal">true</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">    Super.call(<span class="keyword">this</span>)  <span class="comment">//如果父类可以需要接收参数，这里也可以直接传递  </span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Sub();  </span><br><span class="line">obj.flag = flase;  </span><br><span class="line"><span class="keyword">var</span> obj_2 = <span class="keyword">new</span> Sub();  </span><br><span class="line"><span class="built_in">console</span>.log(obj.flag)  <span class="comment">//依然是true，不会相互影响</span></span><br></pre></td></tr></table></figure><p>优缺点：实现了属性的私有化，但是子类无法访问父类原型上的属性。</p><p><strong>3.组合继承</strong><br>利用构造函数和原型链的方法，可以比较完美的实现继承</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Super</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">this</span>.flag = <span class="literal">true</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">Super.prototype.getFlag = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.flag;     <span class="comment">//继承方法  </span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">this</span>.subFlag = flase </span><br><span class="line">    <span class="comment">// 第一次调用父类构造函数 </span></span><br><span class="line">    Super.call(<span class="keyword">this</span>)    <span class="comment">//继承属性  </span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">// 第二次调用父类构造函数</span></span><br><span class="line">Sub.prototype = <span class="keyword">new</span> Super;  </span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Sub();  </span><br><span class="line">Sub.prototype.constructor = Sub;</span><br></pre></td></tr></table></figure><blockquote><p>这里还有个小问题，<code>Sub.prototype = new Super</code>; 会导致<code>Sub.prototype</code>的<code>constructor</code>指向<code>Super</code>;然而<code>constructor</code>的定义是要指向原型属性对应的构造函数的，<code>Sub.prototype</code>是<code>Sub</code>构造函数的原型，所以应该添加一句纠正：<code>Sub.prototype.constructor = Sub</code>;</p></blockquote><p><strong>4.寄生继承</strong><br>即将<code>Sub.prototype=new Super</code>改为<code>Sub.prototype=Object.create(Supper.prototype)</code>，避免了组合继承中构造函数调用了两次的弊端。</p><h3 id="可以描述-new-一个对象的详细过程，手动实现一个-new-操作符"><a href="#可以描述-new-一个对象的详细过程，手动实现一个-new-操作符" class="headerlink" title="可以描述 new 一个对象的详细过程，手动实现一个 new 操作符"></a>可以描述 new 一个对象的详细过程，手动实现一个 new 操作符</h3><p><strong>过程</strong><br>当我们new一个构造函数，得到的实例继承了构造器的构造属性以及原型上的属性。<br>在《JavaScript模式》这本书中，new的过程说的比较直白，当我们new一个构造器，主要有三步：<br>1.以构造器的<code>prototype</code>属性为原型，创建新对象；<br>2.将<code>this</code>(也就是上一句中的新对象)和调用参数传给构造器，执行；<br>3.如果构造器没有手动返回对象，则返回第一步创建的对象</p><p><strong>实现</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myNew</span>(<span class="params">Obj,...args</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(Obj.prototype);<span class="comment">// 使用指定的原型对象及其属性去创建一个新的对象</span></span><br><span class="line">    Obj.apply(obj,args); <span class="comment">// 绑定 this 到obj, 设置 obj 的属性</span></span><br><span class="line">    <span class="keyword">return</span> obj; <span class="comment">// 返回实例</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="理解-es6-class-构造以及继承的底层实现原理"><a href="#理解-es6-class-构造以及继承的底层实现原理" class="headerlink" title="理解 es6 class 构造以及继承的底层实现原理"></a>理解 es6 class 构造以及继承的底层实现原理</h3><p>ES6中通过class关键字，定义类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name,age)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    speakSomething()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"I can speek chinese"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过babel转码之后</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _createClass = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">defineProperties</span>(<span class="params">target, props</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; props.length; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> descriptor = props[i];</span><br><span class="line">            descriptor.enumerable = descriptor.enumerable || <span class="literal">false</span>;</span><br><span class="line">            descriptor.configurable = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"value"</span> <span class="keyword">in</span> descriptor) descriptor.writable = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">Object</span>.defineProperty(target, descriptor.key, descriptor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">Constructor, protoProps, staticProps</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (protoProps) defineProperties(Constructor.prototype, protoProps);</span><br><span class="line">        <span class="keyword">if</span> (staticProps) defineProperties(Constructor, staticProps);</span><br><span class="line">        <span class="keyword">return</span> Constructor;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_classCallCheck</span>(<span class="params">instance, Constructor</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(instance <span class="keyword">instanceof</span> Constructor)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Cannot call a class as a function"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Parent = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">        _classCallCheck(<span class="keyword">this</span>, Parent);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _createClass(Parent, [&#123;</span><br><span class="line">        key: <span class="string">"speakSomething"</span>,</span><br><span class="line">        value: <span class="function"><span class="keyword">function</span> <span class="title">speakSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"I can speek chinese"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Parent;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><p>可以看到ES6类的底层还是通过构造函数去创建的。</p><p>通过<code>ES6</code>创建的类，是不允许你直接调用的。在<code>ES5</code>中，构造函数是可以直接运行的，比如<code>Parent()</code>。但是在<code>ES6</code>就不行。我们可以看到转码的构造函数中有<code>_classCallCheck(this, Parent)</code>语句,这句话是防止你通过构造函数直接运行的。你直接在ES6运行Parent(),这是不允许的,ES6中抛出<code>Class constructor Parent cannot be invoked without &#39;new&#39;</code>错误。转码后的会抛出<code>Cannot call a class as a function</code>.我觉得这样的规范挺好的，能够规范化类的使用方式。</p><p>转码中<code>_createClass</code>方法，它调用<code>Object.defineProperty</code>方法去给新创建的Parent添加各种属性。<code>defineProperties(Constructor.prototype, protoProps)</code>是给原型添加属性。如果你有静态属性，会直接添加到构造函数上<code>defineProperties(Constructor, staticProps)</code>。但是貌似并没有用到，下面可以证明.</p><p>这两个流程走下来，其实就创建了一个类。</p><p>上面讲的是创建一个类的过程，那ES6如何实现继承的呢？还是上面的例子，这次我们给Parent添加静态属性，原型属性，内部属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> height = <span class="number">12</span></span><br><span class="line">    <span class="keyword">constructor</span>(name,age)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    speakSomething()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"I can speek chinese"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Parent.prototype.color = <span class="string">'yellow'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义子类，继承父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> width = <span class="number">18</span></span><br><span class="line">    <span class="keyword">constructor</span>(name,age)&#123;</span><br><span class="line">        <span class="keyword">super</span>(name,age);</span><br><span class="line">    &#125;</span><br><span class="line">    coding()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"I can code JS"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> Child(<span class="string">"job"</span>,<span class="number">30</span>);</span><br><span class="line">c.coding()</span><br></pre></td></tr></table></figure><p>转码之后的代码变成了这样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _createClass = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">defineProperties</span>(<span class="params">target, props</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; props.length; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> descriptor = props[i];</span><br><span class="line">            descriptor.enumerable = descriptor.enumerable || <span class="literal">false</span>;</span><br><span class="line">            descriptor.configurable = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"value"</span> <span class="keyword">in</span> descriptor) descriptor.writable = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">Object</span>.defineProperty(target, descriptor.key, descriptor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">Constructor, protoProps, staticProps</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (protoProps) defineProperties(Constructor.prototype, protoProps);</span><br><span class="line">        <span class="keyword">if</span> (staticProps) defineProperties(Constructor, staticProps);</span><br><span class="line">        <span class="keyword">return</span> Constructor;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_possibleConstructorReturn</span>(<span class="params">self, call</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!self) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">ReferenceError</span>(<span class="string">"this hasn't been initialised - super() hasn't been called"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> call &amp;&amp; (<span class="keyword">typeof</span> call === <span class="string">"object"</span> || <span class="keyword">typeof</span> call === <span class="string">"function"</span>) ? call : self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_inherits</span>(<span class="params">subClass, superClass</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> superClass !== <span class="string">"function"</span> &amp;&amp; superClass !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Super expression must either be null or a function, not "</span> + <span class="keyword">typeof</span> superClass);</span><br><span class="line">    &#125;</span><br><span class="line">    subClass.prototype = <span class="built_in">Object</span>.create(superClass &amp;&amp; superClass.prototype, &#123;</span><br><span class="line">        <span class="keyword">constructor</span>: &#123;</span><br><span class="line">            value: subClass,</span><br><span class="line">            enumerable: <span class="literal">false</span>,</span><br><span class="line">            writable: <span class="literal">true</span>,</span><br><span class="line">            configurable: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (superClass) <span class="built_in">Object</span>.setPrototypeOf ? <span class="built_in">Object</span>.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_classCallCheck</span>(<span class="params">instance, Constructor</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(instance <span class="keyword">instanceof</span> Constructor)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Cannot call a class as a function"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Parent = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">        _classCallCheck(<span class="keyword">this</span>, Parent);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _createClass(Parent, [&#123;</span><br><span class="line">        key: <span class="string">"speakSomething"</span>,</span><br><span class="line">        value: <span class="function"><span class="keyword">function</span> <span class="title">speakSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"I can speek chinese"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Parent;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">Parent.height = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line">Parent.prototype.color = <span class="string">'yellow'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义子类，继承父类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Child = <span class="function"><span class="keyword">function</span> (<span class="params">_Parent</span>) </span>&#123;</span><br><span class="line">    _inherits(Child, _Parent);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">        _classCallCheck(<span class="keyword">this</span>, Child);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> _possibleConstructorReturn(<span class="keyword">this</span>, (Child.__proto__ || <span class="built_in">Object</span>.getPrototypeOf(Child)).call(<span class="keyword">this</span>, name, age));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _createClass(Child, [&#123;</span><br><span class="line">        key: <span class="string">"coding"</span>,</span><br><span class="line">        value: <span class="function"><span class="keyword">function</span> <span class="title">coding</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"I can code JS"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Child;</span><br><span class="line">&#125;(Parent);</span><br><span class="line"></span><br><span class="line">Child.width = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> Child(<span class="string">"job"</span>, <span class="number">30</span>);</span><br><span class="line">c.coding();</span><br></pre></td></tr></table></figure><p>我们可以看到，构造类的方法都没变，只是添加了<code>_inherits</code>核心方法来实现继承，下面我们就看下这个方法做了什么？</p><p>首先是判断父类的类型，然后</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">subClass.prototype = <span class="built_in">Object</span>.create(superClass &amp;&amp; superClass.prototype, &#123;</span><br><span class="line">        <span class="keyword">constructor</span>: &#123;</span><br><span class="line">            value: subClass,</span><br><span class="line">            enumerable: <span class="literal">false</span>,</span><br><span class="line">            writable: <span class="literal">true</span>,</span><br><span class="line">            configurable: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>这段代码翻译下来就是</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">F.prototype = superClass.prototype</span><br><span class="line">subClass.prototype = <span class="keyword">new</span> F()</span><br><span class="line">subClass.prototype.constructor = subClass</span><br></pre></td></tr></table></figure><p>接下来subClass.<strong>proto</strong> = superClass<br>_inherits核心思想就是下面两句</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">subClass.prototype.__proto__ = superClass.prototype</span><br><span class="line">subClass.__proto__ = superClass</span><br></pre></td></tr></table></figure><p>一图胜千言<br><img src="https://tva1.sinaimg.cn/large/006tNbRwly1gav4rqfmbdj30m80dxq4j.jpg" alt=""></p><p>那为什么这样一倒腾，它就实现了继承了呢?<br>首先 <code>subClass.prototype.__proto__ = superClass.prototype</code>保证了<code>c instanceof Parent</code>是<code>true</code>,Child的实例可以访问到父类的属性，包括内部属性，以及原型属性。其次，<code>subClass.__proto__ = superClass</code>，保证了<code>Child.height</code>也能访问到，也就是静态方法。</p><p><code>subClass.__proto__ = superClass</code>不是很好理解，可以通过下面的方式理解</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> A()</span><br><span class="line">a.__proto__ = A.prototype</span><br></pre></td></tr></table></figure><p>a是一个实例，<code>A.prototype</code>是构造方法的原型。通过这种方式，那么a就可以访问<code>A.prototype</code>上面的方法。</p><p>那把 subClass类比成 a，superClass类比成A.prototype，那是不是subClass可以直接访问 superClass的静态属性，静态方法了。</p><blockquote><p>参考资料： <a href="https://segmentfault.com/a/1190000014798678" target="_blank" rel="noopener">ES6类以及继承的实现原理</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;理解原型设计模式以及-JavaScript-中的原型规则&quot;&gt;&lt;a href=&quot;#理解原型设计模式以及-JavaScript-中的原型规则&quot; class=&quot;headerlink&quot; title=&quot;理解原型设计模式以及 JavaScript 中的原型规则&quot;&gt;&lt;/a&gt;理解
      
    
    </summary>
    
    
      <category term="前端" scheme="http://www.barebear.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://www.barebear.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Javascript基础-变量和类型</title>
    <link href="http://www.barebear.cn/2020/01/10/Javascript%E5%9F%BA%E7%A1%80-%E5%8F%98%E9%87%8F%E5%92%8C%E7%B1%BB%E5%9E%8B/"/>
    <id>http://www.barebear.cn/2020/01/10/Javascript%E5%9F%BA%E7%A1%80-%E5%8F%98%E9%87%8F%E5%92%8C%E7%B1%BB%E5%9E%8B/</id>
    <published>2020-01-10T13:17:14.000Z</published>
    <updated>2020-01-10T14:30:27.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="变量和类型"><a href="#变量和类型" class="headerlink" title="变量和类型"></a>变量和类型</h3><h4 id="JavaScript规定了几种语言类型"><a href="#JavaScript规定了几种语言类型" class="headerlink" title="JavaScript规定了几种语言类型"></a><code>JavaScript</code>规定了几种语言类型</h4><p><code>Undefined</code> <code>Null</code> <code>Boolean</code> <code>String</code> <code>Number</code> <code>Symbol</code> <code>Object</code></p><h4 id="为什么有的编程规范要求用-void-0-代替-undefined？"><a href="#为什么有的编程规范要求用-void-0-代替-undefined？" class="headerlink" title="为什么有的编程规范要求用 void 0 代替 undefined？"></a>为什么有的编程规范要求用 void 0 代替 undefined？</h4><p> <code>undefined</code>是全局对象的一个属性，也就是说，它是全局作用域中的一个变量，undefined的最初值就是原始数据类型<code>undefined</code>。ES5之后的标准中，规定了全局变量下的<code>undefined</code>值为只读，不可改写的，但是局部变量中依然可以对之进行改写。而<code>void 0</code>无论什么时候都是返回<code>undefined</code>，这样来看，使用<code>void 0</code>来代替<code>undefined</code>就比较稳妥，不会出错</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.undefined == <span class="keyword">void</span> <span class="number">0</span>); <span class="comment">// true</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeUndefined</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="literal">undefined</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="literal">undefined</span>);</span><br><span class="line">&#125;</span><br><span class="line">changeUndefined(); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h4 id="JavaScript对象的底层数据结构是什么"><a href="#JavaScript对象的底层数据结构是什么" class="headerlink" title="JavaScript对象的底层数据结构是什么"></a><code>JavaScript</code>对象的底层数据结构是什么</h4><p>js基本类型数据都是直接按值存储在栈中的(Undefined、Null、不是new出来的布尔、数字和字符串)，每种类型的数据占用的内存空间的大小是确定的，并由系统自动分配和自动释放。这样带来的好处就是，内存可以及时得到回收，相对于堆来说，更加容易管理内存空间。</p><p>js引用类型数据被存储于堆中 (如对象、数组、函数等，它们是通过拷贝和new出来的）。其实，说存储于堆中，也不太准确，因为，引用类型的数据的地址指针是存储于栈中的，当我们想要访问引用类型的值的时候，需要先从栈中获得对象的地址指针，然后，在通过地址指针找到堆中的所需要的数据</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1gart2xm4svj30m807amz8.jpg" alt=""></p><blockquote><p>参考资料：<a href="https://www.cnblogs.com/zhoulujun/p/10881639.html" target="_blank" rel="noopener">再谈js对象数据结构底层实现原理</a></p></blockquote><h4 id="Symbol类型在实际开发中的应用、可手动实现一个简单的Symbol"><a href="#Symbol类型在实际开发中的应用、可手动实现一个简单的Symbol" class="headerlink" title="Symbol类型在实际开发中的应用、可手动实现一个简单的Symbol"></a><code>Symbol</code>类型在实际开发中的应用、可手动实现一个简单的<code>Symbol</code></h4><p><code>ES6</code> 引入了一种新的原始数据类型 <code>Symbol</code>，表示独一无二的值。</p><p><code>symbol</code>类型的 <code>key</code> 不能被 <code>Object.keys</code> 和 <code>for..of</code> 循环枚举。因此可当作私有变量使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySymbol = <span class="built_in">Symbol</span>(<span class="string">'key'</span>);</span><br><span class="line"><span class="comment">// 第一种写法</span></span><br><span class="line"><span class="keyword">let</span> a = &#123;&#125;;</span><br><span class="line">a[mySymbol] = <span class="string">'Hello!'</span>;</span><br><span class="line"><span class="comment">// 第二种写法</span></span><br><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  [mySymbol]: <span class="string">'Hello!'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>完整实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> root = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> generateName = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> postfix = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">descString</span>)</span>&#123;</span><br><span class="line">            postfix++;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'@@'</span> + descString + <span class="string">'_'</span> + postfix</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> SymbolPolyfill = <span class="function"><span class="keyword">function</span> <span class="title">Symbol</span>(<span class="params">description</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> <span class="keyword">instanceof</span> SymbolPolyfill) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Symbol is not a constructor'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> descString = description === <span class="literal">undefined</span> ? <span class="literal">undefined</span> : <span class="built_in">String</span>(description)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> symbol = <span class="built_in">Object</span>.create(&#123;</span><br><span class="line">            toString: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.__Name__;</span><br><span class="line">            &#125;,</span><br><span class="line">            valueOf: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">Object</span>.defineProperties(symbol, &#123;</span><br><span class="line">            <span class="string">'__Description__'</span>: &#123;</span><br><span class="line">                value: descString,</span><br><span class="line">                writable: <span class="literal">false</span>,</span><br><span class="line">                enumerable: <span class="literal">false</span>,</span><br><span class="line">                configurable: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">'__Name__'</span>: &#123;</span><br><span class="line">                value: generateName(descString),</span><br><span class="line">                writable: <span class="literal">false</span>,</span><br><span class="line">                enumerable: <span class="literal">false</span>,</span><br><span class="line">                configurable: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> symbol;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> forMap = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Object</span>.defineProperties(SymbolPolyfill, &#123;</span><br><span class="line">        <span class="string">'for'</span>: &#123;</span><br><span class="line">            value: <span class="function"><span class="keyword">function</span>(<span class="params">description</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> descString = description === <span class="literal">undefined</span> ? <span class="literal">undefined</span> : <span class="built_in">String</span>(description)</span><br><span class="line">                <span class="keyword">return</span> forMap[descString] ? forMap[descString] : forMap[descString] = SymbolPolyfill(descString);</span><br><span class="line">            &#125;,</span><br><span class="line">            writable: <span class="literal">true</span>,</span><br><span class="line">            enumerable: <span class="literal">false</span>,</span><br><span class="line">            configurable: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'keyFor'</span>: &#123;</span><br><span class="line">            value: <span class="function"><span class="keyword">function</span>(<span class="params">symbol</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> forMap) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (forMap[key] === symbol) <span class="keyword">return</span> key;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            writable: <span class="literal">true</span>,</span><br><span class="line">            enumerable: <span class="literal">false</span>,</span><br><span class="line">            configurable: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    root.SymbolPolyfill = SymbolPolyfill;</span><br><span class="line"></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><blockquote><p>参考资料： <a href="https://segmentfault.com/a/1190000015262174" target="_blank" rel="noopener">ES6 系列之模拟实现 Symbol 类型</a></p></blockquote><h4 id="JavaScript中的变量在内存中的具体存储形式"><a href="#JavaScript中的变量在内存中的具体存储形式" class="headerlink" title="JavaScript中的变量在内存中的具体存储形式"></a><code>JavaScript</code>中的变量在内存中的具体存储形式</h4><p>JavaScript 中的变量分为基本类型和引用类型:</p><p>基本类型: 保存在栈内存中的简单数据段，它们的值都有固定的大小，保存在栈空间，通过按值访问<br><img src="https://tva1.sinaimg.cn/large/006tNbRwly1gart02umn5j31hc0u0af6.jpg" alt=""></p><p>引用类型: 保存在堆内存中的对象，值大小不固定，栈内存中存放的该对象的访问地址指向堆内存中的对象，JavaScript 不允许直接访问堆内存中的位置，因此操作对象时，实际操作对象的引用<br><img src="https://tva1.sinaimg.cn/large/006tNbRwly1gart0gd8c0j31hc0u0teb.jpg" alt=""></p><blockquote><p>参考资料：<a href="https://www.jianshu.com/p/80bb5a01857a" target="_blank" rel="noopener">JavaScript中的变量在内存中的具体存储形式</a></p></blockquote><h4 id="基本类型对应的内置对象，以及他们之间的装箱拆箱操作"><a href="#基本类型对应的内置对象，以及他们之间的装箱拆箱操作" class="headerlink" title="基本类型对应的内置对象，以及他们之间的装箱拆箱操作"></a>基本类型对应的内置对象，以及他们之间的装箱拆箱操作</h4><p><code>String()</code>, <code>Number()</code>, <code>Boolean()</code></p><p>装箱：就是把基本类型转变为对应的对象。装箱分为隐式和显示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 隐式装箱： 每当读取一个基本类型的值时，后台会创建一个该基本类型所对应的对象。</span></span><br><span class="line"><span class="comment">// 在这个基本类型上调用方法，其实是在这个基本类型对象上调用方法。</span></span><br><span class="line"><span class="comment">// 这个基本类型的对象是临时的，它只存在于方法调用那一行代码执行的瞬间，执行方法后立刻被销毁。</span></span><br><span class="line"><span class="keyword">let</span> num=<span class="number">123</span>;</span><br><span class="line">num.toFixed(<span class="number">2</span>); <span class="comment">// '123.00'//上方代码在后台的真正步骤为</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">123</span>);</span><br><span class="line">c.toFixed(<span class="number">2</span>);</span><br><span class="line">c = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 显式装箱: 通过内置对象 Boolean、Object、String 等可以对基本类型进行显示装箱。</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'123'</span>);</span><br></pre></td></tr></table></figure><p>拆箱: 拆箱与装箱相反，把对象转变为基本类型的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">Number</span>([<span class="number">1</span>]); <span class="comment">//1</span></span><br><span class="line"><span class="comment">// 转换演变：</span></span><br><span class="line">[<span class="number">1</span>].valueOf(); <span class="comment">// [1];</span></span><br><span class="line">[<span class="number">1</span>].toString(); <span class="comment">// '1';Number('1'); //1</span></span><br></pre></td></tr></table></figure><blockquote><p>参考资料：<a href="https://www.jianshu.com/p/d66cf6f711a1" target="_blank" rel="noopener">JavaScript 基本类型的装箱与拆箱</a></p></blockquote><h4 id="null和undefined的区别"><a href="#null和undefined的区别" class="headerlink" title="null和undefined的区别"></a><code>null</code>和<code>undefined</code>的区别</h4><p><code>Number</code> 转换的值不同，<code>Number(null)</code> 输出为 <code>0</code>, <code>Number(undefined)</code> 输出为 <code>NaN</code><br><code>null</code> 表示一个值被定义了，但是这个值是空值<br><code>undefined</code> 表示缺少值，即此处应该有值，但是还没有定义</p><p>typeof 结果不同</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span> <span class="comment">// "undefined"</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> <span class="comment">// "object"，尽管返回 `object`，但他依旧是一个原始值，这是 JavaScript 在实现上的一个 bug。</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">NaN</span> <span class="comment">// "number"</span></span><br></pre></td></tr></table></figure><h4 id="至少可以说出三种判断JavaScript数据类型的方式，以及他们的优缺点，如何准确的判断数组类型"><a href="#至少可以说出三种判断JavaScript数据类型的方式，以及他们的优缺点，如何准确的判断数组类型" class="headerlink" title="至少可以说出三种判断JavaScript数据类型的方式，以及他们的优缺点，如何准确的判断数组类型"></a>至少可以说出三种判断JavaScript数据类型的方式，以及他们的优缺点，如何准确的判断数组类型</h4><p>1.<code>typeof</code> —— 返回给定变量的数据类型，可能返回如下字符串：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#39;undefined&#39;——Undefined</span><br><span class="line">&#39;boolean&#39;——Boolean</span><br><span class="line">&#39;string&#39;——String</span><br><span class="line">&#39;number&#39;——Number</span><br><span class="line">&#39;symbol&#39;——Symbol</span><br><span class="line">&#39;object&#39;——Object &#x2F; Null （Null 为空对象的引用）</span><br><span class="line">&#39;function&#39;——Function</span><br><span class="line">&#x2F;&#x2F; 对于一些如 error() date() array()无法判断，都是显示object类型</span><br></pre></td></tr></table></figure><p>2.<code>instanceof</code> 检测 <code>constructor.prototype</code> 是否存在于参数 <code>object</code> 的原型链上，是则返回 <code>true</code>，不是则返回 <code>false</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alert([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) <span class="comment">// true</span></span><br><span class="line">alert(<span class="keyword">new</span> <span class="built_in">Date</span>() <span class="keyword">instanceof</span> <span class="built_in">Date</span>) <span class="comment">// true</span></span><br><span class="line">alert(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">this</span>.name=<span class="string">"22"</span>;&#125; <span class="keyword">instanceof</span> <span class="built_in">Function</span>) <span class="comment">//true</span></span><br><span class="line">alert(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">this</span>.name=<span class="string">"22"</span>;&#125; <span class="keyword">instanceof</span> <span class="function"><span class="keyword">function</span>) //<span class="title">false</span></span></span><br><span class="line"><span class="function">// <span class="title">instanceof</span> 只能用来判断两个对象是否属于实例关系，而不能判断一个对象实例具体属于哪种类型。</span></span><br></pre></td></tr></table></figure><p>3.<code>constructor</code> —— 返回对象对应的构造函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">alert(&#123;&#125;.constructor === <span class="built_in">Object</span>);  =&gt;  <span class="literal">true</span></span><br><span class="line">alert([].constructor === <span class="built_in">Array</span>);  =&gt;  <span class="literal">true</span></span><br><span class="line">alert(<span class="string">'abcde'</span>.constructor === <span class="built_in">String</span>);  =&gt;  <span class="literal">true</span></span><br><span class="line">alert((<span class="number">1</span>).constructor === <span class="built_in">Number</span>);  =&gt;  <span class="literal">true</span></span><br><span class="line">alert(<span class="literal">true</span>.constructor === <span class="built_in">Boolean</span>);  =&gt;  <span class="literal">true</span></span><br><span class="line">alert(<span class="literal">false</span>.constructor === <span class="built_in">Boolean</span>);  =&gt;  <span class="literal">true</span></span><br><span class="line">alert(<span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span>&#123;&#125;.constructor === <span class="built_in">Function</span>);  =&gt;  <span class="literal">true</span></span><br><span class="line">alert(<span class="keyword">new</span> <span class="built_in">Date</span>().constructor === <span class="built_in">Date</span>);  =&gt;  <span class="literal">true</span></span><br><span class="line">alert(<span class="keyword">new</span> <span class="built_in">Array</span>().constructor === <span class="built_in">Array</span>);  =&gt;  <span class="literal">true</span></span><br><span class="line">alert(<span class="keyword">new</span> <span class="built_in">Error</span>().constructor === <span class="built_in">Error</span>);  =&gt;  <span class="literal">true</span></span><br><span class="line">alert(<span class="built_in">document</span>.constructor === HTMLDocument);  =&gt;  <span class="literal">true</span></span><br><span class="line">alert(<span class="built_in">window</span>.constructor === Window);  =&gt;  <span class="literal">true</span></span><br><span class="line">alert(<span class="built_in">Symbol</span>().constructor);    =&gt;    <span class="literal">undefined</span> </span><br><span class="line"><span class="comment">// null 和 undefined 是无效的对象，没有 constructor，因此无法通过这种方式来判断。</span></span><br></pre></td></tr></table></figure><p>4.<code>Object.prototype.toString()</code> 默认返回当前对象的 <code>[[Class]]</code> 。这是一个内部属性，其格式为 <code>[object Xxx]</code> ，是一个字符串，其中 <code>Xxx</code> 就是对象的类型。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">Date</span>);<span class="comment">//[object Date]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">String</span>);<span class="comment">//[object String]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">Math</span>);<span class="comment">//[object Math]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">undefined</span>);<span class="comment">//[object Undefined]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">null</span>);<span class="comment">//[object Null]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="string">''</span>) ;   <span class="comment">// [object String]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="number">123</span>) ;    <span class="comment">// [object Number]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">true</span>) ; <span class="comment">// [object Boolean]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">Symbol</span>()); <span class="comment">//[object Symbol]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">Function</span>()) ; <span class="comment">// [object Function]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">Date</span>()) ; <span class="comment">// [object Date]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call([]) ; <span class="comment">// [object Array]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">RegExp</span>()) ; <span class="comment">// [object RegExp]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">Error</span>()) ; <span class="comment">// [object Error]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">document</span>) ; <span class="comment">// [object HTMLDocument]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">window</span>) ; <span class="comment">//[object global] window 是全局对象 global 的引用</span></span><br><span class="line"><span class="comment">// 比较全面</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>优缺点</th><th>typeof</th><th>instanceof</th><th>constructor</th><th>Object.prototype.toString.call</th></tr></thead><tbody><tr><td>优点</td><td>使用简单</td><td>能检测出引用类型</td><td>基本能检测所有的类型（除了null和undefined）</td><td>检测出所有的类型</td></tr><tr><td>缺点</td><td>只能检测出基本类型（除了null）</td><td>不能检测出基本类型，且不能跨iframe</td><td>constructor易被修改，也不能跨iframe</td><td>IE6下，undefined和null均为Object</td></tr></tbody></table><h4 id="可能发生隐式类型转换的场景以及转换原则，应如何避免或巧妙应用"><a href="#可能发生隐式类型转换的场景以及转换原则，应如何避免或巧妙应用" class="headerlink" title="可能发生隐式类型转换的场景以及转换原则，应如何避免或巧妙应用"></a>可能发生隐式类型转换的场景以及转换原则，应如何避免或巧妙应用</h4><p>一、数字运算符<br>做<code>+</code>操作时，数字被隐式转换成字符串，实际上做的是字符串连接操作。</p><p>做除了加法以外的运算操作时，字符串被隐式转换成数字，实际上做的是数值计算。</p><p>二、<code>.</code>点号操作符<br>数字、字符串等直接量在做.操作调用方法时，隐式地将类型转换成对象。</p><p>三、<code>if</code>语句<br>if()括号里的表达式部分会被隐式转化为布尔类型进行判别。<br><code>null</code>，<code>&quot;&quot;</code>，<code>undefinded</code>, <code>0</code>, <code>false</code> 都会被转化为 <code>false</code></p><p>四、<code>==</code>等号-object array map set</p><table><thead><tr><th>参数</th><th>结果</th></tr></thead><tbody><tr><td>undefined</td><td>“undefined”</td></tr><tr><td>null</td><td>“null”</td></tr><tr><td>boolean</td><td>“true” 或者 “false”</td></tr><tr><td>number</td><td>数字作为字符串。比如，”1.765”</td></tr><tr><td>string</td><td>无需转换</td></tr><tr><td>[]</td><td>“”</td></tr><tr><td>[5,2]</td><td>“5,2”</td></tr><tr><td>{}</td><td>“[object Object]”</td></tr><tr><td>Symbol()</td><td>“Symbol()”</td></tr></tbody></table><blockquote><p>参考资料：<a href="https://juejin.im/post/5cda9178f265da0379419ad1" target="_blank" rel="noopener">JavaScript进阶系列-类型转换、隐式类型转换</a></p></blockquote><h4 id="出现小数精度丢失的原因，JavaScript可以存储的最大数字、最大安全数字，JavaScript处理大数字的方法、避免精度丢失的方法"><a href="#出现小数精度丢失的原因，JavaScript可以存储的最大数字、最大安全数字，JavaScript处理大数字的方法、避免精度丢失的方法" class="headerlink" title="出现小数精度丢失的原因，JavaScript可以存储的最大数字、最大安全数字，JavaScript处理大数字的方法、避免精度丢失的方法"></a>出现小数精度丢失的原因，<code>JavaScript</code>可以存储的最大数字、最大安全数字，<code>JavaScript</code>处理大数字的方法、避免精度丢失的方法</h4><p>1.精度丢失原因，说是 <code>JavaScript</code> 使用了 <code>IEEE 754</code> 规范，二进制储存十进制的小数时不能完整的表示小数</p><p>2.能够表示的最大数字 <code>Number.MAX_VALUE</code> 等于 <code>1.7976931348623157e+308</code> ,最大安全数字 <code>Number.MAX_SAFE_INTEGER</code> 等于 <code>9007199254740991</code></p><p>3.处理大数字: <a href="https://github.com/MikeMcl/bignumber.js" target="_blank" rel="noopener">BigNumber</a></p><p>4.避免精度丢失: 把小数放到位整数（乘倍数），再缩小回原来倍数（除倍数）</p><blockquote><p>参考资料：<a href="https://www.cnblogs.com/littlestart/p/6023976.html" target="_blank" rel="noopener">js数字位数太大导致参数精度丢失问题</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;变量和类型&quot;&gt;&lt;a href=&quot;#变量和类型&quot; class=&quot;headerlink&quot; title=&quot;变量和类型&quot;&gt;&lt;/a&gt;变量和类型&lt;/h3&gt;&lt;h4 id=&quot;JavaScript规定了几种语言类型&quot;&gt;&lt;a href=&quot;#JavaScript规定了几种语言类型&quot; c
      
    
    </summary>
    
    
      <category term="前端" scheme="http://www.barebear.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://www.barebear.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>前端开发工程师自检清单</title>
    <link href="http://www.barebear.cn/2020/01/08/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E8%87%AA%E6%A3%80%E6%B8%85%E5%8D%95/"/>
    <id>http://www.barebear.cn/2020/01/08/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E8%87%AA%E6%A3%80%E6%B8%85%E5%8D%95/</id>
    <published>2020-01-08T12:38:14.000Z</published>
    <updated>2020-01-09T03:09:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>讲道理，前端开发的历史并不长，但是知识之繁杂，技术迭代速度之快是其他技术所不能比拟的。尤其是三大框架逐渐成熟，基本三分天下，前端圈子很大部分也主要围绕他们发展。</p><p><code>winter</code>在他的《重学前端》课程中提到：</p><blockquote><p>到现在为止，前端工程师已经成为研发体系中的重要岗位之一。可是，与此相对的是，我发现极少或者几乎没有大学的计算机专业愿意开设前端课程，更没有系统性的教学方案出现。大部分前端工程师的知识，其实都是来自于实践和工作中零散的学习。</p></blockquote><p>因为前端行业这几年的蓬勃发展，很多同学都是都是自学甚至转行过来的，毕竟相较服务端，前端入门相对简单，而且伴随三大框架成熟的红利，基本只要熟悉一些简单的API就可以上手做项目，虽然开发便捷了，但是这往往也成为了限制自身发展的瓶颈。</p><p>然而停留在这个会用阶段是远远不够的，我们还需要不断探索和深入。现在市面上并不缺少培训机构，但是这么多的课程，哪些对是真的对你有用的，哪些只是长篇大论，盲目的投入到这些学习资料中，你会发现知识留存率很低，而且看的越多不懂的越多，只会让人产生焦虑。</p><p>所以，就像在学校中学习，你拿起书的第一件事情，应该是先看大纲，了解这本书会带给你什么。同理，在学习之前，你需要建立自己的知识体系。它能帮助你更系统性的学习，树立好明确的目标。</p><p>而我，会把我工作和学习中接触到的知识全部归纳到我的知识体系中，将一个一个分散的点串联成面。</p><p>下面我会把我的清单分享给大家(这里的一些内容有我工作中经历的，也有一些是我自己需要补足的地方，这次偷个懒，先晒这一份思维导图，后面的文章会详细介绍)</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1gapfr93jbbj316v0p70wz.jpg" alt=""></p><p>如果你有哪些我没归纳到的点，欢迎在评论区告诉我。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;讲道理，前端开发的历史并不长，但是知识之繁杂，技术迭代速度之快是其他技术所不能比拟的。尤其是三大框架逐渐成熟，基本三分天下，前端圈子很大部分也主要围绕他们发展。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;winter&lt;/code&gt;在他的《重学前端》课程中提到：&lt;/p&gt;
&lt;blockquot
      
    
    </summary>
    
    
      <category term="前端" scheme="http://www.barebear.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="思维导图" scheme="http://www.barebear.cn/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>10分钟上线个人博客</title>
    <link href="http://www.barebear.cn/2020/01/06/10%E5%88%86%E9%92%9F%E4%B8%8A%E7%BA%BF%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://www.barebear.cn/2020/01/06/10%E5%88%86%E9%92%9F%E4%B8%8A%E7%BA%BF%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-01-06T14:59:41.000Z</published>
    <updated>2020-01-08T04:07:54.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>没有手撸过个人网站的程序员不是一个好的程序猿，可是！强撸灰飞湮灭！为了自己的身体健康，还是少撸为妙！不要998，也不要98，完全免费，hexo你直接带回家。通过hexo，可以快速构建个人博客，并搭建到 github 上供他人访问，我们开始吧！</p></blockquote><h2 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h2><ul><li>首先要创建一个github账号</li><li>创建一个repo，名称为<code>yourname.github.io</code>, 其中<code>yourname</code>是你的github名称，按照这个规则创建github page才会生效。</li></ul><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><blockquote><p><code>hexo</code>不需要部署到我们的服务器上，我们的服务器上保存的，其实是基于在hexo通过markdown编写的文章，然后hexo帮我们生成静态的html页面，然后，将生成的html上传到我们的服务器。简而言之：hexo是个静态页面生成、上传的工具</p></blockquote><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><p>新建一个目录，执行初始化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure><table><thead><tr><th>文件/文件夹</th><th>说明</th></tr></thead><tbody><tr><td>_config.yml</td><td>配置文件</td></tr><tr><td>public</td><td>生成的静态文件，这个目录最终会发布到服务器</td></tr><tr><td>scaffolds</td><td>一些通用的markdown模板</td></tr><tr><td>source</td><td>编写的markdown文件，_drafts草稿文件，_posts发布的文章</td></tr><tr><td>themes</td><td>博客的模板</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>在浏览器中访问：<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 就可以看到你本定运行的页面了</p><h2 id="创建新文章"><a href="#创建新文章" class="headerlink" title="创建新文章"></a>创建新文章</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// [layout] 为布局，可选项为 `post`、`page`、`draft`，这将决定文章所在文件路径。</span><br><span class="line">// &lt;title&gt; 为文章标题</span><br><span class="line">// 如 hexo new FirstBlood</span><br><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>找到自己刚刚新建的文件进去编辑，遵循markdown语法</p><h2 id="更换主题皮肤"><a href="#更换主题皮肤" class="headerlink" title="更换主题皮肤"></a>更换主题皮肤</h2><p>默认的主题不是很好看，我们可以去<a href="https://hexo.io/themes/" target="_blank" rel="noopener">官网</a>下载, 甚至可以自己做</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 下载到themes文件夹下</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;litten&#x2F;hexo-theme-yilia yilia</span><br><span class="line"></span><br><span class="line"># 修改 _config.yml 配置</span><br><span class="line">theme: yilia</span><br></pre></td></tr></table></figure><p>然后重新启动服务</p><h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><p>先安装git插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>修改_config.yml中的git配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo:  https://github.com/yourname.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>当然，只是这样肯定不行，你要确保你本地能git push到服务端，所以需要配置本地的ssh公钥(id_rsa.pub)配置到github上。</p><p>发布</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo delpoy</span><br></pre></td></tr></table></figure><h2 id="demo预览"><a href="#demo预览" class="headerlink" title="demo预览"></a>demo预览</h2><p><a href="https://majinhui04.github.io/" target="_blank" rel="noopener">https://majinhui04.github.io/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;没有手撸过个人网站的程序员不是一个好的程序猿，可是！强撸灰飞湮灭！为了自己的身体健康，还是少撸为妙！不要998，也不要98，完全免费，hexo你直接带回家。通过hexo，可以快速构建个人博客，并搭建到 github 上供他人访问，我们开始吧！&lt;/p
      
    
    </summary>
    
    
    
      <category term="周边" scheme="http://www.barebear.cn/tags/%E5%91%A8%E8%BE%B9/"/>
    
      <category term="hexo" scheme="http://www.barebear.cn/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.barebear.cn/2020/01/06/hello-world/"/>
    <id>http://www.barebear.cn/2020/01/06/hello-world/</id>
    <published>2020-01-06T10:14:57.000Z</published>
    <updated>2020-01-06T10:14:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
