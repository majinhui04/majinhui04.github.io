<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>马金慧的博客</title>
  
  <subtitle>斯人如彩虹，遇上方知有</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.barebear.cn/"/>
  <updated>2020-02-21T09:27:43.000Z</updated>
  <id>http://www.barebear.cn/</id>
  
  <author>
    <name>Ma JinHui</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>从 1 到完美，用 node 写一个命令行工具</title>
    <link href="http://www.barebear.cn/node/bin/"/>
    <id>http://www.barebear.cn/node/bin/</id>
    <published>2020-02-21T09:35:56.000Z</published>
    <updated>2020-02-21T09:27:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-package-json-中的-bin-字段"><a href="#1-package-json-中的-bin-字段" class="headerlink" title="1. package.json 中的 bin 字段"></a>1. <code>package.json</code> 中的 <code>bin</code> 字段</h2><p>现在，不管是前端项目还是 <code>node</code> 项目，一般都会用 <code>npm</code> 做包管理工具，而 <code>package.json</code> 是其相关的配置信息。</p><p>对 <code>node</code> 项目而言，模块导出入口文件由 <code>package.json</code> 的 <code>main</code> 字段指定，而如果是要安装到命令行的工具，则是由 <code>package.json</code> 的 <code>bin</code> 字段指定。</p><a id="more"></a><h3 id="1-1-配置单个命令"><a href="#1-1-配置单个命令" class="headerlink" title="1.1 配置单个命令"></a>1.1 配置单个命令</h3><h4 id="与包名同名"><a href="#与包名同名" class="headerlink" title="与包名同名"></a>与包名同名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;pro&quot;,</span><br><span class="line">  &quot;bin&quot;: &quot;bin&#x2F;pro.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样安装的命令名称就是 <code>pro</code>。</p><h4 id="自定义命令名称（与包名不同名）"><a href="#自定义命令名称（与包名不同名）" class="headerlink" title="自定义命令名称（与包名不同名）"></a>自定义命令名称（与包名不同名）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;pro-cli&quot;,</span><br><span class="line">  &quot;bin&quot;: &#123;</span><br><span class="line">    &quot;pro&quot;: &quot;bin&#x2F;pro.js&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样安装的命令名称也是 <code>pro</code>。</p><h3 id="1-2-配置多个命令"><a href="#1-2-配置多个命令" class="headerlink" title="1.2 配置多个命令"></a>1.2 配置多个命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;pro-cli&quot;,</span><br><span class="line">  &quot;bin&quot;: &#123;</span><br><span class="line">    &quot;pro&quot;: &quot;bin&#x2F;pro.js&quot;,</span><br><span class="line">    &quot;mini&quot;: &quot;bin&#x2F;mini.js&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样安装就有 <code>pro</code> 与 <code>mini</code> 两个命令。</p><h2 id="2-对应-bin-pro-js-文件的写法"><a href="#2-对应-bin-pro-js-文件的写法" class="headerlink" title="2. 对应 bin/pro.js 文件的写法"></a>2. 对应 <code>bin/pro.js</code> 文件的写法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env node</span><br><span class="line"></span><br><span class="line">require(&#39;..&#x2F;lib&#x2F;pro&#39;);</span><br></pre></td></tr></table></figure><p>与普通的 <code>js</code> 文件写法一样，只是前面要加上 <code>#!/usr/bin/env node</code>。</p><p>这段前缀代码叫 <code>shebang</code>，具体可以参考 <a href="https://en.wikipedia.org/wiki/Shebang_(Unix)" target="_blank" rel="noopener">Shebang (Unix) - Wikipedia</a>.</p><h2 id="3-安装方式"><a href="#3-安装方式" class="headerlink" title="3. 安装方式"></a>3. 安装方式</h2><h3 id="3-1-全局安装"><a href="#3-1-全局安装" class="headerlink" title="3.1 全局安装"></a>3.1 全局安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g pro-cli</span><br></pre></td></tr></table></figure><p>这种安装方式可以在命令行全局使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pro dev</span><br><span class="line"></span><br><span class="line">pro build</span><br></pre></td></tr></table></figure><h3 id="3-2-本地安装"><a href="#3-2-本地安装" class="headerlink" title="3.2 本地安装"></a>3.2 本地安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save-dev pro-cli</span><br></pre></td></tr></table></figure><p>这种安装方式需要配合 <code>npm</code> 一起使用，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># package.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;dev&quot;: &quot;pro dev&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;pro build&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 使用</span><br><span class="line">npm run dev</span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure><h2 id="4-选择合适的命令行封装库"><a href="#4-选择合适的命令行封装库" class="headerlink" title="4. 选择合适的命令行封装库"></a>4. 选择合适的命令行封装库</h2><p>一般来说，一个命令都会有如下的一些参数：</p><ul><li><code>-v, --version</code> 或 <code>-V, --version</code>: 查看版本号</li><li><code>-h, --help</code>: 查看帮助信息</li></ul><p>如果完全自己来写的，就会很麻烦，尤其是帮助信息。所以，选择一个好的命令行封装库，能够帮我们省去很多工作。</p><p>用的比较多的：</p><ul><li><a href="https://github.com/tj/commander.js" target="_blank" rel="noopener">commander.js</a></li><li><a href="https://github.com/yargs/yargs" target="_blank" rel="noopener">yargs</a></li><li><a href="https://github.com/sindresorhus/meow" target="_blank" rel="noopener">meow</a></li></ul><p>以 <code>commander.js</code> 为例：</p><h3 id="4-1-安装"><a href="#4-1-安装" class="headerlink" title="4.1 安装"></a>4.1 安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install commander --save</span><br></pre></td></tr></table></figure><h3 id="4-2-注册"><a href="#4-2-注册" class="headerlink" title="4.2 注册"></a>4.2 注册</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const commander &#x3D; require(&#39;commander&#39;);</span><br></pre></td></tr></table></figure><p>注册版本号与描述</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">commander</span><br><span class="line">  .version(&#39;0.0.1&#39;)</span><br><span class="line">  .description(&#39;A cli application named pro&#39;);</span><br></pre></td></tr></table></figure><p>注册参数（非子命令参数）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">commander</span><br><span class="line">  .option(&#39;-p, --peppers&#39;, &#39;Add peppers&#39;)</span><br><span class="line">  .option(&#39;-P, --pineapple&#39;, &#39;Add pineapple&#39;)</span><br><span class="line">  .option(&#39;-b, --bbq-sauce&#39;, &#39;Add bbq sauce&#39;)</span><br><span class="line">  .option(&#39;-c, --cheese [type]&#39;, &#39;Add the specified type of cheese [marble]&#39;, &#39;marble&#39;)</span><br></pre></td></tr></table></figure><p>注册子命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">commander</span><br><span class="line">  .command(&#39;rm &lt;dir&gt;&#39;)</span><br><span class="line">  .option(&#39;-r, --recursive&#39;, &#39;Remove recursively&#39;)</span><br><span class="line">  .action((dir, cmd) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;remove &#39; + dir + (cmd.recursive ? &#39; recursively&#39; : &#39;&#39;))</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>解析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">commander.parse(process.argv);</span><br></pre></td></tr></table></figure><h3 id="4-3-使用"><a href="#4-3-使用" class="headerlink" title="4.3 使用"></a>4.3 使用</h3><p>查看版本号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pro -V</span><br><span class="line">pro --version</span><br><span class="line"></span><br><span class="line"># 打印结果</span><br><span class="line">0.0.1</span><br></pre></td></tr></table></figure><p>运行 <code>rm</code> 子命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pro rm dir</span><br></pre></td></tr></table></figure><p>查看帮助（<code>commander</code> 会自动生成）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">pro -h</span><br><span class="line">pro --help</span><br><span class="line"></span><br><span class="line"># 打印结果</span><br><span class="line">Usage: pro [options]</span><br><span class="line"></span><br><span class="line">A cli application named pro</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -h, --help           output usage information</span><br><span class="line">  -V, --version        output the version number</span><br><span class="line">  -p, --peppers        Add peppers</span><br><span class="line">  -P, --pineapple      Add pineapple</span><br><span class="line">  -b, --bbq            Add bbq sauce</span><br><span class="line">  -c, --cheese &lt;type&gt;  Add the specified type of cheese [marble]</span><br><span class="line">  -C, --no-cheese      You do not want any cheese</span><br></pre></td></tr></table></figure><p>更多用法查看 <a href="https://github.com/tj/commander.js" target="_blank" rel="noopener">commander.js</a>。</p><h2 id="5-常用的命令行相关工具库"><a href="#5-常用的命令行相关工具库" class="headerlink" title="5. 常用的命令行相关工具库"></a>5. 常用的命令行相关工具库</h2><h3 id="5-1-minimist-解析命令行的参数"><a href="#5-1-minimist-解析命令行的参数" class="headerlink" title="5.1 minimist: 解析命令行的参数"></a>5.1 <a href="https://github.com/substack/minimist" target="_blank" rel="noopener">minimist</a>: 解析命令行的参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var argv &#x3D; require(&#39;minimist&#39;)(process.argv.slice(2));</span><br><span class="line">console.dir(argv);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ node example&#x2F;parse.js -a beep -b boop</span><br><span class="line">&#123; _: [], a: &#39;beep&#39;, b: &#39;boop&#39; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ node example&#x2F;parse.js -x 3 -y 4 -n5 -abc --beep&#x3D;boop foo bar baz</span><br><span class="line">&#123; _: [ &#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39; ],</span><br><span class="line">  x: 3,</span><br><span class="line">  y: 4,</span><br><span class="line">  n: 5,</span><br><span class="line">  a: true,</span><br><span class="line">  b: true,</span><br><span class="line">  c: true,</span><br><span class="line">  beep: &#39;boop&#39; &#125;</span><br></pre></td></tr></table></figure><p>更多参考 <a href="https://github.com/substack/minimist" target="_blank" rel="noopener">minimist</a>。</p><h3 id="5-2-chalk-让命令行的字符带上颜色"><a href="#5-2-chalk-让命令行的字符带上颜色" class="headerlink" title="5.2 chalk: 让命令行的字符带上颜色"></a>5.2 <a href="https://github.com/chalk/chalk" target="_blank" rel="noopener">chalk</a>: 让命令行的字符带上颜色</h3><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc45e57wn5j30uq03sabk.jpg" alt=""></p><p>更多参考 <a href="https://github.com/chalk/chalk" target="_blank" rel="noopener">chalk</a>。</p><h3 id="5-3-Inquirer-js-让命令行与用户进行交互，如输入、选择等"><a href="#5-3-Inquirer-js-让命令行与用户进行交互，如输入、选择等" class="headerlink" title="5.3 Inquirer.js: 让命令行与用户进行交互，如输入、选择等"></a>5.3 <a href="https://github.com/SBoudrias/Inquirer.js" target="_blank" rel="noopener">Inquirer.js</a>: 让命令行与用户进行交互，如输入、选择等</h3><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc45ff2vorj31500c20ua.jpg" alt=""></p><p>更多参考 <a href="https://github.com/SBoudrias/Inquirer.js" target="_blank" rel="noopener">Inquirer.js</a>。</p><h3 id="5-4-shelljs-跨平台-Unix-shell-命令-的-node-封装"><a href="#5-4-shelljs-跨平台-Unix-shell-命令-的-node-封装" class="headerlink" title="5.4 shelljs: 跨平台 Unix shell 命令 的 node 封装"></a>5.4 <a href="https://github.com/shelljs/shelljs" target="_blank" rel="noopener">shelljs</a>: 跨平台 Unix shell 命令 的 node 封装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">var shell &#x3D; require(&#39;shelljs&#39;);</span><br><span class="line"></span><br><span class="line">if (!shell.which(&#39;git&#39;)) &#123;</span><br><span class="line">  shell.echo(&#39;Sorry, this script requires git&#39;);</span><br><span class="line">  shell.exit(1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Copy files to release dir</span><br><span class="line">shell.rm(&#39;-rf&#39;, &#39;out&#x2F;Release&#39;);</span><br><span class="line">shell.cp(&#39;-R&#39;, &#39;stuff&#x2F;&#39;, &#39;out&#x2F;Release&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Replace macros in each .js file</span><br><span class="line">shell.cd(&#39;lib&#39;);</span><br><span class="line">shell.ls(&#39;*.js&#39;).forEach(function (file) &#123;</span><br><span class="line">  shell.sed(&#39;-i&#39;, &#39;BUILD_VERSION&#39;, &#39;v0.1.2&#39;, file);</span><br><span class="line">  shell.sed(&#39;-i&#39;, &#x2F;^.*REMOVE_THIS_LINE.*$&#x2F;, &#39;&#39;, file);</span><br><span class="line">  shell.sed(&#39;-i&#39;, &#x2F;.*REPLACE_LINE_WITH_MACRO.*\n&#x2F;, shell.cat(&#39;macro.js&#39;), file);</span><br><span class="line">&#125;);</span><br><span class="line">shell.cd(&#39;..&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Run external tool synchronously</span><br><span class="line">if (shell.exec(&#39;git commit -am &quot;Auto-commit&quot;&#39;).code !&#x3D;&#x3D; 0) &#123;</span><br><span class="line">  shell.echo(&#39;Error: Git commit failed&#39;);</span><br><span class="line">  shell.exit(1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多参考 <a href="https://github.com/shelljs/shelljs" target="_blank" rel="noopener">shelljs</a>。</p><h3 id="5-5-blessed-contrib-命令行图表"><a href="#5-5-blessed-contrib-命令行图表" class="headerlink" title="5.5 blessed-contrib: 命令行图表"></a>5.5 <a href="https://github.com/yaronn/blessed-contrib" target="_blank" rel="noopener">blessed-contrib</a>: 命令行图表</h3><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc45f4sk9ij31hc0u0dkd.jpg" alt=""></p><p>更多参考 <a href="https://github.com/yaronn/blessed-contrib" target="_blank" rel="noopener">blessed-contrib</a>。</p><h3 id="5-6-cash-跨平台-linux-命令-的-node-封装"><a href="#5-6-cash-跨平台-linux-命令-的-node-封装" class="headerlink" title="5.6 cash: 跨平台 linux 命令 的 node 封装"></a>5.6 <a href="https://github.com/dthree/cash" target="_blank" rel="noopener">cash</a>: 跨平台 linux 命令 的 node 封装</h3><p>与 <a href="https://github.com/shelljs/shelljs" target="_blank" rel="noopener">shelljs</a> 功能差不多。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const $ &#x3D; require(&#39;cash&#39;);</span><br><span class="line">const out &#x3D; $.ls(&#39;.&#39;, &#123;l: true&#125;);</span><br></pre></td></tr></table></figure><p>更多参考 <a href="https://github.com/dthree/cash" target="_blank" rel="noopener">cash</a>。</p><h3 id="5-7-prompts-又一个让命令行与用户进行交互的工具"><a href="#5-7-prompts-又一个让命令行与用户进行交互的工具" class="headerlink" title="5.7 prompts: 又一个让命令行与用户进行交互的工具"></a>5.7 <a href="https://github.com/terkelg/prompts" target="_blank" rel="noopener">prompts</a>: 又一个让命令行与用户进行交互的工具</h3><p>与 <a href="https://github.com/SBoudrias/Inquirer.js" target="_blank" rel="noopener">Inquirer.js</a> 功能差不多。</p><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc45fnfqngg30rq05r7vd.gif" alt=""></p><p>更多参考 <a href="https://github.com/terkelg/prompts" target="_blank" rel="noopener">prompts</a>。</p><h3 id="5-8-ora-命令行加载中图标"><a href="#5-8-ora-命令行加载中图标" class="headerlink" title="5.8 ora: 命令行加载中图标"></a>5.8 <a href="https://github.com/sindresorhus/ora" target="_blank" rel="noopener">ora</a>: 命令行加载中图标</h3><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc45gaulxfj30j00b0aae.jpg" alt=""></p><p>更多参考 <a href="https://github.com/sindresorhus/ora" target="_blank" rel="noopener">ora</a>。</p><h3 id="5-9-progress-命令行进度条"><a href="#5-9-progress-命令行进度条" class="headerlink" title="5.9 progress: 命令行进度条"></a>5.9 <a href="https://github.com/visionmedia/node-progress" target="_blank" rel="noopener">progress</a>: 命令行进度条</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">downloading [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;             ] 39&#x2F;bps 29% 3.7s</span><br></pre></td></tr></table></figure><p>更多参考 <a href="https://github.com/visionmedia/node-progress" target="_blank" rel="noopener">progress</a>。</p><h3 id="5-10-更多"><a href="#5-10-更多" class="headerlink" title="5.10 更多"></a>5.10 更多</h3><p>更多关于命令行的工具库可以参考 <a href="https://github.com/sindresorhus/awesome-nodejs#command-line-utilities" target="_blank" rel="noopener">command-line-utilities</a>。</p><h2 id="6-比较常用的命令行-APP"><a href="#6-比较常用的命令行-APP" class="headerlink" title="6. 比较常用的命令行 APP"></a>6. 比较常用的命令行 APP</h2><p>命令行相关的应用就很多啦，比如 <code>babel</code>、<code>webpack</code>、<code>rollup</code>、<code>eslint</code> 等，但这些不仅仅是命令行工具。</p><p>下面介绍一些纯命令行应用：</p><ul><li><a href="https://github.com/MrRio/vtop" target="_blank" rel="noopener">vtop</a>: 美美的 linux top 命令界面</li><li><a href="https://github.com/sindresorhus/speed-test" target="_blank" rel="noopener">speed-test</a>: 测试网络链接速度</li><li><a href="https://github.com/indexzero/http-server" target="_blank" rel="noopener">http-server</a>: 零配置启动一个 http 服务器</li><li><a href="https://github.com/sindresorhus/fkill-cli" target="_blank" rel="noopener">fkill-cli</a>: 跨平台 kill 命令</li></ul><p>更多纯命令行应用可以参考 <a href="https://github.com/sindresorhus/awesome-nodejs#command-line-apps" target="_blank" rel="noopener">command-line-apps</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-package-json-中的-bin-字段&quot;&gt;&lt;a href=&quot;#1-package-json-中的-bin-字段&quot; class=&quot;headerlink&quot; title=&quot;1. package.json 中的 bin 字段&quot;&gt;&lt;/a&gt;1. &lt;code&gt;package.json&lt;/code&gt; 中的 &lt;code&gt;bin&lt;/code&gt; 字段&lt;/h2&gt;&lt;p&gt;现在，不管是前端项目还是 &lt;code&gt;node&lt;/code&gt; 项目，一般都会用 &lt;code&gt;npm&lt;/code&gt; 做包管理工具，而 &lt;code&gt;package.json&lt;/code&gt; 是其相关的配置信息。&lt;/p&gt;
&lt;p&gt;对 &lt;code&gt;node&lt;/code&gt; 项目而言，模块导出入口文件由 &lt;code&gt;package.json&lt;/code&gt; 的 &lt;code&gt;main&lt;/code&gt; 字段指定，而如果是要安装到命令行的工具，则是由 &lt;code&gt;package.json&lt;/code&gt; 的 &lt;code&gt;bin&lt;/code&gt; 字段指定。&lt;/p&gt;
    
    </summary>
    
    
      <category term="node" scheme="http://www.barebear.cn/categories/node/"/>
    
    
      <category term="前端" scheme="http://www.barebear.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>前端项目如何管理</title>
    <link href="http://www.barebear.cn/web-extend/project/"/>
    <id>http://www.barebear.cn/web-extend/project/</id>
    <published>2020-02-21T09:32:56.000Z</published>
    <updated>2020-02-21T09:17:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>前端项目的管理分为两个维度：项目内的管理与多项目之间的管理。</p><h2 id="1-项目内的管理"><a href="#1-项目内的管理" class="headerlink" title="1. 项目内的管理"></a>1. 项目内的管理</h2><p>在一个项目内，当有多个开发者一起协作开发时，或者功能越来越多、项目越来越庞大时，保证项目井然有序的进行是相当重要的。</p><p>一般会从下面几点来考证一个项目是否管理得很好：</p><ul><li>可扩展性：能够很方便、清晰的扩展一个页面、组件、模块</li><li>组件化：多个页面之间共用的大块代码可以独立成组件，多个页面、组件之间共用的小块代码可以独立成公共模块</li><li>可阅读性：阅读性良好（包括目录文件结构、代码结构），能够很快捷的找到某个页面、组件的文件，也能快捷的看出项目有哪些页面、组件</li><li>可移植性：能够轻松的对项目架构进行升级，或移植某些页面、组件、模块到其他项目</li><li>可重构性：对某个页面、组件、模块进行重构时，能够保证在重构之后功能不会改变、不会产生新 bug</li><li>开发友好：开发者在开发某一个功能时，能够有比较好的体验（不好的体验比如：多个文件相隔很远）</li><li>协作性：多人协作时，很少产生代码冲突、文件覆盖等问题</li><li>可交接性：当有人要离开项目时，交接给其他人是很方便的</li></ul><a id="more"></a><h3 id="1-1-可扩展性"><a href="#1-1-可扩展性" class="headerlink" title="1.1 可扩展性"></a>1.1 可扩展性</h3><p>对于前端项目而言，可扩展性是并不难的，因为很多时候前端的代码、文件分块都是按照页面来的，所以天然就是一块一块的。</p><p>但这里还是要提一下，因为有些开发者不喜欢分块，把应该分块的东西杂揉在一起，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- src&#x2F;</span><br><span class="line">  - main&#x2F;                    # main 目录</span><br><span class="line">    - css&#x2F;                   # css 集合</span><br><span class="line">      - alpha.css</span><br><span class="line">      - beta.css</span><br><span class="line">      - ...</span><br><span class="line">    - js&#x2F;                    # js 集合</span><br><span class="line">      - alpha.js</span><br><span class="line">      - beta.js</span><br><span class="line">      - ...</span><br><span class="line">    - alpha.html             # alpha 页面</span><br><span class="line">    - beta.html              # beta 页面</span><br><span class="line">    - ...</span><br></pre></td></tr></table></figure><p>更好的方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- src&#x2F;</span><br><span class="line">  - main&#x2F;                    # main 目录</span><br><span class="line">    - alpha&#x2F;                 # alpha 页面</span><br><span class="line">      - index.css            # css 入口文件</span><br><span class="line">      - index.js             # js 入口文件</span><br><span class="line">      - index.html           # html 入口文件</span><br><span class="line">      - ...</span><br><span class="line">    - beta&#x2F;                  # beta 页面</span><br><span class="line">      - index.css</span><br><span class="line">      - index.js</span><br><span class="line">      - index.html</span><br><span class="line">      - ...</span><br><span class="line">    - ...</span><br></pre></td></tr></table></figure><p>使前端项目具有高可扩展性，一般从目录文件结构入手</p><h3 id="1-2-组件化"><a href="#1-2-组件化" class="headerlink" title="1.2 组件化"></a>1.2 组件化</h3><p>这里的组件化是项目内的组件化，我们可以把多个页面之间共用的大块代码独立成组件，多个页面、组件之间共用的小块代码独立成公共模块。</p><p>这样做的目的是为了提高代码的可重用性，避免重复造轮子。另外，也有利于代码之间的解耦。</p><p>比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- src&#x2F;</span><br><span class="line">  - data&#x2F;                    # 常量、静态数据目录</span><br><span class="line">    - data1.js</span><br><span class="line">    - data2.js</span><br><span class="line">    - ...</span><br><span class="line">  - components&#x2F;              # 组件目录</span><br><span class="line">    - componnet1&#x2F;</span><br><span class="line">    - componnet2&#x2F;</span><br><span class="line">    - ...</span><br><span class="line">  - utils&#x2F;                   # 工具函数目录</span><br><span class="line">    - util1.js</span><br><span class="line">    - util2.js</span><br><span class="line">    - ...</span><br><span class="line">  - ...</span><br></pre></td></tr></table></figure><h3 id="1-3-可阅读性"><a href="#1-3-可阅读性" class="headerlink" title="1.3 可阅读性"></a>1.3 可阅读性</h3><p>这里的可阅读性有两个方面：目录文件结构、代码结构。</p><h4 id="1-3-1-目录文件结构"><a href="#1-3-1-目录文件结构" class="headerlink" title="1.3.1 目录文件结构"></a>1.3.1 目录文件结构</h4><p>目录文件结构可阅读性的好与否除了跟开发者有关系外，跟项目的搭建者也有很大的关系，因为如果搭建者在最初就定义好整个项目的目录结构，对后期的开发者是一个很好的约束。</p><p>可阅读性比较差的目录文件结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- src&#x2F;</span><br><span class="line">  - css&#x2F;                     # css 集合</span><br><span class="line">    - main&#x2F;                  # main 目录</span><br><span class="line">      - alpha.css</span><br><span class="line">      - beta.css</span><br><span class="line">      - ...</span><br><span class="line">  - js&#x2F;                      # js 集合</span><br><span class="line">    - main&#x2F;                  # main 目录</span><br><span class="line">      - alpha.js</span><br><span class="line">      - beta.js</span><br><span class="line">      - ...</span><br><span class="line">  - html&#x2F;                    # html 集合</span><br><span class="line">    - main&#x2F;                  # main 目录</span><br><span class="line">      - alpha.html           # alpha 页面</span><br><span class="line">      - beta.html            # beta 页面</span><br><span class="line">      - ...</span><br></pre></td></tr></table></figure><p>可阅读性比较好的目录文件结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- src&#x2F;</span><br><span class="line">  - main&#x2F;                    # main 目录</span><br><span class="line">    - alpha&#x2F;                 # alpha 页面</span><br><span class="line">      - index.css            # css 入口文件</span><br><span class="line">      - index.js             # js 入口文件</span><br><span class="line">      - index.html           # html 入口文件</span><br><span class="line">      - ...</span><br><span class="line">    - beta&#x2F;                  # beta 页面</span><br><span class="line">      - index.css</span><br><span class="line">      - index.js</span><br><span class="line">      - index.html</span><br><span class="line">      - ...</span><br><span class="line">    - ...</span><br></pre></td></tr></table></figure><h4 id="1-3-2-代码结构"><a href="#1-3-2-代码结构" class="headerlink" title="1.3.2 代码结构"></a>1.3.2 代码结构</h4><p>代码结构的可阅读性大部分取决于开发者的水平，但我们可以使用工具帮助开发者书写规范、格式良好的代码。</p><p>主要有下面的工具：</p><ul><li><a href="http://editorconfig.org/" target="_blank" rel="noopener">.editorconfig</a>: 统一每个开发人员的编辑器配置</li><li><a href="https://github.com/eslint/eslint" target="_blank" rel="noopener">eslint</a>: 检查 js 语法（包括 jsx 语法），然后最大程度的矫正不符合规范的代码</li><li><a href="https://github.com/stylelint/stylelint" target="_blank" rel="noopener">stylelint</a>: 检查 css 语法（包括 less, scss 语法），然后最大程度的矫正不符合规范的代码</li><li><a href="https://github.com/prettier/prettier" target="_blank" rel="noopener">prettier</a>: 代码格式优化</li><li><a href="https://github.com/typicode/husky" target="_blank" rel="noopener">husky</a> + <a href="https://github.com/okonet/lint-staged" target="_blank" rel="noopener">lint-staged</a>: 强制开发人员对代码进行检查、自动矫正与优化</li></ul><h3 id="1-4-可移植性"><a href="#1-4-可移植性" class="headerlink" title="1.4 可移植性"></a>1.4 可移植性</h3><p>可能的情况下，让项目具有一定的伸缩性，可以在未来轻松的对项目进行架构升级。</p><p>让项目能够轻松的移植某些页面、组件、模块到其他项目，需要对整个项目代码尽量的解耦与模块化。另外，也与后面会讲到的“项目之间的统一性”有关。</p><h3 id="1-5-可重构性"><a href="#1-5-可重构性" class="headerlink" title="1.5 可重构性"></a>1.5 可重构性</h3><p>对页面、组件的重构是常有的事，但怎样保证在重构之后功能不会改变、不会产生新 bug，这就得靠测试用例了。</p><ul><li>js 模块：<a href="https://github.com/facebook/jest" target="_blank" rel="noopener">jest</a> / <a href="https://github.com/mochajs/mocha" target="_blank" rel="noopener">mocha</a> / <a href="https://github.com/substack/tape" target="_blank" rel="noopener">tape</a> / <a href="https://github.com/avajs/ava" target="_blank" rel="noopener">ava</a></li><li>React 组件：<a href="https://github.com/airbnb/enzyme" target="_blank" rel="noopener">enzyme</a> + <a href="https://github.com/facebook/jest" target="_blank" rel="noopener">jest</a>，另外可以使用 <a href="https://github.com/kentcdodds/react-testing-library" target="_blank" rel="noopener">react-testing-library</a> 代替 <code>react-dom/test-utils</code></li><li>Vue 组件：<a href="https://github.com/vuejs/vue-test-utils" target="_blank" rel="noopener">vue-test-utils</a> + <a href="https://github.com/facebook/jest" target="_blank" rel="noopener">jest</a> / <a href="https://github.com/mochajs/mocha" target="_blank" rel="noopener">mocha</a> / <a href="https://github.com/substack/tape" target="_blank" rel="noopener">tape</a> / <a href="https://github.com/avajs/ava" target="_blank" rel="noopener">ava</a></li></ul><h3 id="1-6-开发友好"><a href="#1-6-开发友好" class="headerlink" title="1.6 开发友好"></a>1.6 开发友好</h3><p>这主要是从目录结构优化着手，比如：</p><p>像下面这种目录结构，如果要编辑一个页面，需要到处找页面相关的文件，编辑器上就会形成一个很长的目录树，一点不友好：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- src&#x2F;</span><br><span class="line">  - css&#x2F;                     # css 集合</span><br><span class="line">    - main&#x2F;                  # main 目录</span><br><span class="line">      - alpha.css</span><br><span class="line">      - beta.css</span><br><span class="line">      - ...        # 中间有 30 个页面</span><br><span class="line">  - js&#x2F;                      # js 集合</span><br><span class="line">    - main&#x2F;                  # main 目录</span><br><span class="line">      - alpha.js</span><br><span class="line">      - beta.js</span><br><span class="line">      - ...        # 中间有 30 个页面</span><br><span class="line">  - html&#x2F;                    # html 集合</span><br><span class="line">    - main&#x2F;                  # main 目录</span><br><span class="line">      - alpha.html           # alpha 页面</span><br><span class="line">      - beta.html            # beta 页面</span><br><span class="line">      - ...        # 中间有 30 个页面</span><br></pre></td></tr></table></figure><p>而像下面这种目录结构，所有的文件都在一个目录下，找文件就很方便，而且很清晰：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- src&#x2F;</span><br><span class="line">  - main&#x2F;                    # main 目录</span><br><span class="line">    - alpha&#x2F;                 # alpha 页面</span><br><span class="line">      - index.css            # css 入口文件</span><br><span class="line">      - index.js             # js 入口文件</span><br><span class="line">      - index.html           # html 入口文件</span><br><span class="line">      - ...</span><br><span class="line">    - beta&#x2F;                  # beta 页面</span><br><span class="line">      - index.css</span><br><span class="line">      - index.js</span><br><span class="line">      - index.html</span><br><span class="line">      - ...</span><br><span class="line">    - ...</span><br></pre></td></tr></table></figure><h3 id="1-7-协作性"><a href="#1-7-协作性" class="headerlink" title="1.7 协作性"></a>1.7 协作性</h3><p>当项目变大、多人协作时，我们就需要管理好哪些是正在开发的代码、哪些是提交测试的代码、哪些是已经上线的代码、如何避免代码冲突与线上新代码被旧代码覆盖等等。</p><p>具体可以参考：<a href="/web-advance/branch">web 项目如何进行 git 多人协作开发</a>。</p><h3 id="1-8-可交接性"><a href="#1-8-可交接性" class="headerlink" title="1.8 可交接性"></a>1.8 可交接性</h3><p>当有人要离开项目时，就需要把他负责的代码交接给别人，但怎么样才能使交接是轻松愉快的？</p><p>那就是文档，包括注释文档、接口文档等。想想，如果没有文档，该怎样交接呢？</p><h2 id="2-多项目之间的管理"><a href="#2-多项目之间的管理" class="headerlink" title="2. 多项目之间的管理"></a>2. 多项目之间的管理</h2><p>多个项目之间，如何管理好项目之间联系，比如共用组件、公共模块等，保证快捷高效开发、不重复造轮子，也是很重要的。</p><p>一般会从下面几点来考证多个项目之间是否管理得很好：</p><ul><li>组件化：多个项目共用的代码应当独立出来，成为一个单独的组件项目</li><li>版本化：组件项目与应用项目都应当版本化管理，特别是组件项目的版本应当符合 <a href="https://semver.org/" target="_blank" rel="noopener">semver</a> 语义化版本规范</li><li>统一性：多个项目之间应当使用相同的技术选型、UI 框架、脚手架、开发工具、构建工具、测试库、目录规范、代码规范等，相同功能应指定使用固定某一个库</li><li>文档化：组件项目一定需要相关的文档，应用项目在必要的时候也要形成相应的文档</li></ul><h3 id="2-1-组件化"><a href="#2-1-组件化" class="headerlink" title="2.1 组件化"></a>2.1 组件化</h3><p>这里的组件化是项目之间的组件化，我们可以把多个项目共用的代码独立出来，成为一个单独的组件项目。</p><p>这样做的目的也是为了提高代码的可重用性，避免重复造轮子。另外，也便于版本化管理组件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">- project1&#x2F;                  # 项目一</span><br><span class="line">  - package.json</span><br><span class="line">  - src&#x2F;</span><br><span class="line">  - ...</span><br><span class="line"></span><br><span class="line">- project2&#x2F;                  # 项目二</span><br><span class="line">  - package.json</span><br><span class="line">  - src&#x2F;</span><br><span class="line">  - ...</span><br><span class="line"></span><br><span class="line">- component1&#x2F;                # 组件一</span><br><span class="line">  - package.json</span><br><span class="line">  - src&#x2F;</span><br><span class="line">  - dist&#x2F;</span><br><span class="line">  - ...</span><br><span class="line"></span><br><span class="line">- component2&#x2F;                # 组件二</span><br><span class="line">  - package.json</span><br><span class="line">  - src&#x2F;</span><br><span class="line">  - dist&#x2F;</span><br><span class="line">  - ...</span><br></pre></td></tr></table></figure><p>在 <code>project1</code> 中使用 <code>component1</code>、<code>component2</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># package.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;component1&quot;: &quot;^0.0.1&quot;,</span><br><span class="line">    &quot;component2&quot;: &quot;^0.0.1&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">import component1 from &#39;component1&#39;;</span><br><span class="line">import component2 from &#39;component2&#39;;</span><br></pre></td></tr></table></figure><p>常用组件有：</p><ul><li><code>@yourCompany/utils</code>: 工具类</li><li><code>@yourCompany/shortcut.css</code>: 快捷 css 类</li><li><code>@yourCompany/data</code>: 常用静态数据</li><li>…</li></ul><p>组件化一般会与私有 npm 仓库一起使用。</p><h3 id="2-2-版本化"><a href="#2-2-版本化" class="headerlink" title="2.2 版本化"></a>2.2 版本化</h3><p>如果应用项目使用 npm 来管理依赖，就是版本化管理了。</p><p>组件项目更不用说了，值得提一下的是组件项目的版本号应当符合 <a href="https://semver.org/" target="_blank" rel="noopener">semver</a> 语义化版本规范。</p><blockquote><p>版本格式：主版本号.次版本号.修订号，版本号递增规则如下：</p><ul><li>主版本号：当你做了不兼容的 API 修改，</li><li>次版本号：当你做了向下兼容的功能性新增，</li><li>修订号：当你做了向下兼容的问题修正。</li></ul><p>先行版本号及版本编译元数据可以加到“主版本号.次版本号.修订号”的后面，作为延伸。</p></blockquote><h3 id="2-3-统一性"><a href="#2-3-统一性" class="headerlink" title="2.3 统一性"></a>2.3 统一性</h3><p>多个项目之间应当使用相同的技术选型、UI 框架、脚手架、开发工具、构建工具、测试库、目录规范、代码规范等，相同功能应指定使用固定某一个库。</p><p>这样做的目的是减少项目之间的环境差异，有利于项目之间的代码移植，也更有利于组件化、代码重用。</p><p>可以参考：</p><ul><li><a href="/web-extend/react">react 前端项目技术选型、开发工具、周边生态</a></li><li><a href="/web-extend/vue">vue 前端项目技术选型、开发工具、周边生态</a></li></ul><h3 id="2-4-文档化"><a href="#2-4-文档化" class="headerlink" title="2.4 文档化"></a>2.4 文档化</h3><p>完善的文档，不管是对组件项目还是应用项目，都是很重要的。</p><p>组件项目需要用文档告诉开发者组件怎么用、有哪些接口；应用项目需要用文档来做小组交流、项目交接等。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端项目的管理分为两个维度：项目内的管理与多项目之间的管理。&lt;/p&gt;
&lt;h2 id=&quot;1-项目内的管理&quot;&gt;&lt;a href=&quot;#1-项目内的管理&quot; class=&quot;headerlink&quot; title=&quot;1. 项目内的管理&quot;&gt;&lt;/a&gt;1. 项目内的管理&lt;/h2&gt;&lt;p&gt;在一个项目内，当有多个开发者一起协作开发时，或者功能越来越多、项目越来越庞大时，保证项目井然有序的进行是相当重要的。&lt;/p&gt;
&lt;p&gt;一般会从下面几点来考证一个项目是否管理得很好：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可扩展性：能够很方便、清晰的扩展一个页面、组件、模块&lt;/li&gt;
&lt;li&gt;组件化：多个页面之间共用的大块代码可以独立成组件，多个页面、组件之间共用的小块代码可以独立成公共模块&lt;/li&gt;
&lt;li&gt;可阅读性：阅读性良好（包括目录文件结构、代码结构），能够很快捷的找到某个页面、组件的文件，也能快捷的看出项目有哪些页面、组件&lt;/li&gt;
&lt;li&gt;可移植性：能够轻松的对项目架构进行升级，或移植某些页面、组件、模块到其他项目&lt;/li&gt;
&lt;li&gt;可重构性：对某个页面、组件、模块进行重构时，能够保证在重构之后功能不会改变、不会产生新 bug&lt;/li&gt;
&lt;li&gt;开发友好：开发者在开发某一个功能时，能够有比较好的体验（不好的体验比如：多个文件相隔很远）&lt;/li&gt;
&lt;li&gt;协作性：多人协作时，很少产生代码冲突、文件覆盖等问题&lt;/li&gt;
&lt;li&gt;可交接性：当有人要离开项目时，交接给其他人是很方便的&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端扩展" scheme="http://www.barebear.cn/categories/%E5%89%8D%E7%AB%AF%E6%89%A9%E5%B1%95/"/>
    
    
      <category term="前端" scheme="http://www.barebear.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>web 应用常见安全漏洞一览</title>
    <link href="http://www.barebear.cn/web-extend/security/"/>
    <id>http://www.barebear.cn/web-extend/security/</id>
    <published>2020-02-21T09:31:56.000Z</published>
    <updated>2020-02-21T09:28:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-SQL-注入"><a href="#1-SQL-注入" class="headerlink" title="1. SQL 注入"></a>1. SQL 注入</h2><p>SQL 注入就是通过给 web 应用接口传入一些特殊字符，达到欺骗服务器执行恶意的 SQL 命令。</p><p>SQL 注入漏洞属于后端的范畴，但前端也可做体验上的优化。</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>当使用外部不可信任的数据作为参数进行数据库的增、删、改、查时，如果未对外部数据进行过滤，就会产生 SQL 注入漏洞。</p><a id="more"></a><p>比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name &#x3D; &quot;外部输入名称&quot;;</span><br><span class="line"></span><br><span class="line">sql &#x3D; &quot;select * from users where name&#x3D;&quot; + name;</span><br></pre></td></tr></table></figure><p>上面的 SQL 语句目的是通过用户输入的用户名查找用户信息，因为由于 SQL 语句是直接拼接的，也没有进行过滤，所以，当用户输入 <code>&#39;&#39; or &#39;1&#39;=&#39;1&#39;</code> 时，这个语句的功能就是搜索 <code>users</code> 全表的记录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from users where name&#x3D;&#39;&#39; or &#39;1&#39;&#x3D;&#39;1&#39;;</span><br></pre></td></tr></table></figure><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>具体的解决方案很多，但大部分都是基于一点：不信任任何外部输入。</p><p>所以，对任何外部输入都进行过滤，然后再进行数据库的增、删、改、查。</p><p>此外，适当的权限控制、不曝露必要的安全信息和日志也有助于预防 SQL 注入漏洞。</p><p>参考 <a href="https://juejin.im/post/5bd5b820e51d456f72531fa8#heading-2" target="_blank" rel="noopener">Web 安全漏洞之 SQL 注入 - 防御方法</a> 了解具体的解决方案。</p><h3 id="推荐参考"><a href="#推荐参考" class="headerlink" title="推荐参考"></a>推荐参考</h3><ul><li><a href="https://juejin.im/post/5bd5b820e51d456f72531fa8" target="_blank" rel="noopener">Web 安全漏洞之 SQL 注入</a></li><li><a href="https://segmentfault.com/a/1190000007520556" target="_blank" rel="noopener">SQL 注入详解</a></li></ul><h2 id="2-XSS-攻击"><a href="#2-XSS-攻击" class="headerlink" title="2. XSS 攻击"></a>2. XSS 攻击</h2><p>XSS 攻击全称跨站脚本攻击（Cross-Site Scripting），简单的说就是攻击者通过在目标网站上注入恶意脚本并运行，获取用户的敏感信息如 Cookie、SessionID 等，影响网站与用户数据安全。</p><p>XSS 攻击更偏向前端的范畴，但后端在保存数据的时候也需要对数据进行安全过滤。</p><h3 id="原因-1"><a href="#原因-1" class="headerlink" title="原因"></a>原因</h3><p>当攻击者通过某种方式向浏览器页面注入了恶意代码，并且浏览器执行了这些代码。</p><p>比如：</p><p>在一个文章应用中（如微信文章），攻击者在文章编辑后台通过注入 <code>script</code> 标签及 <code>js</code> 代码，后端未加过滤就保存到数据库，前端渲染文章详情的时候也未加过滤，这就会让这段 <code>js</code> 代码执行，引起 XSS 攻击。</p><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><p>一个基本的思路是渲染前端页面（不管是客户端渲染还是服务器端渲染）或者动态插入 HTML 片段时，任何数据都不可信任，都要先做 HTML 过滤，然后再渲染。</p><p>参考 <a href="https://segmentfault.com/a/1190000016551188#articleHeader7" target="_blank" rel="noopener">前端安全系列（一）：如何防止 XSS 攻击？ - 攻击的预防</a> 了解具体的解决方案。</p><h3 id="推荐参考-1"><a href="#推荐参考-1" class="headerlink" title="推荐参考"></a>推荐参考</h3><ul><li><a href="https://segmentfault.com/a/1190000016551188" target="_blank" rel="noopener">前端安全系列（一）：如何防止 XSS 攻击？</a></li><li><a href="https://juejin.im/entry/56da82a87664bf0052ebad41" target="_blank" rel="noopener">前端防御 XSS</a></li><li><a href="https://juejin.im/entry/5b4b56fd5188251b1a7b2ac1" target="_blank" rel="noopener">浅说 XSS 和 CSRF</a></li></ul><h2 id="3-CSRF-攻击"><a href="#3-CSRF-攻击" class="headerlink" title="3. CSRF 攻击"></a>3. CSRF 攻击</h2><p>CSRF 攻击全称跨站请求伪造（Cross-site Request Forgery），简单的说就是攻击者盗用了你的身份，以你的名义发送恶意请求。</p><h3 id="原因-2"><a href="#原因-2" class="headerlink" title="原因"></a>原因</h3><p>一个典型的 CSRF 攻击有着如下的流程：</p><ul><li>受害者登录 <code>a.com</code>，并保留了登录凭证（Cookie）</li><li>攻击者引诱受害者访问了 <code>b.com</code></li><li><code>b.com</code> 向 <code>a.com</code> 发送了一个请求：<code>a.com/act=xx</code>（浏览器会默认携带 <code>a.com</code> 的 Cookie）</li><li><code>a.com</code> 接收到请求后，对请求进行验证，并确认是受害者的凭证，误以为是受害者自己发送的请求</li><li><code>a.com</code> 以受害者的名义执行了 <code>act=xx</code></li><li>攻击完成，攻击者在受害者不知情的情况下，冒充受害者，让 <code>a.com</code> 执行了自己定义的操作</li></ul><p>注：上面的过程摘自 <a href="https://segmentfault.com/a/1190000016659945" target="_blank" rel="noopener">前端安全系列之二：如何防止 CSRF 攻击？</a></p><h3 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h3><p>防止 CSRF 攻击需要在服务器端入手，基本的思路是能正确识别是否是用户发起的请求。</p><p>参考 <a href="https://segmentfault.com/a/1190000016659945#articleHeader4" target="_blank" rel="noopener">前端安全系列之二：如何防止 CSRF 攻击？ - 防护策略</a> 了解具体的解决方案。</p><h3 id="推荐参考-2"><a href="#推荐参考-2" class="headerlink" title="推荐参考"></a>推荐参考</h3><ul><li><a href="https://segmentfault.com/a/1190000016659945" target="_blank" rel="noopener">前端安全系列之二：如何防止 CSRF 攻击？</a></li><li><a href="https://juejin.im/post/5ba1a800e51d450e8657f5dd" target="_blank" rel="noopener">Web 安全漏洞之 CSRF</a></li><li><a href="https://juejin.im/entry/5b4b56fd5188251b1a7b2ac1" target="_blank" rel="noopener">浅说 XSS 和 CSRF</a></li></ul><h2 id="4-DDoS-攻击"><a href="#4-DDoS-攻击" class="headerlink" title="4. DDoS 攻击"></a>4. DDoS 攻击</h2><p>DoS 攻击全称拒绝服务（Denial of Service），简单的说就是让一个公开网站无法访问，而 DDoS 攻击（分布式拒绝服务 Distributed Denial of Service）是 DoS 的升级版。</p><p>这个就完全属于后端的范畴了。</p><h3 id="原因-3"><a href="#原因-3" class="headerlink" title="原因"></a>原因</h3><p>攻击者不断地提出服务请求，让合法用户的请求无法及时处理，这就是 DoS 攻击。</p><p>攻击者使用多台计算机或者计算机集群进行 DoS 攻击，就是 DDoS 攻击。</p><h3 id="解决方案-3"><a href="#解决方案-3" class="headerlink" title="解决方案"></a>解决方案</h3><p>防止 DDoS 攻击的基本思路是限流，限制单个用户的流量（包括 IP 等）。</p><p>参考 <a href="https://segmentfault.com/a/1190000016584829#articleHeader19" target="_blank" rel="noopener">DDoS 的攻击及防御 - 防御</a> 了解具体的解决方案。</p><h3 id="推荐参考-3"><a href="#推荐参考-3" class="headerlink" title="推荐参考"></a>推荐参考</h3><ul><li><a href="https://segmentfault.com/a/1190000016584829" target="_blank" rel="noopener">DDoS 的攻击及防御</a></li><li><a href="https://juejin.im/entry/5b7a21256fb9a01a031aef67" target="_blank" rel="noopener">浅谈 DDoS 攻击与防御</a></li><li><a href="https://juejin.im/entry/56d824591ea493005db9d284" target="_blank" rel="noopener">使用 Nginx、Nginx Plus 抵御 DDOS 攻击</a></li></ul><h2 id="5-XXE-漏洞"><a href="#5-XXE-漏洞" class="headerlink" title="5. XXE 漏洞"></a>5. XXE 漏洞</h2><p>XXE 漏洞全称 XML 外部实体漏洞（XML External Entity），当应用程序解析 XML 输入时，如果没有禁止外部实体的加载，导致可加载恶意外部文件和代码，就会造成任意文件读取、命令执行、内网端口扫描、攻击内网网站等攻击。</p><p>这个只在能够接收 XML 格式参数的接口才会出现。</p><h3 id="解决方案-4"><a href="#解决方案-4" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li>禁用外部实体</li><li>过滤用户提交的 XML 数据</li></ol><p>参考 <a href="https://www.cnblogs.com/r00tuser/p/7255939.html" target="_blank" rel="noopener">xxe 漏洞的学习与利用总结</a> 了解具体的解决方案。</p><h3 id="推荐参考-4"><a href="#推荐参考-4" class="headerlink" title="推荐参考"></a>推荐参考</h3><ul><li><a href="https://juejin.im/entry/5b719fdc6fb9a009a0607aaa" target="_blank" rel="noopener">好刚: 6 分钟视频看懂 XXE 漏洞攻击</a></li><li><a href="https://www.cnblogs.com/r00tuser/p/7255939.html" target="_blank" rel="noopener">xxe 漏洞的学习与利用总结</a></li><li><a href="https://www.cnblogs.com/ESHLkangi/p/9245404.html" target="_blank" rel="noopener">XXE 漏洞攻防学习（上）</a></li></ul><h2 id="6-JSON-劫持"><a href="#6-JSON-劫持" class="headerlink" title="6. JSON 劫持"></a>6. JSON 劫持</h2><p>JSON 劫持（JSON Hijacking）是用于获取敏感数据的一种攻击方式，属于 CSRF 攻击的范畴。</p><h3 id="原因-4"><a href="#原因-4" class="headerlink" title="原因"></a>原因</h3><p>一些 Web 应用会把一些敏感数据以 json 的形式返回到前端，如果仅仅通过 Cookie 来判断请求是否合法，那么就可以利用类似 CSRF 的手段，向目标服务器发送请求，以获得敏感数据。</p><p>比如下面的链接在已登录的情况下会返回 json 格式的用户信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.test.com&#x2F;userinfo</span><br></pre></td></tr></table></figure><p>攻击者可以在自己的虚假页面中，加入如下标签：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;http:&#x2F;&#x2F;www.test.com&#x2F;userinfo&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>如果当前浏览器已经登录了 <code>www.test.com</code>，并且 Cookie 未过期，然后访问了攻击者的虚假页面，那么该页面就可以拿到 json 形式的用户敏感信息，因为 <code>script</code> 标签会自动解析 json 数据，生成对应的 js 对象。然后再通过：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object.prototype.__defineSetter__</span><br></pre></td></tr></table></figure><p>这个函数来触发自己的恶意代码。</p><p>但是这个函数在当前的新版本 Chrome 和 Firefox 中都已经失效了。</p><p>注：上面的过程摘自 <a href="https://blog.csdn.net/yjclsx/article/details/80353754" target="_blank" rel="noopener">JSON 和 JSONP 劫持以及解决方法</a></p><h3 id="解决方案-5"><a href="#解决方案-5" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li><code>X-Requested-With</code> 标识</li><li>浏览器 JSON 数据识别</li><li>禁止 Javascript 执行 JSON 数据</li></ol><h3 id="推荐参考-5"><a href="#推荐参考-5" class="headerlink" title="推荐参考"></a>推荐参考</h3><ul><li><a href="https://blog.csdn.net/yjclsx/article/details/80353754" target="_blank" rel="noopener">JSON 和 JSONP 劫持以及解决方法</a></li><li><a href="https://www.cnblogs.com/52php/p/5677775.html" target="_blank" rel="noopener">JSONP 安全攻防技术（JSON 劫持、 XSS 漏洞）</a></li></ul><h2 id="7-暴力破解"><a href="#7-暴力破解" class="headerlink" title="7. 暴力破解"></a>7. 暴力破解</h2><p>这个一般针对密码而言，弱密码（Weak Password）很容易被别人（对你很了解的人等）猜到或被破解工具暴力破解。</p><h3 id="解决方案-6"><a href="#解决方案-6" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li>密码复杂度要足够大，也要足够隐蔽</li><li>限制尝试次数</li></ol><h2 id="8-HTTP-报头追踪漏洞"><a href="#8-HTTP-报头追踪漏洞" class="headerlink" title="8. HTTP 报头追踪漏洞"></a>8. HTTP 报头追踪漏洞</h2><p>HTTP/1.1（RFC2616）规范定义了 HTTP TRACE 方法，主要是用于客户端通过向 Web 服务器提交 TRACE 请求来进行测试或获得诊断信息。</p><p>当 Web 服务器启用 TRACE 时，提交的请求头会在服务器响应的内容（Body）中完整的返回，其中 HTTP 头很可能包括 Session Token、Cookies 或其它认证信息。攻击者可以利用此漏洞来欺骗合法用户并得到他们的私人信息。</p><h3 id="解决方案-7"><a href="#解决方案-7" class="headerlink" title="解决方案"></a>解决方案</h3><p>禁用 HTTP TRACE 方法。</p><h2 id="9-信息泄露"><a href="#9-信息泄露" class="headerlink" title="9. 信息泄露"></a>9. 信息泄露</h2><p>由于 Web 服务器或应用程序没有正确处理一些特殊请求，泄露 Web 服务器的一些敏感信息，如用户名、密码、源代码、服务器信息、配置信息等。</p><p>所以一般需注意：</p><ul><li>应用程序报错时，不对外产生调试信息</li><li>过滤用户提交的数据与特殊字符</li><li>保证源代码、服务器配置的安全</li></ul><h2 id="10-目录遍历漏洞"><a href="#10-目录遍历漏洞" class="headerlink" title="10. 目录遍历漏洞"></a>10. 目录遍历漏洞</h2><p>攻击者向 Web 服务器发送请求，通过在 URL 中或在有特殊意义的目录中附加 <code>../</code>、或者附加 <code>../</code> 的一些变形（如 <code>..\</code> 或 <code>..//</code> 甚至其编码），导致攻击者能够访问未授权的目录，以及在 Web 服务器的根目录以外执行命令。</p><h2 id="11-命令执行漏洞"><a href="#11-命令执行漏洞" class="headerlink" title="11. 命令执行漏洞"></a>11. 命令执行漏洞</h2><p>命令执行漏洞是通过 URL 发起请求，在 Web 服务器端执行未授权的命令，获取系统信息、篡改系统配置、控制整个系统、使系统瘫痪等。</p><h2 id="12-文件上传漏洞"><a href="#12-文件上传漏洞" class="headerlink" title="12. 文件上传漏洞"></a>12. 文件上传漏洞</h2><p>如果对文件上传路径变量过滤不严，并且对用户上传的文件后缀以及文件类型限制不严，攻击者可通过 Web 访问的目录上传任意文件，包括网站后门文件（<code>webshell</code>），进而远程控制网站服务器。</p><p>所以一般需注意：</p><ul><li>在开发网站及应用程序过程中，需严格限制和校验上传的文件，禁止上传恶意代码的文件</li><li>限制相关目录的执行权限，防范 <code>webshell</code> 攻击</li></ul><h2 id="13-其他漏洞"><a href="#13-其他漏洞" class="headerlink" title="13. 其他漏洞"></a>13. 其他漏洞</h2><ol><li>SSLStrip 攻击</li><li>OpenSSL Heartbleed 安全漏洞</li><li>CCS 注入漏洞</li><li>证书有效性验证漏洞</li></ol><h2 id="14-业务漏洞"><a href="#14-业务漏洞" class="headerlink" title="14. 业务漏洞"></a>14. 业务漏洞</h2><p>一般业务漏洞是跟具体的应用程序相关，比如参数篡改（连续编号 ID / 订单、1 元支付）、重放攻击（伪装支付）、权限控制（越权操作）等。</p><p>另外可以参考：<a href="https://blog.csdn.net/xueshao110/article/details/78912988" target="_blank" rel="noopener">6 种常见 web 漏洞坑</a></p><h2 id="15-框架或应用漏洞"><a href="#15-框架或应用漏洞" class="headerlink" title="15. 框架或应用漏洞"></a>15. 框架或应用漏洞</h2><ul><li>WordPress 4.7 / 4.7.1：REST API 内容注入漏洞</li><li>Drupal Module RESTWS 7.x：Remote PHP Code Execution</li><li>SugarCRM 6.5.23：REST PHP Object Injection Exploit</li><li>Apache Struts：REST Plugin With Dynamic Method Invocation Remote Code Execution</li><li>Oracle GlassFish Server：REST CSRF</li><li>QQ Browser 9.6：API 权限控制问题导致泄露隐私模式</li><li>Hacking Docker：Registry API 未授权访问</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-SQL-注入&quot;&gt;&lt;a href=&quot;#1-SQL-注入&quot; class=&quot;headerlink&quot; title=&quot;1. SQL 注入&quot;&gt;&lt;/a&gt;1. SQL 注入&lt;/h2&gt;&lt;p&gt;SQL 注入就是通过给 web 应用接口传入一些特殊字符，达到欺骗服务器执行恶意的 SQL 命令。&lt;/p&gt;
&lt;p&gt;SQL 注入漏洞属于后端的范畴，但前端也可做体验上的优化。&lt;/p&gt;
&lt;h3 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h3&gt;&lt;p&gt;当使用外部不可信任的数据作为参数进行数据库的增、删、改、查时，如果未对外部数据进行过滤，就会产生 SQL 注入漏洞。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端扩展" scheme="http://www.barebear.cn/categories/%E5%89%8D%E7%AB%AF%E6%89%A9%E5%B1%95/"/>
    
    
      <category term="前端" scheme="http://www.barebear.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>前端开发如何做好本地接口模拟</title>
    <link href="http://www.barebear.cn/web-extend/mock/"/>
    <id>http://www.barebear.cn/web-extend/mock/</id>
    <published>2020-02-21T09:30:56.000Z</published>
    <updated>2020-02-21T09:08:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-有什么好处"><a href="#1-有什么好处" class="headerlink" title="1. 有什么好处"></a>1. 有什么好处</h2><p>本地接口模拟最大的好处就是能够使前后端项目解耦，前端更专注于开发，减少线上调试，以此提升开发效率。</p><a id="more"></a><h2 id="2-有哪些途径"><a href="#2-有哪些途径" class="headerlink" title="2. 有哪些途径"></a>2. 有哪些途径</h2><p>本地接口模拟一般分为工具层面和代码层面。</p><h2 id="3-工具层面"><a href="#3-工具层面" class="headerlink" title="3. 工具层面"></a>3. 工具层面</h2><p>就工具层面而言，一般是由项目的构建工具提供的功能。比如，当我们用 <a href="https://github.com/webpack/webpack-dev-server" target="_blank" rel="noopener">webpack-dev-server</a>、<a href="https://github.com/webpack/webpack-dev-middleware" target="_blank" rel="noopener">webpack-dev-middleware</a> + <a href="https://github.com/BrowserSync/browser-sync" target="_blank" rel="noopener">browser-sync</a> 等工具时，就可以向工具里添加本地接口模拟功能。</p><blockquote><p>注：这里不讲解工具如 <code>webpack-dev-server</code>、<code>webpack-dev-middleware</code> + <code>browser-sync</code> 等的用法，如有需要，可以自己去了解一下</p></blockquote><p>下面以 <code>webpack-dev-server</code> 为例进行讲解，其他工具类似。</p><h3 id="3-1-静态文件"><a href="#3-1-静态文件" class="headerlink" title="3.1 静态文件"></a>3.1 静态文件</h3><p>最简单的，我们可以用静态 <code>json</code> 文件做本地接口模拟功能。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">|-- &#x2F;                        # 项目根目录</span><br><span class="line">  |-- mock&#x2F;                  # 模拟数据目录（可以自定义）</span><br><span class="line">    |-- 1.json</span><br><span class="line">    |-- 2.json</span><br><span class="line">    |-- ...</span><br><span class="line"></span><br><span class="line">  |-- ...                    # 其他文件</span><br></pre></td></tr></table></figure><p>然后用 <code>webpack-dev-server</code> 以项目根目录为基地址来开启本地开发调试，在页面中就可以这样访问：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fetch(&#39;&#x2F;mock&#x2F;1.json&#39;);       &#x2F;&#x2F; 访问 1.json</span><br><span class="line">fetch(&#39;&#x2F;mock&#x2F;2.json&#39;);       &#x2F;&#x2F; 访问 2.json</span><br><span class="line"></span><br><span class="line"># 可以将 fetch 换成其他请求方式</span><br></pre></td></tr></table></figure><p>这种方式可以访问项目中所有的文件，不光是 <code>json</code> 文件，其他的如 <code>html</code>、<code>js</code>、<code>css</code> 之类的文本文件、如图片之类的二进制文件也可以访问。另外，只要文件有更新，刷新浏览器页面就可以重新获取新的文件，没有缓存。</p><p>因为本地接口模拟功能主要是针对的返回值为 <code>json</code> 格式的异步请求，所以这种方式主要用 <code>json</code> 文件。</p><p>这种方式是最简单、快捷、使用难度最低的方式。</p><h3 id="3-2-动态注册接口"><a href="#3-2-动态注册接口" class="headerlink" title="3.2 动态注册接口"></a>3.2 动态注册接口</h3><p>使用静态文件做本地接口模拟功能主要存在以下的一些问题：</p><ol><li>静态文件只能以 <code>get</code> 方法访问</li><li>输入数据是静态的，不能做运算、循环、判断等，也不能根据请求参数做出不同的响应</li><li>本地接口名与服务器上的接口名不一样，这就比较麻烦了，每次上线到服务器的时候都得改接口名</li></ol><p>所以，多数情况下，都会采用动态注册接口的方式做本地接口模拟功能。</p><p>这种方式是用 <code>js</code> 文件编写一系列的 <code>路由 =&gt; 响应</code> 映射，然后动态的把定义好的接口注册到工具实例中。</p><p>目录结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">|-- &#x2F;                        # 项目根目录</span><br><span class="line">  |-- mock&#x2F;                  # 模拟数据目录（可以自定义）</span><br><span class="line">    |-- user.js</span><br><span class="line">    |-- home.js</span><br><span class="line">    |-- ...</span><br><span class="line"></span><br><span class="line">  |-- ...                    # 其他文件</span><br></pre></td></tr></table></figure><p>示例 <code>mock</code> 文件的写法（可以自定规范，下面只是演示）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># mock&#x2F;user.js</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  &#39;GET &#x2F;user&#x2F;profile&#39;: &#123; ... &#125;,                  &#x2F;&#x2F; 直接返回一个对象</span><br><span class="line">  &#39;POST &#x2F;user&#x2F;update&#39;: (req, res) &#x3D;&gt; &#123; ... &#125;,    &#x2F;&#x2F; 根据 &#96;req, res&#96; 的自定义响应</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># mock&#x2F;home.js</span><br><span class="line"></span><br><span class="line">const mockjs &#x3D; require(&#39;mockjs&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  &#39;GET &#x2F;home&#x2F;list&#39;: mockjs.mock(&#123;                &#x2F;&#x2F; 用 mockjs 辅助生成假数据</span><br><span class="line">    &#39;list|1-10&#39;: [&#123; &#39;id|+1&#39;: 1 &#125;],</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注：</p><ol><li>上面的写法只是示例，可以自定规范、书写格式等</li><li>可以用 <a href="https://github.com/nuysoft/Mock" target="_blank" rel="noopener">mockjs</a> 库来帮助生成假数据</li></ol><p><code>webpack-dev-server</code> 的相关配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># webpack.config.js</span><br><span class="line"></span><br><span class="line">const beforeDevServer &#x3D; app &#x3D;&gt; &#123;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 在这里读取 mock 目录下的所有文件，按照一定的规范和格式，载入动态接口</span><br><span class="line">  &#x2F;&#x2F; 比如：</span><br><span class="line"></span><br><span class="line">  app.get(&#39;&#x2F;user&#x2F;profile&#39;, function(req, res) &#123;</span><br><span class="line">    res.json(&#123; ... &#125;);                           &#x2F;&#x2F; 返回文件中定义的 &#96;GET &#x2F;user&#x2F;profile&#96; 的值</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  app.post(&#39;&#x2F;user&#x2F;update&#39;, function(req, res) &#123;</span><br><span class="line">    handle(req, res);                            &#x2F;&#x2F; handle：文件中定义的 &#96;POST &#x2F;user&#x2F;update&#96; 的自定义处理函数</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  &#x2F;&#x2F;...</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    before: beforeDevServer,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后用 <code>webpack-dev-server</code> 开启本地开发调试，在页面中就可以这样访问：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fetch(&#39;&#x2F;user&#x2F;profile&#39;);                          &#x2F;&#x2F; 访问 &#x2F;user&#x2F;profile</span><br><span class="line">fetch(&#39;&#x2F;user&#x2F;update&#39;, &#123;method: &#39;post&#39;, body: &#123; ... &#125;&#125;);</span><br><span class="line">                                                 &#x2F;&#x2F; 访问 &#x2F;user&#x2F;update</span><br><span class="line">fetch(&#39;&#x2F;home&#x2F;list&#39;);                             &#x2F;&#x2F; 访问 &#x2F;home&#x2F;list</span><br><span class="line"></span><br><span class="line"># 可以将 fetch 换成其他请求方式</span><br></pre></td></tr></table></figure><p>一般来说，我们还会用上 <a href="https://github.com/paulmillr/chokidar" target="_blank" rel="noopener">chokidar</a> 来监听 <code>mock</code> 目录下的文件变动，来更新路由及其响应，以此能够做到每次访问到的都是最新的资源（因为 <code>node</code> 针对某个模块只会加载一次）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const chokidar &#x3D; require(&#39;chokidar&#39;);</span><br><span class="line"></span><br><span class="line">const watcher &#x3D; chokidar.watch(&#39;.&#x2F;mock&#39;);</span><br><span class="line">watcher.on(&#39;change&#39;, path &#x3D;&gt; &#123;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 先清除模块缓存，保证加载最新的资源</span><br><span class="line">  if (require.cache[path]) delete require.cache[path];</span><br><span class="line"></span><br><span class="line">  const mapObj &#x3D; require(path);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 接下来把映射对象 mapObj 重新映射到 app 中</span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这种方式比较复杂，尤其是对项目搭建者要求比较高，需要对相关工具有深入的了解，好在社区已经有封装好的工具：<a href="https://github.com/sorrycc/roadhog" target="_blank" rel="noopener">roadhog</a>。</p><p>但这种方式对使用者是很棒的，因为能够完全模拟服务器接口，包括接口名、HTTP 方法、参数、返回值等，所以同样的代码既可以在本地运行，也可以在服务器上运行。</p><p>所以，这也是比较推荐的方式。</p><blockquote><p>注：上面的代码只是演示构建过程，并不保证可以运行</p></blockquote><h3 id="3-3-使用代理"><a href="#3-3-使用代理" class="headerlink" title="3.3 使用代理"></a>3.3 使用代理</h3><p>这种方式是把本地模拟文件写在另一个单独项目里，然后使用使用代理的方式，访问模拟接口。</p><p><code>mock</code> 项目（以 <a href="https://github.com/koajs/koa" target="_blank" rel="noopener">koa</a> 为例）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">const Koa &#x3D; require(&#39;koa&#39;);</span><br><span class="line">const Router &#x3D; require(&#39;koa-router&#39;);</span><br><span class="line"></span><br><span class="line">const app &#x3D; new Koa();</span><br><span class="line">const router &#x3D; new Router();</span><br><span class="line"></span><br><span class="line">router.get(&#39;&#x2F;api&#x2F;user&#x2F;profile&#39;, (ctx, next) &#x3D;&gt; &#123;</span><br><span class="line">  ctx.body &#x3D; &#123; ... &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.post(&#39;&#x2F;api&#x2F;user&#x2F;update&#39;, (ctx, next) &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app</span><br><span class="line">  .use(router.routes())</span><br><span class="line">  .use(router.allowedMethods());</span><br><span class="line"></span><br><span class="line">app.listen(3000);</span><br></pre></td></tr></table></figure><p><code>app</code> 应用项目：</p><p><code>webpack-dev-server</code> 的相关配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># webpack.config.js</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  &#x2F;&#x2F;...</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      &#39;&#x2F;api&#39;: &#39;http:&#x2F;&#x2F;localhost:3000&#39;            &#x2F;&#x2F; 把所有 &#96;&#x2F;api&#96; 开头的接口都代理到 &#96;mock&#96; 项目中</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后用 <code>webpack-dev-server</code> 开启本地开发调试，在页面中就可以这样访问：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fetch(&#39;&#x2F;api&#x2F;user&#x2F;profile&#39;);                      &#x2F;&#x2F; 访问 mock 项目的 &#x2F;api&#x2F;user&#x2F;profile</span><br><span class="line">fetch(&#39;&#x2F;api&#x2F;user&#x2F;update&#39;, &#123;method: &#39;post&#39;, body: &#123; ... &#125;&#125;);</span><br><span class="line">                                                 &#x2F;&#x2F; 访问 mock 项目的 &#x2F;api&#x2F;user&#x2F;update</span><br><span class="line"></span><br><span class="line"># 可以将 fetch 换成其他请求方式</span><br></pre></td></tr></table></figure><p>一般来说，我们还会用上 <a href="https://github.com/remy/nodemon" target="_blank" rel="noopener">nodemon</a> 来监听 <code>mock</code> 项目中的文件变动，自动重启 <code>mock</code> 应用程序，以此能够做到每次访问到的都是最新的资源（因为 <code>node</code> 针对某个模块只会加载一次）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nodemon app.js</span><br></pre></td></tr></table></figure><p>这种方式可以统一管理多个项目的数据模拟文件，多个项目可以共享一些模拟数据。</p><h3 id="3-4-线上接口模拟"><a href="#3-4-线上接口模拟" class="headerlink" title="3.4 线上接口模拟"></a>3.4 线上接口模拟</h3><p>有些时候，当我们在产品环境的时候（在线上）也可能想用模拟数据（比如 APP、微信小程序、用于演示的 web 应用等），或者需要一个线上的地方来统一管理模拟数据时，就需要线上接口模拟了。</p><p>线上接口模拟拥有完备的 UI 操作界面，可以添加多个用户、多个团队、多个仓库，可以生成为每一个请求参数添加类型限定、描述，为响应数据字段添加描述等。</p><p>因为是在线上的模拟数据，所以在任何地方都可用，不管是本地开发，还是线上调试、演示，都是可用的。</p><p>比较有名的线上接口模拟工具有：</p><ul><li><a href="https://github.com/easy-mock/easy-mock" target="_blank" rel="noopener">easy-mock</a>：线上演示地址 <a href="https://easy-mock.com/" target="_blank" rel="noopener">https://easy-mock.com/</a></li><li><a href="https://github.com/thx/RAP" target="_blank" rel="noopener">RAP</a> / <a href="https://github.com/thx/rap2-delos" target="_blank" rel="noopener">rap2-delos</a> + <a href="https://github.com/thx/rap2-dolores" target="_blank" rel="noopener">rap2-dolores</a>：阿里出品，线上演示地址 <a href="http://rap2.taobao.org/" target="_blank" rel="noopener">http://rap2.taobao.org/</a></li></ul><h4 id="3-4-1-easy-mock"><a href="#3-4-1-easy-mock" class="headerlink" title="3.4.1 easy-mock"></a>3.4.1 easy-mock</h4><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc44vnkqo8j30uj0mlq80.jpg" alt=""></p><blockquote><p>环境需求：Node.js (&gt;= v8.9) &amp; MongoDB (&gt;= v3.4) &amp; Redis（&gt;= v4.0）</p></blockquote><p>安装步骤请参考官方的文档 <a href="https://github.com/easy-mock/easy-mock#quick-start" target="_blank" rel="noopener">easy-mock#quick-start</a></p><p><code>easy-mock</code> 主要提供了以下的一些功能：</p><ul><li>支持接口代理</li><li>支持快捷键操作</li><li>支持协同编辑</li><li>支持团队项目</li><li>支持 RESTful</li><li>支持 <a href="https://swagger.io" target="_blank" rel="noopener">Swagger</a> | OpenAPI Specification (<a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/1.2.md" target="_blank" rel="noopener">1.2</a> &amp; <a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md" target="_blank" rel="noopener">2.0</a> &amp; <a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md" target="_blank" rel="noopener">3.0</a>)<ul><li>基于 Swagger 快速创建项目</li><li>支持显示接口入参与返回值</li><li>支持显示实体类</li></ul></li><li>支持灵活性与扩展性更高的响应式数据开发</li><li>支持自定义响应配置（例：status/headers/cookies）</li><li>支持 <a href="http://mockjs.com/" target="_blank" rel="noopener">Mock.js</a> 语法</li><li>支持 <a href="https://github.com/ElemeFE/restc" target="_blank" rel="noopener">restc</a> 方式的接口预览</li></ul><h4 id="3-4-2-RAP-rap2-delos-rap2-dolores"><a href="#3-4-2-RAP-rap2-delos-rap2-dolores" class="headerlink" title="3.4.2 RAP / rap2-delos + rap2-dolores"></a>3.4.2 RAP / rap2-delos + rap2-dolores</h4><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc44w0x59oj31090hqdhg.jpg" alt=""></p><blockquote><p>环境需求：Node.js (&gt;= v8.9) &amp; MySQL (&gt;= v5.7) &amp; Redis（&gt;= v4.0）</p></blockquote><p>RAP 目前有两个版本，第一个版本的 <a href="https://github.com/thx/RAP" target="_blank" rel="noopener">RAP</a> 已经被官方废弃了，建议用第二个版本。</p><p>RAP2 分成了两个包：</p><ul><li><a href="https://github.com/thx/rap2-delos" target="_blank" rel="noopener">rap2-delos</a>：后端数据 API 服务器</li><li><a href="https://github.com/thx/rap2-dolores" target="_blank" rel="noopener">rap2-dolores</a>：前端静态资源</li></ul><p>RAP2 的安装步骤要麻烦一些，<code>rap2-delos</code> 可以参考官方文档 <a href="https://github.com/thx/rap2-delos#%E9%83%A8%E7%BD%B2" target="_blank" rel="noopener">rap2-delos#部署</a>、<a href="https://github.com/thx/rap2-delos/issues/119" target="_blank" rel="noopener">非官方 rap2-delos 部署文档</a>，<code>rap2-dolores</code> 可以参考官方文档 <a href="https://github.com/thx/rap2-dolores#deployment-%E9%83%A8%E7%BD%B2" target="_blank" rel="noopener">rap2-dolores#deployment-部署</a>。</p><p>RAP2 提供了与 <code>easy-mock</code> 类似的功能，但比 <code>easy-mock</code> 要更强大一些，当然也要复杂一些，比如：</p><ul><li>对请求参数支持更完备，比如 <code>headers</code>、<code>query params</code>、<code>body params</code></li><li>对响应数据支持更完备，比如可以为每个字段添加描述、限定类型等</li></ul><h4 id="3-4-3-两者之间比较"><a href="#3-4-3-两者之间比较" class="headerlink" title="3.4.3 两者之间比较"></a>3.4.3 两者之间比较</h4><p>RAP2 比 <code>easy-mock</code> 要更强大一些，但也要复杂一些，所以追求功能完备的可以用 RAP2，追求简单快捷的可以用 <code>easy-mock</code>。</p><h2 id="4-代码层面"><a href="#4-代码层面" class="headerlink" title="4. 代码层面"></a>4. 代码层面</h2><p>从上面可以看出，除了第二种方式 <code>动态注册接口</code> 之外，其他的方式都不能做到完全模拟服务器环境，至少服务器接口地址与本地模拟地址不一样，这就有一个问题：每次上线前都得改成服务器地址。</p><p>另外，前端与后端对接的过程中也总是难免会遇到一些问题：</p><ul><li>前端传的参数与后端所需的参数难以保持一致：比如分页，前端定的 <code>page</code>、从 1 开始，后端定的 <code>pageNum</code>、从 0 开始</li><li>前端需要的数据与后端返回的数据相差很大，需要对返回的数据做处理</li><li>后端可能更改字段名或者数据类型，导致前端要查找、并更新相应的代码</li></ul><p>一种好的、解决这些问题的方式是对应用进行分层、把异步请求进行隔离封装。</p><p>我一般会用 <a href="https://github.com/senntyou/see-fetch" target="_blank" rel="noopener">see-fetch</a>、<a href="https://github.com/senntyou/see-ajax" target="_blank" rel="noopener">see-ajax</a> 对异步请求进行隔离封装。</p><p>注：<a href="https://github.com/senntyou/see-fetch" target="_blank" rel="noopener">see-fetch</a> 是对 <code>window.fetch</code> 的封装，<a href="https://github.com/senntyou/see-ajax" target="_blank" rel="noopener">see-ajax</a> 是对 <code>XMLHttpRequest</code> 对象的封装。</p><h3 id="4-1-以-see-fetch-为例进行说明："><a href="#4-1-以-see-fetch-为例进行说明：" class="headerlink" title="4.1 以 see-fetch 为例进行说明："></a>4.1 以 see-fetch 为例进行说明：</h3><p>可以在代码中设置多个内部环境，然后针对不同的外部环境设置不同的内部环境（如：本地环境、线上环境等），这样就可以做到不改代码，只改一个环境值。</p><p>如果搭配 <a href="https://webpack.js.org/plugins/define-plugin/" target="_blank" rel="noopener">define-plugin</a>，连环境值都不需要改，直接由 <code>define-plugin</code> 在运行的过程中指定。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import seeFetch from &#39;see-fetch&#39;;</span><br><span class="line"></span><br><span class="line">seeFetch.setEnv(0&#x2F;1&#x2F;2&#x2F;3);</span><br><span class="line"></span><br><span class="line">seeFetch.setEnv(__SEE_ENV__);          &#x2F;&#x2F; __SEE_ENV__ 由 define-plugin 运行中指定</span><br></pre></td></tr></table></figure><p>配置一个异步请求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">seeFetch.config(name, &#123;                &#x2F;&#x2F; 定义一个名为 name 的异步请求（下面的配置可以是多环境，每个环境可以设置不同的值）</span><br><span class="line">  method,                              &#x2F;&#x2F; 当前请求使用什么 http 方法</span><br><span class="line">  stringify,</span><br><span class="line">  settings,</span><br><span class="line">  url,                                 &#x2F;&#x2F; 当前请求 url 地址</span><br><span class="line">  req,                                 &#x2F;&#x2F; 请求参数键名的映射，比如 &#96;page &#x3D;&gt; pageNum&#96;</span><br><span class="line">  pre,                                 &#x2F;&#x2F; 操作请求参数，比如 page 从 1 开始改成从 0 开始</span><br><span class="line">  refactor,                            &#x2F;&#x2F; 重构响应数据，如字段重命名、类型转换等</span><br><span class="line">  post,                                &#x2F;&#x2F; 操作响应数据，以把数据转换成自己所需要的数据</span><br><span class="line">  implement,                           &#x2F;&#x2F; 自定义请求，比如后端返回一个模板字符串，而不是接口</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>发起访问：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">seeFetch(name, params).then(result &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; 这里的 result 是经过格式化后的最终数据</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>从上面可以看出：一个请求的不确定性都被封装到了配置中，不管是接口地址更新、前端请求参数与后端不一致、后端响应数据与前端所需的差异很大等，都可以在配置中进行操作，而丝毫不需要改其他地方的代码。</p><p>这样，如果后端接口有什么改动的，只需要找到配置文件进行更新，而不用在项目中找哪里使用了这个接口。</p><p>如此，既能很好的使用本地数据模拟，也可以从容应对后端接口的改动，便能事半功倍。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-有什么好处&quot;&gt;&lt;a href=&quot;#1-有什么好处&quot; class=&quot;headerlink&quot; title=&quot;1. 有什么好处&quot;&gt;&lt;/a&gt;1. 有什么好处&lt;/h2&gt;&lt;p&gt;本地接口模拟最大的好处就是能够使前后端项目解耦，前端更专注于开发，减少线上调试，以此提升开发效率。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端扩展" scheme="http://www.barebear.cn/categories/%E5%89%8D%E7%AB%AF%E6%89%A9%E5%B1%95/"/>
    
    
      <category term="前端" scheme="http://www.barebear.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>h5 与原生 app 交互的原理</title>
    <link href="http://www.barebear.cn/web-extend/h5-app/"/>
    <id>http://www.barebear.cn/web-extend/h5-app/</id>
    <published>2020-02-21T09:22:56.000Z</published>
    <updated>2020-02-21T08:56:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>现在移动端 web 应用，很多时候都需要与原生 app 进行交互、沟通（运行在 <code>webview</code> 中），比如微信的 <code>jssdk</code>，通过 <code>window.wx</code> 对象调用一些原生 app 的功能。所以，这次就来捋一捋 h5 与原生 app 交互的原理。</p><p>h5 与原生 app 的交互，本质上说，就是两种调用：</p><ol><li>app 调用 h5 的代码</li><li>h5 调用 app 的代码</li></ol><a id="more"></a><h2 id="1-app-调用-h5-的代码"><a href="#1-app-调用-h5-的代码" class="headerlink" title="1. app 调用 h5 的代码"></a>1. app 调用 h5 的代码</h2><p>因为 app 是宿主，可以直接访问 h5，所以这种调用比较简单，就是在 h5 中曝露一些全局对象（包括方法），然后在原生 app 中调用这些对象。</p><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc44jiugolj30sg09tweo.jpg" alt=""></p><p><strong><em>javascript</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">window.sdk &#x3D; &#123;</span><br><span class="line">  double &#x3D; value &#x3D;&gt; value * 2,</span><br><span class="line">  triple &#x3D; value &#x3D;&gt; value * 3,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong><em>android</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">webview.evaluateJavascript(&#39;window.sdk.double(10)&#39;, new ValueCallback&lt;String&gt;() &#123;</span><br><span class="line">  @Override</span><br><span class="line">  public void onReceiveValue(String s) &#123;</span><br><span class="line">    &#x2F;&#x2F; 20</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong><em>ios</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NSString *func &#x3D; @&quot;window.sdk.double(10)&quot;;</span><br><span class="line">NSString *str &#x3D; [webview stringByEvaluatingJavaScriptFromString:func]; &#x2F;&#x2F; 20</span><br></pre></td></tr></table></figure><h2 id="2-h5-调用-app-的代码"><a href="#2-h5-调用-app-的代码" class="headerlink" title="2. h5 调用 app 的代码"></a>2. h5 调用 app 的代码</h2><p>因为 h5 不能直接访问宿主 app，所以这种调用就相对复杂一点。</p><p>这种调用常用有两种方式：</p><ol><li>由 app 向 h5 注入一个全局 <code>js</code> 对象，然后在 h5 直接访问这个对象</li><li>由 h5 发起一个自定义协议请求，app 拦截这个请求后，再由 app 调用 h5 中的回调函数</li></ol><h3 id="2-1-由-app-向-h5-注入一个全局-js-对象"><a href="#2-1-由-app-向-h5-注入一个全局-js-对象" class="headerlink" title="2.1 由 app 向 h5 注入一个全局 js 对象"></a>2.1 由 app 向 h5 注入一个全局 <code>js</code> 对象</h3><p>这种方式沟通机制简单，比较好理解，并且对于 h5 来说，没有新的东西，所以是比较推荐的一种方式。但这种方式可能存在安全隐患，详细查看 <a href="https://www.jianshu.com/p/3a345d27cd42" target="_blank" rel="noopener">你不知道的 Android WebView 使用漏洞</a>。</p><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc44jrov37j30ry09tt8u.jpg" alt=""></p><p><strong><em>android</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">webview.addJavascriptInterface(new Object() &#123;</span><br><span class="line">  @JavascriptInterface</span><br><span class="line">  public int double(value) &#123;</span><br><span class="line">    return value * 2;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @JavascriptInterface</span><br><span class="line">  public int triple(value) &#123;</span><br><span class="line">    return value * 3;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &quot;appSdk&quot;);</span><br></pre></td></tr></table></figure><p><strong><em>ios</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@interface AppSdk : NSObject</span><br><span class="line">&#123;&#125;</span><br><span class="line">- (int) double:(int)value;</span><br><span class="line">- (int) triple:(int)value;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation AppSdk</span><br><span class="line">- (int) double:(int)value &#123;</span><br><span class="line">  return value * 2;</span><br><span class="line">&#125;</span><br><span class="line">- (int) triple:(int)value &#123;</span><br><span class="line">  return value * 3;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">JSContext *context&#x3D;[webview valueForKeyPath:@&quot;documentView.webView.mainFrame.javaScriptContext&quot;];</span><br><span class="line"></span><br><span class="line">AppSdk *appSdk &#x3D; [AppSdk new];</span><br><span class="line"></span><br><span class="line">context[@&quot;appSdk&quot;] &#x3D; appSdk;</span><br></pre></td></tr></table></figure><p><strong><em>javascript</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.appSdk.double(10); &#x2F;&#x2F; 20</span><br></pre></td></tr></table></figure><h3 id="2-2-由-h5-发起一个自定义协议请求"><a href="#2-2-由-h5-发起一个自定义协议请求" class="headerlink" title="2.2 由 h5 发起一个自定义协议请求"></a>2.2 由 h5 发起一个自定义协议请求</h3><p>这种方式要稍复杂一点，因为需要自定义协议，这对很多前端开发者来说是比较新的东西。所以一般不推荐这种方式，可以作为第一种方式的补充。</p><p>大致需要以下几个步骤：</p><ol><li>由 app 自定义协议，比如 <code>sdk://action?params</code></li><li>在 h5 定义好回调函数，比如 <code>window.bridge = {getDouble: value =&gt; {}, getTriple: value =&gt; {}}</code></li><li>由 h5 发起一个自定义协议请求，比如 <code>location.href = &#39;sdk://double?value=10&#39;</code></li><li>app 拦截这个请求后，进行相应的操作，获取返回值</li><li>由 app 调用 h5 中的回调函数，比如 <code>window.bridge.getDouble(20);</code></li></ol><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc44jyfjjbj30r509egm4.jpg" alt=""></p><p><strong><em>javascript</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">window.bridge &#x3D; &#123;</span><br><span class="line">  getDouble: value &#x3D;&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F; 20</span><br><span class="line">  &#125;,</span><br><span class="line">  getTriple: value &#x3D;&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F; more</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">location.href &#x3D; &#39;sdk:&#x2F;&#x2F;double?value&#x3D;10&#39;;</span><br></pre></td></tr></table></figure><p><strong><em>android</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">webview.setWebViewClient(new WebViewClient() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean shouldOverrideUrlLoading(WebView view, String url) &#123;</span><br><span class="line">        &#x2F;&#x2F; 判断如果 url 是 sdk:&#x2F;&#x2F; 打头的就拦截掉</span><br><span class="line">        &#x2F;&#x2F; 然后从 url sdk:&#x2F;&#x2F;action?params 中取出 action 与params</span><br><span class="line"></span><br><span class="line">        Uri uri &#x3D; Uri.parse(url);</span><br><span class="line">        if ( uri.getScheme().equals(&quot;sdk&quot;)) &#123;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 比如 action &#x3D; double, params &#x3D; value&#x3D;10</span><br><span class="line">            webview.evaluateJavascript(&#39;window.bridge.getDouble(20)&#39;);</span><br><span class="line"></span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return super.shouldOverrideUrlLoading(view, url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong><em>ios</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">- (BOOL)webview:(UIWebView *)webview shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType &#123;</span><br><span class="line">  &#x2F;&#x2F; 判断如果 url 是 sdk:&#x2F;&#x2F; 打头的就拦截掉</span><br><span class="line">  &#x2F;&#x2F; 然后从 url sdk:&#x2F;&#x2F;action?params 中取出 action 与params</span><br><span class="line"></span><br><span class="line">  NSString *urlStr &#x3D; request.URL.absoluteString;</span><br><span class="line"></span><br><span class="line">  if ([urlStr hasPrefix:@&quot;sdk:&#x2F;&#x2F;&quot;]) &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 比如 action &#x3D; double, params &#x3D; value&#x3D;10</span><br><span class="line">    NSString *func &#x3D; @&quot;window.bridge.getDouble(20)&quot;;</span><br><span class="line">    [webview stringByEvaluatingJavaScriptFromString:func];</span><br><span class="line"></span><br><span class="line">    return NO;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return YES;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在移动端 web 应用，很多时候都需要与原生 app 进行交互、沟通（运行在 &lt;code&gt;webview&lt;/code&gt; 中），比如微信的 &lt;code&gt;jssdk&lt;/code&gt;，通过 &lt;code&gt;window.wx&lt;/code&gt; 对象调用一些原生 app 的功能。所以，这次就来捋一捋 h5 与原生 app 交互的原理。&lt;/p&gt;
&lt;p&gt;h5 与原生 app 的交互，本质上说，就是两种调用：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;app 调用 h5 的代码&lt;/li&gt;
&lt;li&gt;h5 调用 app 的代码&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="前端扩展" scheme="http://www.barebear.cn/categories/%E5%89%8D%E7%AB%AF%E6%89%A9%E5%B1%95/"/>
    
    
      <category term="前端" scheme="http://www.barebear.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>细说后端模板渲染、客户端渲染、node 中间层、服务器端渲染（ssr）</title>
    <link href="http://www.barebear.cn/web-extend/render/"/>
    <id>http://www.barebear.cn/web-extend/render/</id>
    <published>2020-02-21T09:20:56.000Z</published>
    <updated>2020-02-21T08:57:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>前端与后端渲染方式的发展大致经历了这样几个阶段：后端模板渲染、客户端渲染、node 中间层、服务器端渲染（ssr）。</p><a id="more"></a><h2 id="1-后端模板渲染"><a href="#1-后端模板渲染" class="headerlink" title="1. 后端模板渲染"></a>1. 后端模板渲染</h2><p>前端与后端最初的渲染方式是后端模板渲染，就是由后端使用模板引擎渲染好 <code>html</code> 后，返回给前端，前端再用 <code>js</code> 去操作 <code>dom</code> 或者渲染其他动态的部分。</p><p>这个过程大致分成以下几个步骤：</p><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc44io8chvj30rc0a8wf4.jpg" alt=""></p><ol><li>前端请求一个地址 <code>url</code></li><li>后端接收到这个请求，然后根据请求信息，从数据库或者其他地方获取相应的数据</li><li>使用模板引擎（如 <code>java &gt; jsp</code>、<code>php &gt; smarty</code>）将这些数据渲染成 <code>html</code></li><li>将 <code>html</code> 文本返回给前端</li></ol><p>在这个过程中，前端的 <code>html</code> 代码需要嵌入到后端代码中（如 <code>java</code>、<code>php</code>），并且在很多情况下，前端源代码和后端源代码是在一个工程里的。</p><p>所以，不难看出，这种方式的有这样的几个不足：</p><ol><li>前后端杂揉在一起，不方便本地开发、本地模拟调试，也不方便自动化测试</li><li>前端被约束在后端开发的模式中，不能充分使用前端的构建生态，开发效率低下</li><li>项目难以管理和维护，也可能会有前后端职责不清的问题</li></ol><p>尽管如此，但因为这种方式是最早出现的方式，并且这种渲染方式有一个好处，就是前端能够快速呈现服务器端渲染好的页面，而不用等客户端渲染，这能够提供很好的用户体验与 SEO 友好，所以当下很多比较早的网站或者需要快速响应的展示性网站仍然是使用这种方式。</p><h2 id="2-客户端渲染"><a href="#2-客户端渲染" class="headerlink" title="2. 客户端渲染"></a>2. 客户端渲染</h2><p>随着前端工程化与前后端分离的发展，以及前端组件化技术的出现，如 <a href="https://github.com/facebook/react" target="_blank" rel="noopener">react</a>、<a href="https://github.com/vuejs/vue" target="_blank" rel="noopener">vue</a> 等，客户端渲染已经慢慢变成了主要的开发方式了。</p><p>与后端模板渲染刚好相反，客户端渲染的页面渲染都是在客户端进行，后端不负责任何的渲染，只管数据交互。</p><p>这个过程大致分成以下几个步骤：</p><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc44iyv45rj30qj0anq3e.jpg" alt=""></p><ol><li>前端请求一个地址 <code>url</code></li><li>后端接收到这个请求，然后把相应的 <code>html</code> 文件直接返回给前端</li><li>前端解析 <code>js</code> 后，然后通过 <code>ajax</code> 向后台获取相应的数据</li><li>然后由 <code>js</code> 将这些数据渲染成页面</li></ol><p>这样一来，前端与后端将完全解耦，数据使用全 <code>ajax</code> 的方式进行交互，如此便可前后端分离了。</p><p>其实，不难看出，客户端渲染与前后端分离有很大的好处：</p><ol><li>前端独立出来，可以充分使用前端生态的强大功能</li><li>更好的管理代码，更有效率的开发、调试、测试</li><li>前后端代码解耦之后，能更好的扩展、重构</li></ol><p>所以，客户端渲染与前后端分离现在已经是主流的开发方式了。</p><p>但这种方式也有一些不足：</p><ol><li>首屏加载缓慢，因为要等 <code>js</code> 加载完毕后，才能进行渲染</li><li>SEO 不友好，因为 <code>html</code> 中几乎没有可用的信息</li></ol><h2 id="3-node-中间层"><a href="#3-node-中间层" class="headerlink" title="3. node 中间层"></a>3. node 中间层</h2><p>为了解决客户端渲染的不足，便出现了 node 中间层的理念。</p><p>传统的 B/S 架构中，是 <code>浏览器 -&gt; 后端服务器 -&gt; 浏览器</code>，上文所讲的都是这种架构。</p><p>而加入了 node 中间层之后，就变成 <code>浏览器 -&gt; node -&gt; 后端服务器 -&gt; node -&gt; 浏览器</code>。</p><p>这个过程大致分成以下几个步骤：</p><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc44j49o2rj30sp0a2q3g.jpg" alt=""></p><ol><li>前端请求一个地址 <code>url</code></li><li>node 层接收到这个请求，然后根据请求信息，向后端服务器发起请求，获取数据</li><li>后端服务器接收到请求，然后根据请求信息，从数据库或者其他地方获取相应的数据，返回给 node 层</li><li>node 层根据这些数据渲染好首屏 <code>html</code></li><li>node 层将 <code>html</code> 文本返回给前端</li></ol><p>一个典型的 node 中间层应用就是后端提供数据、node 层渲染模板、前端动态渲染。</p><p>这个过程中，node 层由前端开发人员掌控，页面中哪些页面在服务器上就渲染好，哪些页面在客户端渲染，由前端开发人员决定。</p><p>这样做，达到了以下的目的：</p><ol><li>保留后端模板渲染、首屏快速响应、SEO 友好</li><li>保留前端后分离、客户端渲染的功能（首屏服务器端渲染、其他客户端渲染）</li></ol><p>但这种方式也有一些不足：</p><ol><li>增加了一个中间层，应用性能有所降低</li><li>增加了架构的复杂度、不稳定性，降低应用的安全性</li><li>对开发人员要求高了很多</li></ol><h2 id="4-服务器端渲染（ssr）"><a href="#4-服务器端渲染（ssr）" class="headerlink" title="4. 服务器端渲染（ssr）"></a>4. 服务器端渲染（ssr）</h2><p>大部分情况下，服务器端渲染（ssr）与 node 中间层是同一个概念。</p><p>服务器端渲染（ssr）一般特指，在上文讲到的 node 中间层基础上，加上前端组件化技术在服务器上的渲染，特别是 <a href="https://github.com/facebook/react" target="_blank" rel="noopener">react</a> 和 <a href="https://github.com/vuejs/vue" target="_blank" rel="noopener">vue</a>。</p><p><a href="https://github.com/facebook/react" target="_blank" rel="noopener">react</a>、<a href="https://github.com/vuejs/vue" target="_blank" rel="noopener">vue</a>、<a href="https://github.com/angular/angular" target="_blank" rel="noopener">angular</a> 等框架的出现，让前端组件化技术深入人心，但在一些需要首屏快速加载与 SEO 友好的页面就陷入了两难的境地了。</p><p>因为前端组件化技术天生就是给客户端渲染用的，而在服务器端需要被渲染成 <code>html</code> 文本，这确实不是一件很容易的事，所以服务器端渲染（ssr）就是为了解决这个问题。</p><p>好在社区一直在不断的探索中，让前端组件化能够在服务器端渲染，比如 <a href="https://github.com/zeit/next.js" target="_blank" rel="noopener">next.js</a>、<a href="https://github.com/nuxt/nuxt.js" target="_blank" rel="noopener">nuxt.js</a>、<a href="https://github.com/jaredpalmer/razzle" target="_blank" rel="noopener">razzle</a>、<a href="https://github.com/redfin/react-server" target="_blank" rel="noopener">react-server</a>、<a href="https://github.com/alibaba/beidou" target="_blank" rel="noopener">beidou</a> 等。</p><p>一般这些框架都会有一些目录结构、书写方式、组件集成、项目构建的要求，自定义属性可能不是很强。</p><p>以 <a href="https://github.com/zeit/next.js" target="_blank" rel="noopener">next.js</a> 为例，整个应用中是没有 <code>html</code> 文件的，所有的响应 <code>html</code> 都是 node 动态渲染的，包括里面的元信息、<code>css, js</code> 路径等。渲染过程中，<code>next.js</code> 会根据路由，将首页所有的组件渲染成 <code>html</code>，余下的页面保留原生组件的格式，在客户端渲染。</p><h2 id="5-另外"><a href="#5-另外" class="headerlink" title="5. 另外"></a>5. 另外</h2><ol><li>不需要首屏快速加载、SEO 友好的，用全客户端渲染</li><li>需要首屏快速加载、SEO 友好的，如果用了如 <code>react</code>、<code>vue</code> 等组件化技术，将不得不用 node 中间层与服务器端渲染</li><li>如果技术团队不支持，不建议在需要首屏快速加载、SEO 友好的地方使用如 <code>react</code>、<code>vue</code> 等组件化技术</li><li>前后端分离之后也可以做后端模板渲染，这样前端的调试可以搭配 <a href="https://github.com/wycats/handlebars.js" target="_blank" rel="noopener">handlebars</a>、<a href="https://github.com/tj/ejs" target="_blank" rel="noopener">ejs</a> 等模板引擎进行本地调试，而后端的调试则需要到测试机了</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端与后端渲染方式的发展大致经历了这样几个阶段：后端模板渲染、客户端渲染、node 中间层、服务器端渲染（ssr）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端扩展" scheme="http://www.barebear.cn/categories/%E5%89%8D%E7%AB%AF%E6%89%A9%E5%B1%95/"/>
    
    
      <category term="前端" scheme="http://www.barebear.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>package.json 非官方字段集合</title>
    <link href="http://www.barebear.cn/web-extend/package/"/>
    <id>http://www.barebear.cn/web-extend/package/</id>
    <published>2020-02-21T09:15:56.000Z</published>
    <updated>2020-02-21T08:51:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>package.json</code> 官方字段请参考 <a href="https://docs.npmjs.com/files/package.json" target="_blank" rel="noopener">https://docs.npmjs.com/files/package.json</a>。下面介绍的是非官方字段，也就是各种工具定义的相关字段。</p><a id="more"></a><h2 id="1-yarn-相关字段"><a href="#1-yarn-相关字段" class="headerlink" title="1. yarn 相关字段"></a>1. <a href="https://github.com/yarnpkg/yarn" target="_blank" rel="noopener">yarn</a> 相关字段</h2><p><a href="https://github.com/yarnpkg/yarn" target="_blank" rel="noopener">yarn</a>: 类似 <code>npm</code> 的依赖管理工具，但 <code>yarn</code> 缓存了每个下载过的包，所以再次使用时无需重复下载，同时利用并行下载以最大化资源利用率，因此安装速度更快。</p><h3 id="flat"><a href="#flat" class="headerlink" title="flat"></a><code>flat</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;flat&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你的包只允许给定依赖的一个版本，你想强制和命令行上 <code>yarn install --flat</code> 相同的行为，把这个值设为 <code>true</code>。</p><p>详细参考 <a href="https://yarnpkg.com/zh-Hans/docs/package-json#toc-flat" target="_blank" rel="noopener">yarn - flat</a>.</p><h3 id="resolutions"><a href="#resolutions" class="headerlink" title="resolutions"></a><code>resolutions</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;resolutions&quot;: &#123;</span><br><span class="line">    &quot;transitive-package-1&quot;: &quot;0.0.29&quot;,</span><br><span class="line">    &quot;transitive-package-2&quot;: &quot;file:.&#x2F;local-forks&#x2F;transitive-package-2&quot;,</span><br><span class="line">    &quot;dependencies-package-1&#x2F;transitive-package-3&quot;: &quot;^2.1.1&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>允许你覆盖特定嵌套依赖项的版本。有关完整规范，请参见<a href="https://github.com/yarnpkg/rfcs/blob/master/implemented/0000-selective-versions-resolutions.md" target="_blank" rel="noopener">选择性版本解析 RFC</a>。</p><p>详细参考 <a href="https://yarnpkg.com/zh-Hans/docs/package-json#toc-resolutions" target="_blank" rel="noopener">yarn - resolutions</a>.</p><h2 id="2-unpkg-相关字段"><a href="#2-unpkg-相关字段" class="headerlink" title="2. unpkg 相关字段"></a>2. <a href="https://github.com/unpkg/unpkg.com" target="_blank" rel="noopener">unpkg</a> 相关字段</h2><p><a href="https://github.com/unpkg/unpkg.com" target="_blank" rel="noopener">unpkg</a>: 让 <code>npm</code> 上所有的文件都开启 <code>cdn</code> 服务。</p><h3 id="unpkg"><a href="#unpkg" class="headerlink" title="unpkg"></a><code>unpkg</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># jquery</span><br><span class="line">&#123;</span><br><span class="line">  &quot;unpkg&quot;: &quot;dist&#x2F;jquery.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正常情况下，访问 <code>jquery</code> 的发布文件通过 <code>https://unpkg.com/jquery@3.3.1/dist/jquery.js</code>，当你使用省略的 url <code>https://unpkg.com/jquery</code> 时，便会按照如下的方式获取文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># [latestVersion] 指最新版本号，pkg 指 package.json</span><br><span class="line"></span><br><span class="line"># 定义了 unpkg 属性时</span><br><span class="line">https:&#x2F;&#x2F;unpkg.com&#x2F;jquery@[latestVersion]&#x2F;[pkg.unpkg]</span><br><span class="line"></span><br><span class="line"># 未定义 unpkg 属性时，将回退到 main 属性</span><br><span class="line">https:&#x2F;&#x2F;unpkg.com&#x2F;jquery@[latestVersion]&#x2F;[pkg.main]</span><br></pre></td></tr></table></figure><p>详细参考 <a href="https://unpkg.com" target="_blank" rel="noopener">https://unpkg.com</a>.</p><h2 id="3-TypeScript-相关字段"><a href="#3-TypeScript-相关字段" class="headerlink" title="3. TypeScript 相关字段"></a>3. <a href="https://github.com/Microsoft/TypeScript" target="_blank" rel="noopener">TypeScript</a> 相关字段</h2><p><a href="https://github.com/Microsoft/TypeScript" target="_blank" rel="noopener">TypeScript</a>: <code>JavaScript</code> 的超集</p><h3 id="types-typings"><a href="#types-typings" class="headerlink" title="types, typings"></a><code>types</code>, <code>typings</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;main&quot;: &quot;.&#x2F;lib&#x2F;main.js&quot;,</span><br><span class="line">  &quot;types&quot;: &quot;.&#x2F;lib&#x2F;main.d.ts&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就像 <code>main</code> 字段一样，定义一个针对 <code>TypeScript</code> 的入口文件。</p><p>详细参考 <a href="https://www.typescriptlang.org/docs/handbook/declaration-files/publishing.html" target="_blank" rel="noopener">TypeScript documentation</a>.</p><h2 id="4-browserslist-相关字段"><a href="#4-browserslist-相关字段" class="headerlink" title="4. browserslist 相关字段"></a>4. <a href="https://github.com/browserslist/browserslist" target="_blank" rel="noopener">browserslist</a> 相关字段</h2><p><a href="https://github.com/browserslist/browserslist" target="_blank" rel="noopener">browserslist</a>: 设置项目的浏览器兼容情况。</p><h3 id="browserslist"><a href="#browserslist" class="headerlink" title="browserslist"></a><code>browserslist</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;browserslist&quot;: [</span><br><span class="line">    &quot;&gt; 1%&quot;,</span><br><span class="line">    &quot;last 2 versions&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>支持的工具：</p><ul><li><a href="https://github.com/postcss/autoprefixer" target="_blank" rel="noopener">Autoprefixer</a></li><li><a href="https://github.com/babel/babel/tree/master/packages/babel-preset-env" target="_blank" rel="noopener">Babel</a></li><li><a href="https://github.com/jonathantneal/postcss-preset-env" target="_blank" rel="noopener">postcss-preset-env</a></li><li><a href="https://github.com/amilajack/eslint-plugin-compat" target="_blank" rel="noopener">eslint-plugin-compat</a></li><li><a href="https://github.com/ismay/stylelint-no-unsupported-browser-features" target="_blank" rel="noopener">stylelint-no-unsupported-browser-features</a></li><li><a href="https://github.com/jonathantneal/postcss-normalize" target="_blank" rel="noopener">postcss-normalize</a></li></ul><p>详细参考 <a href="https://github.com/browserslist/browserslist" target="_blank" rel="noopener">browserslist</a>.</p><h2 id="5-发行打包相关字段"><a href="#5-发行打包相关字段" class="headerlink" title="5. 发行打包相关字段"></a>5. 发行打包相关字段</h2><p>点击 <a href="http://2ality.com/2017/04/setting-up-multi-platform-packages.html#support-by-bundlers" target="_blank" rel="noopener">Setting up multi-platform npm packages</a> 查看相关介绍。</p><h3 id="module"><a href="#module" class="headerlink" title="module"></a><code>module</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;main&quot;: &quot;.&#x2F;lib&#x2F;main.js&quot;,</span><br><span class="line">  &quot;module&quot;: &quot;.&#x2F;lib&#x2F;main.m.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就像 <code>main</code> 字段一样，定义一个针对 <code>es6</code> 模块及语法的入口文件。</p><p>构建工具在构建项目的时候，如果发现了这个字段，会首先使用这个字段指向的文件，如果未定义，则回退到 <code>main</code> 字段指向的文件。</p><p>支持的工具：</p><ul><li><a href="https://github.com/rollup/rollup-plugin-node-resolve" target="_blank" rel="noopener">rollup</a></li><li><a href="https://webpack.js.org/configuration/resolve/#resolve-mainfields" target="_blank" rel="noopener">webpack</a></li></ul><p>详细参考 <a href="https://github.com/rollup/rollup/wiki/pkg.module" target="_blank" rel="noopener">rollup - pkg.module</a>.</p><h3 id="browser"><a href="#browser" class="headerlink" title="browser"></a><code>browser</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;main&quot;: &quot;.&#x2F;lib&#x2F;main.js&quot;,</span><br><span class="line">  &quot;browser&quot;: &quot;.&#x2F;lib&#x2F;main.b.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指定该模块供浏览器使用的入口文件。</p><p>如果这个字段未定义，则回退到 <code>main</code> 字段指向的文件。</p><p>支持的工具：</p><ul><li><a href="https://github.com/rollup/rollup-plugin-node-resolve" target="_blank" rel="noopener">rollup</a></li><li><a href="https://webpack.js.org/configuration/resolve/#resolve-mainfields" target="_blank" rel="noopener">webpack</a></li><li><a href="https://github.com/browserify/browserify-handbook#browser-field" target="_blank" rel="noopener">browserify</a></li></ul><p>详细参考 <a href="https://github.com/tleunen/babel-plugin-module-resolver/issues/41" target="_blank" rel="noopener">babel-plugin-module-resolver</a>.</p><h3 id="esnext"><a href="#esnext" class="headerlink" title="esnext"></a><code>esnext</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;main&quot;: &quot;main.js&quot;,</span><br><span class="line">  &quot;esnext&quot;: &quot;main-esnext.js&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># or</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;main&quot;: &quot;main.js&quot;,</span><br><span class="line">  &quot;esnext&quot;: &#123;</span><br><span class="line">    &quot;main&quot;: &quot;main-esnext.js&quot;,</span><br><span class="line">    &quot;browser&quot;: &quot;browser-specific-main-esnext.js&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>es</code> 模块化规范，<code>stage 4</code> 特性的源代码。</p><p>详细参考 <a href="http://2ality.com/2017/04/transpiling-dependencies-babel.html" target="_blank" rel="noopener">Transpiling dependencies with Babel</a>, <a href="http://2ality.com/2017/06/pkg-esnext.html" target="_blank" rel="noopener">Delivering untranspiled source code via npm</a>.</p><h3 id="es2015"><a href="#es2015" class="headerlink" title="es2015"></a><code>es2015</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;main&quot;: &quot;main.js&quot;,</span><br><span class="line">  &quot;es2015&quot;: &quot;main-es2015.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/angular/angular" target="_blank" rel="noopener">Angular</a> 定义的未转码的 <code>es6</code> 源码。</p><p>详细参考 <a href="https://docs.google.com/document/d/1CZC2rcpxffTDfRDs6p1cfbmKNLA6x5O-NtkJglDaBVs/edit#" target="_blank" rel="noopener">https://docs.google.com/document/d/1CZC2rcpxffTDfRDs6p1cfbmKNLA6x5O-NtkJglDaBVs/edit#</a>.</p><h3 id="esm"><a href="#esm" class="headerlink" title="esm"></a><code>esm</code></h3><p>详细参考 <a href="https://github.com/nodejs/node-eps/pull/60" target="_blank" rel="noopener">adjusted proposal: ES module “esm”: true package.json flag</a>.</p><h2 id="6-react-native-相关字段"><a href="#6-react-native-相关字段" class="headerlink" title="6. react-native 相关字段"></a>6. <a href="https://github.com/facebook/react-native" target="_blank" rel="noopener">react-native</a> 相关字段</h2><p><a href="https://github.com/facebook/react-native" target="_blank" rel="noopener">react-native</a>: 使用 <a href="https://github.com/facebook/react" target="_blank" rel="noopener">react</a> 组件技术写原生 APP。</p><h3 id="react-native"><a href="#react-native" class="headerlink" title="react-native"></a><code>react-native</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;main&quot;: &quot;.&#x2F;lib&#x2F;main.js&quot;,</span><br><span class="line">  &quot;react-native&quot;: &quot;.&#x2F;lib&#x2F;main.react-native.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指定该模块供 <code>react-native</code> 使用的入口文件。</p><p>如果这个字段未定义，则回退到 <code>main</code> 字段指向的文件。</p><p><a href="https://github.com/facebook/metro/blob/a29d30327365f3f52652f68d53896355021cc693/packages/metro/src/node-haste/Package.js#L45" target="_blank" rel="noopener">源代码查看</a>.</p><h2 id="7-webpack-相关字段"><a href="#7-webpack-相关字段" class="headerlink" title="7. webpack 相关字段"></a>7. <a href="https://github.com/webpack/webpack" target="_blank" rel="noopener">webpack</a> 相关字段</h2><h3 id="sideEffects"><a href="#sideEffects" class="headerlink" title="sideEffects"></a><code>sideEffects</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;sideEffects&quot;: true|false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明该模块是否包含 <code>sideEffects</code>（副作用），从而可以为 <code>tree-shaking</code> 提供更大的优化空间。</p><p>详细参考 <a href="https://github.com/webpack/webpack/tree/master/examples/side-effects" target="_blank" rel="noopener">sideEffects example</a>, <a href="https://github.com/rollup/rollup/issues/1293" target="_blank" rel="noopener">proposal for marking functions as pure</a>, <a href="https://www.npmjs.com/package/eslint-plugin-tree-shaking" target="_blank" rel="noopener">eslint-plugin-tree-shaking</a>.</p><h2 id="8-microbundle-相关字段"><a href="#8-microbundle-相关字段" class="headerlink" title="8. microbundle 相关字段"></a>8. <a href="https://github.com/developit/microbundle" target="_blank" rel="noopener">microbundle</a> 相关字段</h2><p><a href="https://github.com/developit/microbundle" target="_blank" rel="noopener">microbundle</a>: 基于 <a href="https://github.com/rollup/rollup" target="_blank" rel="noopener">rollup</a> 零配置快速打包工具。</p><h3 id="source"><a href="#source" class="headerlink" title="source"></a><code>source</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;source&quot;： &quot;src&#x2F;index.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源文件入口文件。</p><p>详细参考 <a href="https://github.com/developit/microbundle#specifying-builds-in-packagejson" target="_blank" rel="noopener">Specifying builds in package.json</a>.</p><h3 id="umd-main"><a href="#umd-main" class="headerlink" title="umd:main"></a><code>umd:main</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;umd:main&quot;： &quot;dist&#x2F;main.umd.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>umd</code> 模式 <code>bundle</code> 文件。</p><p>详细参考 <a href="https://github.com/developit/microbundle#specifying-builds-in-packagejson" target="_blank" rel="noopener">Specifying builds in package.json</a>.</p><h2 id="8-parcel-相关字段"><a href="#8-parcel-相关字段" class="headerlink" title="8. parcel 相关字段"></a>8. <a href="https://github.com/parcel-bundler/parcel" target="_blank" rel="noopener">parcel</a> 相关字段</h2><p><a href="https://github.com/parcel-bundler/parcel" target="_blank" rel="noopener">parcel</a>: 零配置打包工具。</p><h3 id="source-1"><a href="#source-1" class="headerlink" title="source"></a><code>source</code></h3><p>查看 <a href="https://github.com/parcel-bundler/parcel/issues/1652" target="_blank" rel="noopener">parcel-bundler/parcel#1652</a>.</p><h2 id="9-babel-相关字段"><a href="#9-babel-相关字段" class="headerlink" title="9. babel 相关字段"></a>9. <a href="https://github.com/babel/babel" target="_blank" rel="noopener">babel</a> 相关字段</h2><p><a href="https://github.com/babel/babel" target="_blank" rel="noopener">babel</a>: <code>es6 -&gt; es5</code> 转码器。</p><h3 id="babel"><a href="#babel" class="headerlink" title="babel"></a><code>babel</code></h3><p>配置 <code>babel</code>。</p><h2 id="10-eslint-相关字段"><a href="#10-eslint-相关字段" class="headerlink" title="10. eslint 相关字段"></a>10. <a href="https://github.com/eslint/eslint" target="_blank" rel="noopener">eslint</a> 相关字段</h2><p><a href="https://github.com/eslint/eslint" target="_blank" rel="noopener">eslint</a>: <code>js</code> 代码检查与优化。</p><h3 id="eslintConfig"><a href="#eslintConfig" class="headerlink" title="eslintConfig"></a><code>eslintConfig</code></h3><p>配置 <code>eslint</code>。</p><h2 id="11-jest-相关字段"><a href="#11-jest-相关字段" class="headerlink" title="11. jest 相关字段"></a>11. <a href="https://github.com/facebook/jest" target="_blank" rel="noopener">jest</a> 相关字段</h2><p><a href="https://github.com/facebook/jest" target="_blank" rel="noopener">jest</a>: <code>js</code> 测试库。</p><h3 id="jest"><a href="#jest" class="headerlink" title="jest"></a><code>jest</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;jest&quot;: &#123;</span><br><span class="line">    &quot;verbose&quot;: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置 <code>jest</code>。</p><p>详细参考 <a href="https://jest-bot.github.io/jest/docs/configuration.html" target="_blank" rel="noopener">jest docs</a>.</p><h2 id="12-stylelint-相关字段"><a href="#12-stylelint-相关字段" class="headerlink" title="12. stylelint 相关字段"></a>12. <a href="https://github.com/stylelint/stylelint" target="_blank" rel="noopener">stylelint</a> 相关字段</h2><p><a href="https://github.com/stylelint/stylelint" target="_blank" rel="noopener">stylelint</a>: <code>style</code> 代码检查与优化。</p><h3 id="stylelint"><a href="#stylelint" class="headerlink" title="stylelint"></a><code>stylelint</code></h3><p>配置 <code>stylelint</code>。</p><p>详细参考 <a href="https://github.com/stylelint/stylelint/issues/490" target="_blank" rel="noopener">New configuration loader</a>.</p><h2 id="13-ava-相关字段"><a href="#13-ava-相关字段" class="headerlink" title="13. ava 相关字段"></a>13. <a href="https://github.com/avajs/ava" target="_blank" rel="noopener">ava</a> 相关字段</h2><p><a href="https://github.com/avajs/ava" target="_blank" rel="noopener">ava</a>: <code>js</code> 测试库。</p><h3 id="ava"><a href="#ava" class="headerlink" title="ava"></a><code>ava</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;ava&quot;: &#123;</span><br><span class="line">    &quot;require&quot;: [ &quot;@std&#x2F;esm&quot; ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置 <code>ava</code>。</p><p>详细参考 <a href="https://github.com/avajs/ava#configuration" target="_blank" rel="noopener">ava configuration</a>.</p><h2 id="14-nyc-相关字段"><a href="#14-nyc-相关字段" class="headerlink" title="14. nyc 相关字段"></a>14. <a href="https://github.com/istanbuljs/nyc" target="_blank" rel="noopener">nyc</a> 相关字段</h2><p><a href="https://github.com/istanbuljs/nyc" target="_blank" rel="noopener">nyc</a>: <a href="https://istanbul.js.org/" target="_blank" rel="noopener">istanbul.js</a> 命令行。</p><h3 id="nyc"><a href="#nyc" class="headerlink" title="nyc"></a><code>nyc</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;nyc&quot;: &#123;</span><br><span class="line">    &quot;extension&quot;: [&quot;.js&quot;, &quot;.mjs&quot;],</span><br><span class="line">    &quot;require&quot;: [&quot;@std&#x2F;esm&quot;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置 <code>nyc</code>。</p><p>详细参考 <a href="https://github.com/istanbuljs/nyc#use-with-babel-plugin-istanbul-for-babel-support" target="_blank" rel="noopener">nyc docs</a>.</p><h2 id="15-CommonJS-保留字段"><a href="#15-CommonJS-保留字段" class="headerlink" title="15. CommonJS 保留字段"></a>15. CommonJS 保留字段</h2><p>保留字段: <code>build</code>, <code>default</code>, <code>email</code>, <code>external</code>, <code>files</code>, <code>imports</code>, <code>maintainer</code>, <code>paths</code>, <code>platform</code>, <code>require</code>, <code>summary</code>, <code>test</code>, <code>using</code>, <code>downloads</code>, <code>uid</code>.</p><p>不可用字段: <code>id</code>, <code>type</code>, 以 <code>_</code> 和 <code>$</code> 开头的字段。</p><h2 id="16-Standard-JS-相关字段"><a href="#16-Standard-JS-相关字段" class="headerlink" title="16. Standard JS 相关字段"></a>16. <a href="https://github.com/standard/standard" target="_blank" rel="noopener">Standard JS</a> 相关字段</h2><p><a href="https://github.com/standard/standard" target="_blank" rel="noopener">Standard JS</a>: <code>js</code> 代码检查与优化。</p><h3 id="standard"><a href="#standard" class="headerlink" title="standard"></a><code>standard</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;standard&quot;: &#123;</span><br><span class="line">    &quot;parser&quot;: &quot;babel-eslint&quot;,</span><br><span class="line">    &quot;ignore&quot;: [</span><br><span class="line">      &quot;**&#x2F;out&#x2F;&quot;,</span><br><span class="line">      &quot;&#x2F;lib&#x2F;select2&#x2F;&quot;,</span><br><span class="line">      &quot;&#x2F;lib&#x2F;ckeditor&#x2F;&quot;,</span><br><span class="line">      &quot;tmp.js&quot;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置 <code>standard</code>.</p><p>详细参考 <a href="https://standardjs.com/" target="_blank" rel="noopener">https://standardjs.com/</a>.</p><h2 id="17-其他"><a href="#17-其他" class="headerlink" title="17. 其他"></a>17. 其他</h2><h3 id="style"><a href="#style" class="headerlink" title="style"></a><code>style</code></h3><p>声明当前模块包含 <code>style</code> 部分，并指定入口文件。</p><p>支持的工具：</p><ul><li><a href="https://github.com/rotundasoftware/parcelify" target="_blank" rel="noopener">parcelify</a></li><li><a href="https://github.com/Raynos/npm-less" target="_blank" rel="noopener">npm-less</a></li><li><a href="https://github.com/reworkcss/rework-npm" target="_blank" rel="noopener">rework-npm</a></li><li><a href="https://github.com/defunctzombie/npm-css" target="_blank" rel="noopener">npm-css</a></li></ul><p>详细参考 <a href="https://jaketrent.com/post/package-json-style-attribute/" target="_blank" rel="noopener">Package.json “style” Attribute</a>, <a href="https://github.com/cssinjs/istf-spec" target="_blank" rel="noopener">istf-spec</a>.</p><h3 id="less"><a href="#less" class="headerlink" title="less"></a><code>less</code></h3><p>与 <code>style</code> 一样，但是是 <code>less</code> 文件。</p><p>支持的工具：</p><ul><li><a href="https://github.com/Raynos/npm-less" target="_blank" rel="noopener">npm-less</a></li></ul><h2 id="18-更多"><a href="#18-更多" class="headerlink" title="18. 更多"></a>18. 更多</h2><p>参考 <a href="https://github.com/stereobooster/package.json" target="_blank" rel="noopener">package.json fields explained</a>.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;package.json&lt;/code&gt; 官方字段请参考 &lt;a href=&quot;https://docs.npmjs.com/files/package.json&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.npmjs.com/files/package.json&lt;/a&gt;。下面介绍的是非官方字段，也就是各种工具定义的相关字段。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端扩展" scheme="http://www.barebear.cn/categories/%E5%89%8D%E7%AB%AF%E6%89%A9%E5%B1%95/"/>
    
    
      <category term="前端" scheme="http://www.barebear.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="npm" scheme="http://www.barebear.cn/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>react 前端项目技术选型、开发工具、周边生态</title>
    <link href="http://www.barebear.cn/web-extend/react/"/>
    <id>http://www.barebear.cn/web-extend/react/</id>
    <published>2020-02-21T09:10:56.000Z</published>
    <updated>2020-02-21T08:51:12.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>声明：这不是一篇介绍 React 基础知识的文章，需要熟悉 React 相关知识</p></blockquote><ul><li><p>主架构：<a href="https://github.com/facebook/react" target="_blank" rel="noopener">react</a>, <a href="https://github.com/ReactTraining/react-router" target="_blank" rel="noopener">react-router</a>, <a href="https://github.com/reduxjs/redux" target="_blank" rel="noopener">redux</a>, <a href="https://github.com/reduxjs/redux-thunk" target="_blank" rel="noopener">redux-thunk</a>, <a href="https://github.com/redux-saga/redux-saga" target="_blank" rel="noopener">redux-saga</a>, <a href="https://github.com/reduxjs/react-redux" target="_blank" rel="noopener">react-redux</a>, <a href="https://github.com/dvajs/dva" target="_blank" rel="noopener">dva</a>, <a href="https://github.com/umijs/umi" target="_blank" rel="noopener">umi</a></p></li><li><p>扩展架构：<a href="https://github.com/styled-components/styled-components" target="_blank" rel="noopener">styled-components</a>, <a href="https://github.com/acdlite/recompose" target="_blank" rel="noopener">recompose</a>, <a href="https://github.com/jamiebuilds/react-loadable" target="_blank" rel="noopener">react-loadable</a></p></li><li><p>UI 框架：<a href="https://github.com/ant-design/ant-design" target="_blank" rel="noopener">ant-design</a>, <a href="https://github.com/ant-design/ant-design-mobile" target="_blank" rel="noopener">ant-design-mobile</a>, <a href="https://github.com/mui-org/material-ui" target="_blank" rel="noopener">material-ui</a>, <a href="https://github.com/Semantic-Org/Semantic-UI-React" target="_blank" rel="noopener">Semantic-UI-React</a>, <a href="https://github.com/palantir/blueprint" target="_blank" rel="noopener">blueprint</a>, <a href="https://github.com/react-bootstrap/react-bootstrap" target="_blank" rel="noopener">react-bootstrap</a></p></li><li><p>服务器端渲染：<a href="https://github.com/zeit/next.js" target="_blank" rel="noopener">next.js</a>, <a href="https://github.com/jaredpalmer/razzle" target="_blank" rel="noopener">razzle</a>, <a href="https://github.com/redfin/react-server" target="_blank" rel="noopener">react-server</a>, <a href="https://github.com/alibaba/beidou" target="_blank" rel="noopener">beidou</a></p></li><li><p>开发工具：<a href="https://github.com/storybooks/storybook" target="_blank" rel="noopener">storybook</a>, <a href="https://github.com/facebook/react-devtools" target="_blank" rel="noopener">react-devtools</a>, <a href="https://github.com/reduxjs/redux-devtools" target="_blank" rel="noopener">redux-devtools</a>, <a href="https://github.com/zalmoxisus/redux-devtools-extension" target="_blank" rel="noopener">redux-devtools-extension</a></p></li><li><p>测试：<a href="https://github.com/airbnb/enzyme" target="_blank" rel="noopener">enzyme</a>, <a href="https://github.com/kentcdodds/react-testing-library" target="_blank" rel="noopener">react-testing-library</a>, <a href="https://github.com/facebook/jest" target="_blank" rel="noopener">jest</a></p></li><li><p>替代库：<a href="https://github.com/developit/preact" target="_blank" rel="noopener">preact</a>, <a href="https://github.com/infernojs/inferno" target="_blank" rel="noopener">inferno</a></p></li><li><p>插件库：<a href="https://github.com/chenglou/react-motion" target="_blank" rel="noopener">react-motion</a>, <a href="https://github.com/JedWatson/react-select" target="_blank" rel="noopener">react-select</a>, <a href="https://github.com/reduxjs/reselect" target="_blank" rel="noopener">reselect</a>, <a href="https://github.com/atlassian/react-beautiful-dnd" target="_blank" rel="noopener">react-beautiful-dnd</a>, <a href="https://github.com/Flipboard/react-canvas" target="_blank" rel="noopener">react-canvas</a>, <a href="https://github.com/erikras/redux-form" target="_blank" rel="noopener">redux-form</a>, <a href="https://github.com/recharts/recharts" target="_blank" rel="noopener">recharts</a>, <a href="https://github.com/react-dnd/react-dnd" target="_blank" rel="noopener">react-dnd</a>, <a href="https://github.com/nfl/react-helmet" target="_blank" rel="noopener">react-helmet</a></p></li></ul><a id="more"></a><h2 id="1-架构选型演进"><a href="#1-架构选型演进" class="headerlink" title="1. 架构选型演进"></a>1. 架构选型演进</h2><ol><li>如果页面比较简单，可以只用 <code>react</code></li><li>如果需要本地路由功能，比如在单页面应用（SPA）中维持多个页面，并且可以本地控制路由跳转逻辑，这时就需要搭配使用 <code>react-router</code></li><li>一般稍复杂的页面都会遇到一些问题：组件之间的通信问题（比如 A 组件想要改变 B 组件的 <code>state</code>）、跨组件数据储存与共享问题（比如多页面购物车数据存储）。<code>react</code> 本身并不能很好的解决这个问题，需要搭配使用 <code>redux</code></li><li><code>redux</code> 本身只实现了 <a href="https://github.com/facebook/flux" target="_blank" rel="noopener">flux</a> 理念，以及一些基础的功能，但在使用中，还需要扩展一些功能，比如异步派发 <code>action</code>，这时可以选择搭配使用 <code>redux-thunk</code> 来解决异步派发 <code>action</code> 的问题。另外，也是选择 <code>redux-saga</code>，但 <code>redux-saga</code> 不仅仅是异步派发 <code>action</code>，它拥有强大的异步数据流处理功能，几乎改变了整个 <code>redux</code> 的使用方式，是个重量级的家伙，如果是庞大且复杂的项目，推荐使用 <code>redux-saga</code></li><li><code>redux</code> 本身并不与 <code>react</code> 绑定，你依然可以把 <code>redux</code> 与 <a href="https://github.com/vuejs/vue" target="_blank" rel="noopener">vue</a>、<a href="https://github.com/angular/angular" target="_blank" rel="noopener">angular</a> 等其他框架一起使用。为了使 <code>redux</code> 与 <code>react</code> 开发时更流畅，可以使用 <code>react-redux</code> 把两者链接起来，这样开发体验更佳</li><li>当在一个大型项目中使用以上的架构，就会使项目变得异常复杂和不可控（比如目录结构、<code>action</code> 定义方式等），这时就需要用 <code>dva</code> 来简化数据流操作，降低项目的复杂度</li><li>以上涉及的都是代码层面的架构，如果搭配 <code>umi</code> 一起使用，会有更佳的开发体验。<code>umi</code> 内部使用 <a href="https://github.com/sorrycc/roadhog" target="_blank" rel="noopener">roadhog</a>(<a href="https://github.com/webpack/webpack" target="_blank" rel="noopener">webpack</a> 封装库)， 具有动态路由、<code>dva model</code> 的自动加载、通过插件支持 PWA(Progressive Web App)、以路由为单元的 code splitting 等</li></ol><p>总结：</p><ol><li>简单页面直接用 <code>react</code>，如果需要本地路由功能再加 <code>react-router</code></li><li>如果需要跨组件通信、共享数据的话，不太复杂的页面可以用 <code>redux</code> + <code>redux-thunk</code>，复杂的页面可以用 <code>redux</code> + <code>redux-saga</code></li><li>复杂大型应用（比如整个项目就是一个单页面应用），可以用 <code>react</code> + <code>react-router</code> + <code>redux</code> + <code>redux-saga</code> + <code>react-redux</code> + <code>dva</code> + <code>umi</code></li></ol><h2 id="2-一些扩展的可选架构"><a href="#2-一些扩展的可选架构" class="headerlink" title="2. 一些扩展的可选架构"></a>2. 一些扩展的可选架构</h2><h3 id="2-1-styled-components"><a href="#2-1-styled-components" class="headerlink" title="2.1 styled-components"></a>2.1 <a href="https://github.com/styled-components/styled-components" target="_blank" rel="noopener">styled-components</a></h3><p>使用 <code>styled-components</code>，可以把 <code>css</code> 样式代码写到 <code>js</code> 文件中。</p><p>一般来说，写一个 <code>react</code> 组件，需要如下的结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- ComponentA.js</span><br><span class="line">- ComponentA.css</span><br><span class="line">- ComponentB.js</span><br><span class="line">- ComponentB.css</span><br><span class="line">- ...</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># ComponentA.css</span><br><span class="line">.container &#123;</span><br><span class="line">  padding: 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ComponentA.js</span><br><span class="line">import styles from &#39;.&#x2F;ComponentA.css&#39;;</span><br><span class="line"></span><br><span class="line">export default props &#x3D;&gt; (</span><br><span class="line">  &lt;div className&#x3D;&#123;styles.container&#125;&gt;</span><br><span class="line">    &#123;props.children&#125;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>使用 <code>styled-components</code> 后，就可以去掉 <code>css</code> 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- ComponentA.js</span><br><span class="line">- ComponentB.js</span><br><span class="line">- ...</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># ComponentA.js</span><br><span class="line">import styled from &#39;styled-components&#39;;</span><br><span class="line"></span><br><span class="line">const Container &#x3D; styled.div&#96;</span><br><span class="line">  padding: 10px;</span><br><span class="line">&#96;;</span><br><span class="line"></span><br><span class="line">export default props &#x3D;&gt; (</span><br><span class="line">  &lt;Container&gt;</span><br><span class="line">    &#123;props.children&#125;</span><br><span class="line">  &lt;&#x2F;Container&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="2-2-recompose"><a href="#2-2-recompose" class="headerlink" title="2.2 recompose"></a>2.2 <a href="https://github.com/acdlite/recompose" target="_blank" rel="noopener">recompose</a></h3><p>写了大量 <code>react</code> 组件之后（特别是使用 <code>redux</code> + <code>react-redux</code> 之后，组件的 <code>state</code> 已经被剥离出去），感觉使用类声明式（<code>class</code>）写 <code>react</code> 组件其实并非最好的方式，而使用函数式组件会更佳：</p><ul><li>函数式组件逻辑更清晰</li><li>避免 <code>state</code> 被滥用</li></ul><p>类声明式写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">class Counter extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line"></span><br><span class="line">    this.state &#x3D; &#123;</span><br><span class="line">      counter: 0,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setCounter(cb) &#123;</span><br><span class="line">    const &#123; counter &#125; &#x3D; this.state;</span><br><span class="line"></span><br><span class="line">    setState(&#123;</span><br><span class="line">      counter: cb(counter),</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    const &#123; counter &#125; &#x3D; this.state;</span><br><span class="line">    const setCounter &#x3D; this.setCounter;</span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        Count: &#123;counter&#125;</span><br><span class="line">        &lt;button onClick&#x3D;&#123;() &#x3D;&gt; setCounter(n &#x3D;&gt; n + 1)&#125;&gt;Increment&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;button onClick&#x3D;&#123;() &#x3D;&gt; setCounter(n &#x3D;&gt; n - 1)&#125;&gt;Decrement&lt;&#x2F;button&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数式写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import &#123; withState &#125; from &#39;recompose&#39;</span><br><span class="line"></span><br><span class="line">const enhance &#x3D; withState(&#39;counter&#39;, &#39;setCounter&#39;, 0)</span><br><span class="line">const Counter &#x3D; enhance((&#123; counter, setCounter &#125;) &#x3D;&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    Count: &#123;counter&#125;</span><br><span class="line">    &lt;button onClick&#x3D;&#123;() &#x3D;&gt; setCounter(n &#x3D;&gt; n + 1)&#125;&gt;Increment&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;button onClick&#x3D;&#123;() &#x3D;&gt; setCounter(n &#x3D;&gt; n - 1)&#125;&gt;Decrement&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>相比较而言，函数式写法要清晰很多呢。</p><p>更多参考：<a href="https://zhuanlan.zhihu.com/p/42494044" target="_blank" rel="noopener">通过 Recompose 库掌握 React 函数组件</a></p><h3 id="2-3-react-loadable"><a href="#2-3-react-loadable" class="headerlink" title="2.3 react-loadable"></a>2.3 <a href="https://github.com/jamiebuilds/react-loadable" target="_blank" rel="noopener">react-loadable</a></h3><p>有些时候，我们想要动态的加载一些组件（按需加载），比如在一个单页面应用中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- pages</span><br><span class="line">  - PageA.js            # a 页面的组件</span><br><span class="line">  - PageB.js            # b 页面的组件</span><br><span class="line">  - PageC.js            # c 页面的组件</span><br><span class="line">  - ...</span><br></pre></td></tr></table></figure><p>只有真正要实例化当前页面的时候，才会去加载相应的组件。使用 <code>react-loadable</code> 封装原来的组件，然后使用封装后的组件，就像使用原来的组件一样，<code>react-loadable</code> 会自动帮我们处理脚本加载。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import Loadable from &#39;react-loadable&#39;;</span><br><span class="line">import Loading from &#39;.&#x2F;loading-component&#39;;       # 页面组件还没有加载成功时，显示一个 loading 组件</span><br><span class="line"></span><br><span class="line">const LoadableComponent &#x3D; Loadable(&#123;</span><br><span class="line">  loader: () &#x3D;&gt; import(&#39;.&#x2F;real-component-a&#39;),    # 动态加载真正的 A 组件</span><br><span class="line">  loading: Loading,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export default class ComponentA extends React.Component &#123;  # 封装后的组件，使用方式与原来一致</span><br><span class="line">  render() &#123;</span><br><span class="line">    return &lt;LoadableComponent&#x2F;&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-选择-UI-框架"><a href="#3-选择-UI-框架" class="headerlink" title="3. 选择 UI 框架"></a>3. 选择 UI 框架</h2><p>使用一个现成的 UI 框架，可以少写很多代码。</p><p>目前比较推荐的是：</p><ul><li><a href="https://github.com/ant-design/ant-design" target="_blank" rel="noopener">ant-design</a> + <a href="https://github.com/ant-design/ant-design-mobile" target="_blank" rel="noopener">ant-design-mobile</a>: 蚂蚁金服出品</li><li><a href="https://github.com/mui-org/material-ui" target="_blank" rel="noopener">material-ui</a>: google 材质设计的实现</li><li><a href="https://github.com/Semantic-Org/Semantic-UI-React" target="_blank" rel="noopener">Semantic-UI-React</a>: <a href="https://github.com/Semantic-Org/Semantic-UI" target="_blank" rel="noopener">Semantic-UI</a> for <code>react</code></li><li><a href="https://github.com/palantir/blueprint" target="_blank" rel="noopener">blueprint</a>： 一套比较好用针对移动端的 UI 框架</li></ul><h2 id="4-服务器端渲染"><a href="#4-服务器端渲染" class="headerlink" title="4. 服务器端渲染"></a>4. 服务器端渲染</h2><p>服务器端渲染用得最多的是 <a href="https://github.com/zeit/next.js" target="_blank" rel="noopener">next.js</a>，其他可供选择的有 <a href="https://github.com/jaredpalmer/razzle" target="_blank" rel="noopener">razzle</a>、<a href="https://github.com/redfin/react-server" target="_blank" rel="noopener">react-server</a>、<a href="https://github.com/alibaba/beidou" target="_blank" rel="noopener">beidou</a>。</p><p>一般这些框架都会有一些目录结构、书写方式、组件集成、项目构建的要求，自定义属性可能不是很强。</p><p>以 <a href="https://github.com/zeit/next.js" target="_blank" rel="noopener">next.js</a> 为例，整个应用中是没有 <code>html</code> 文件的，所有的响应 <code>html</code> 都是 node 动态渲染的，包括里面的元信息、<code>css, js</code> 路径等。渲染过程中，<code>next.js</code> 会根据路由，将首页所有的组件渲染成 <code>html</code>，余下的页面保留原生组件的格式，在客户端渲染。</p><p>更多参考：<a href="/5.md">细说后端模板渲染、客户端渲染、node 中间层、服务器端渲染（ssr）</a></p><h2 id="5-开发工具"><a href="#5-开发工具" class="headerlink" title="5. 开发工具"></a>5. 开发工具</h2><p>开发时主要会用到的工具。</p><h3 id="5-1-storybook"><a href="#5-1-storybook" class="headerlink" title="5.1 storybook"></a>5.1 <a href="https://github.com/storybooks/storybook" target="_blank" rel="noopener">storybook</a></h3><p><code>storybook</code> 为组件开发搭建了一个强大的开发环境，并提供了以下的几个功能：</p><ul><li>提供了一个强大的 UI 组件管理页面，可以很便捷、清晰的分组、管理多个组件或一个组件的多个不同状态</li><li>在自动化交互测试之外，可以很方便的进行手动交互测试，并且可以动态改变组件参数，查看视图变化</li><li>可以将组件预览导出为静态资源，这样就可以很方便查看组件的文档和不同参数对应的不同视图</li><li>还有一系列的插件，提供了很多额外的功能，帮助你更好的开发、测试、优化组件</li></ul><p>社区已经有很多组件库都在使用 <a href="https://github.com/storybooks/storybook" target="_blank" rel="noopener">storybook</a> 开发，比如：</p><ul><li><a href="https://github.com/airbnb/react-dates" target="_blank" rel="noopener">react-dates</a> 的 <code>storybook</code> <a href="http://airbnb.io/react-dates/" target="_blank" rel="noopener">react-dates - storybook</a></li><li><a href="https://github.com/necolas/react-native-web" target="_blank" rel="noopener">react-native-web</a> 的 <code>storybook</code> <a href="http://necolas.github.io/react-native-web/storybook/" target="_blank" rel="noopener">react-native-web - storybook</a></li></ul><p>更多参考：<a href="/web-advance/storybook">react、vue 组件开发利器：storybook</a></p><h3 id="5-2-react-devtools"><a href="#5-2-react-devtools" class="headerlink" title="5.2 react-devtools"></a>5.2 <a href="https://github.com/facebook/react-devtools" target="_blank" rel="noopener">react-devtools</a></h3><p>这是专门针对 <code>react</code> 组件开发的 chrome 开发者工具插件，就像开发者工具的 <code>Elements</code> 一样，可以查看整个页面的 <code>react</code> 组件树和每个组件的属性和状态，并且可以动态的更改属性和状态，然后会更新 UI 到应用上。</p><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc445s4rk1j317w0fqdjl.jpg" alt=""></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>通过 chrome 应用商店安装 <a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi" target="_blank" rel="noopener">chrome - react-developer-tools</a>.</p><p>其他安装方式查看 <a href="https://github.com/facebook/react-devtools" target="_blank" rel="noopener">react-devtools</a>.</p><h3 id="5-3-redux-devtools-与-redux-devtools-extension"><a href="#5-3-redux-devtools-与-redux-devtools-extension" class="headerlink" title="5.3 redux-devtools 与 redux-devtools-extension"></a>5.3 <a href="https://github.com/reduxjs/redux-devtools" target="_blank" rel="noopener">redux-devtools</a> 与 <a href="https://github.com/zalmoxisus/redux-devtools-extension" target="_blank" rel="noopener">redux-devtools-extension</a></h3><p>这是专门针对 <code>redux</code> 开发的 chrome 开发者工具插件，就像 <a href="https://github.com/facebook/react-devtools" target="_blank" rel="noopener">react-devtools</a> 一样，可以查看整个页面的 <code>redux</code> store 及其变化，并且可以动态的派发 <code>action</code>，然后会更新 UI 到应用上。</p><h4 id="5-3-1-安装-redux-devtools"><a href="#5-3-1-安装-redux-devtools" class="headerlink" title="5.3.1 安装 redux-devtools"></a>5.3.1 安装 <a href="https://github.com/reduxjs/redux-devtools" target="_blank" rel="noopener">redux-devtools</a></h4><p>这种安装方式，<code>redux-devtools</code> 会嵌入到页面中，成为页面的一部分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev redux-devtools</span><br><span class="line"></span><br><span class="line"># 还可以安装</span><br><span class="line">npm install --save-dev redux-devtools-log-monitor</span><br><span class="line">npm install --save-dev redux-devtools-dock-monitor</span><br></pre></td></tr></table></figure><p>更多信息参考 <a href="https://github.com/reduxjs/redux-devtools/blob/master/docs/Walkthrough.md" target="_blank" rel="noopener">redux-devtools - Walkthrough</a>.</p><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc4460vad7j31a00u0q92.jpg" alt=""></p><h4 id="5-3-2-安装-redux-devtools-extension"><a href="#5-3-2-安装-redux-devtools-extension" class="headerlink" title="5.3.2 安装 redux-devtools-extension"></a>5.3.2 安装 <a href="https://github.com/zalmoxisus/redux-devtools-extension" target="_blank" rel="noopener">redux-devtools-extension</a></h4><p>这种安装方式是成为浏览器开发者工具的一个插件。</p><p>通过 chrome 应用商店安装 <a href="https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd" target="_blank" rel="noopener">chrome - redux-devtools</a>.</p><p>其他安装方式查看 <a href="https://github.com/zalmoxisus/redux-devtools-extension" target="_blank" rel="noopener">redux-devtools-extension</a>.</p><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc446fd8mkj31d60u07m6.jpg" alt=""></p><h2 id="6-测试"><a href="#6-测试" class="headerlink" title="6. 测试"></a>6. 测试</h2><p>一般 <code>react</code> 组件的测试，会用 <a href="https://github.com/airbnb/enzyme" target="_blank" rel="noopener">enzyme</a> + <a href="https://github.com/facebook/jest" target="_blank" rel="noopener">jest</a>，<code>jest</code> 用来测试 JavaScript，<a href="https://github.com/airbnb/enzyme" target="_blank" rel="noopener">enzyme</a> 用来测试 <code>react</code> 组件。</p><p>另外，可以使用 <a href="https://github.com/kentcdodds/react-testing-library" target="_blank" rel="noopener">react-testing-library</a> 代替 <code>react-dom/test-utils</code>，达到更佳的测试体验。</p><h2 id="7-替代库"><a href="#7-替代库" class="headerlink" title="7. 替代库"></a>7. 替代库</h2><p>如果你对组件的性能、虚拟 DOM 的算法有极致的追求，可以尝试 <code>react</code> 的替代库，如：</p><ul><li><a href="https://github.com/developit/preact" target="_blank" rel="noopener">preact</a></li><li><a href="https://github.com/infernojs/inferno" target="_blank" rel="noopener">inferno</a></li></ul><h2 id="8-插件库"><a href="#8-插件库" class="headerlink" title="8. 插件库"></a>8. 插件库</h2><p>一些很实用的插件库：</p><ul><li><a href="https://github.com/chenglou/react-motion" target="_blank" rel="noopener">react-motion</a>: 动画组件</li><li><a href="https://github.com/JedWatson/react-select" target="_blank" rel="noopener">react-select</a>: 下拉选择组件</li><li><a href="https://github.com/reduxjs/reselect" target="_blank" rel="noopener">reselect</a>: <code>redux</code> 的路径选择器</li><li><a href="https://github.com/atlassian/react-beautiful-dnd" target="_blank" rel="noopener">react-beautiful-dnd</a>: 拖拽组件</li><li><a href="https://github.com/Flipboard/react-canvas" target="_blank" rel="noopener">react-canvas</a>: canvas 组件</li><li><a href="https://github.com/erikras/redux-form" target="_blank" rel="noopener">redux-form</a>: <code>redux</code> 与表单绑定</li><li><a href="https://github.com/recharts/recharts" target="_blank" rel="noopener">recharts</a>: <a href="http://d3js.org/" target="_blank" rel="noopener">D3</a> 的 <code>react</code> 封装</li><li><a href="https://github.com/react-dnd/react-dnd" target="_blank" rel="noopener">react-dnd</a>: 又一个拖拽组件</li><li><a href="https://github.com/nfl/react-helmet" target="_blank" rel="noopener">react-helmet</a>: document head 区域管理器</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;声明：这不是一篇介绍 React 基础知识的文章，需要熟悉 React 相关知识&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;主架构：&lt;a href=&quot;https://github.com/facebook/react&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;react&lt;/a&gt;, &lt;a href=&quot;https://github.com/ReactTraining/react-router&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;react-router&lt;/a&gt;, &lt;a href=&quot;https://github.com/reduxjs/redux&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;redux&lt;/a&gt;, &lt;a href=&quot;https://github.com/reduxjs/redux-thunk&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;redux-thunk&lt;/a&gt;, &lt;a href=&quot;https://github.com/redux-saga/redux-saga&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;redux-saga&lt;/a&gt;, &lt;a href=&quot;https://github.com/reduxjs/react-redux&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;react-redux&lt;/a&gt;, &lt;a href=&quot;https://github.com/dvajs/dva&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;dva&lt;/a&gt;, &lt;a href=&quot;https://github.com/umijs/umi&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;umi&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;扩展架构：&lt;a href=&quot;https://github.com/styled-components/styled-components&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;styled-components&lt;/a&gt;, &lt;a href=&quot;https://github.com/acdlite/recompose&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;recompose&lt;/a&gt;, &lt;a href=&quot;https://github.com/jamiebuilds/react-loadable&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;react-loadable&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;UI 框架：&lt;a href=&quot;https://github.com/ant-design/ant-design&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ant-design&lt;/a&gt;, &lt;a href=&quot;https://github.com/ant-design/ant-design-mobile&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ant-design-mobile&lt;/a&gt;, &lt;a href=&quot;https://github.com/mui-org/material-ui&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;material-ui&lt;/a&gt;, &lt;a href=&quot;https://github.com/Semantic-Org/Semantic-UI-React&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Semantic-UI-React&lt;/a&gt;, &lt;a href=&quot;https://github.com/palantir/blueprint&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;blueprint&lt;/a&gt;, &lt;a href=&quot;https://github.com/react-bootstrap/react-bootstrap&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;react-bootstrap&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;服务器端渲染：&lt;a href=&quot;https://github.com/zeit/next.js&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;next.js&lt;/a&gt;, &lt;a href=&quot;https://github.com/jaredpalmer/razzle&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;razzle&lt;/a&gt;, &lt;a href=&quot;https://github.com/redfin/react-server&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;react-server&lt;/a&gt;, &lt;a href=&quot;https://github.com/alibaba/beidou&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;beidou&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;开发工具：&lt;a href=&quot;https://github.com/storybooks/storybook&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;storybook&lt;/a&gt;, &lt;a href=&quot;https://github.com/facebook/react-devtools&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;react-devtools&lt;/a&gt;, &lt;a href=&quot;https://github.com/reduxjs/redux-devtools&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;redux-devtools&lt;/a&gt;, &lt;a href=&quot;https://github.com/zalmoxisus/redux-devtools-extension&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;redux-devtools-extension&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;测试：&lt;a href=&quot;https://github.com/airbnb/enzyme&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;enzyme&lt;/a&gt;, &lt;a href=&quot;https://github.com/kentcdodds/react-testing-library&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;react-testing-library&lt;/a&gt;, &lt;a href=&quot;https://github.com/facebook/jest&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;jest&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;替代库：&lt;a href=&quot;https://github.com/developit/preact&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;preact&lt;/a&gt;, &lt;a href=&quot;https://github.com/infernojs/inferno&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;inferno&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;插件库：&lt;a href=&quot;https://github.com/chenglou/react-motion&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;react-motion&lt;/a&gt;, &lt;a href=&quot;https://github.com/JedWatson/react-select&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;react-select&lt;/a&gt;, &lt;a href=&quot;https://github.com/reduxjs/reselect&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;reselect&lt;/a&gt;, &lt;a href=&quot;https://github.com/atlassian/react-beautiful-dnd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;react-beautiful-dnd&lt;/a&gt;, &lt;a href=&quot;https://github.com/Flipboard/react-canvas&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;react-canvas&lt;/a&gt;, &lt;a href=&quot;https://github.com/erikras/redux-form&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;redux-form&lt;/a&gt;, &lt;a href=&quot;https://github.com/recharts/recharts&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;recharts&lt;/a&gt;, &lt;a href=&quot;https://github.com/react-dnd/react-dnd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;react-dnd&lt;/a&gt;, &lt;a href=&quot;https://github.com/nfl/react-helmet&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;react-helmet&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端扩展" scheme="http://www.barebear.cn/categories/%E5%89%8D%E7%AB%AF%E6%89%A9%E5%B1%95/"/>
    
    
      <category term="前端" scheme="http://www.barebear.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>vue 前端项目技术选型、开发工具、周边生态</title>
    <link href="http://www.barebear.cn/web-extend/vue/"/>
    <id>http://www.barebear.cn/web-extend/vue/</id>
    <published>2020-02-21T09:01:56.000Z</published>
    <updated>2020-02-21T08:51:06.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>声明：这不是一篇介绍 Vue 基础知识的文章，需要熟悉 Vue 相关知识</p></blockquote><ul><li><p>主架构：<a href="https://github.com/vuejs/vue" target="_blank" rel="noopener">vue</a>, <a href="https://github.com/vuejs/vue-router" target="_blank" rel="noopener">vue-router</a>, <a href="https://github.com/vuejs/vuex" target="_blank" rel="noopener">vuex</a></p></li><li><p>UI 框架：<a href="https://github.com/ElemeFE/element" target="_blank" rel="noopener">element ui</a>, <a href="https://github.com/iview/iview" target="_blank" rel="noopener">iview</a>, <a href="https://github.com/vuetifyjs/vuetify" target="_blank" rel="noopener">vuetify</a>, <a href="https://github.com/airyland/vux" target="_blank" rel="noopener">vux</a>, <a href="https://github.com/ElemeFE/mint-ui" target="_blank" rel="noopener">mint-ui</a>, <a href="https://github.com/vuematerial/vue-material" target="_blank" rel="noopener">vue-material</a>, <a href="https://github.com/museui/muse-ui" target="_blank" rel="noopener">muse-ui</a>, <a href="https://github.com/youzan/vant" target="_blank" rel="noopener">vant</a>, <a href="https://github.com/bootstrap-vue/bootstrap-vue" target="_blank" rel="noopener">bootstrap-vue</a></p></li></ul><a id="more"></a><ul><li><p>服务器端渲染：<a href="https://github.com/nuxt/nuxt.js" target="_blank" rel="noopener">nuxt.js</a></p></li><li><p>开发工具：<a href="https://github.com/storybooks/storybook" target="_blank" rel="noopener">storybook</a>, <a href="https://github.com/vuejs/vue-devtools" target="_blank" rel="noopener">vue-devtools</a>, <a href="https://github.com/vuejs/vue-loader" target="_blank" rel="noopener">vue-loader</a></p></li><li><p>测试：<a href="https://github.com/vuejs/vue-test-utils" target="_blank" rel="noopener">vue-test-utils</a>, <a href="https://github.com/facebook/jest" target="_blank" rel="noopener">jest</a></p></li><li><p>插件库：<a href="https://github.com/ustbhuangyi/better-scroll" target="_blank" rel="noopener">better-scroll</a>, <a href="https://github.com/SortableJS/Vue.Draggable" target="_blank" rel="noopener">Vue.Draggable</a>, <a href="https://github.com/baianat/vee-validate" target="_blank" rel="noopener">vee-validate</a>, <a href="https://github.com/surmon-china/vue-awesome-swiper" target="_blank" rel="noopener">vue-awesome-swiper</a>, <a href="https://github.com/shentao/vue-multiselect" target="_blank" rel="noopener">vue-multiselect</a>, <a href="https://github.com/kazupon/vue-i18n" target="_blank" rel="noopener">vue-i18n</a>, <a href="https://github.com/ElemeFE/v-charts" target="_blank" rel="noopener">v-charts</a></p></li></ul><h2 id="1-架构选型演进"><a href="#1-架构选型演进" class="headerlink" title="1. 架构选型演进"></a>1. 架构选型演进</h2><ol><li>如果页面比较简单，可以只用 <code>vue</code></li><li>如果需要本地路由功能，比如在单页面应用（SPA）中维持多个页面，并且可以本地控制路由跳转逻辑，这时就需要搭配使用 <code>vue-router</code></li><li>一般稍复杂的页面都会遇到一些问题：组件之间的通信问题（比如 A 组件想要改变 B 组件的数据）、跨组件数据储存与共享问题（比如多页面购物车数据存储）。<code>vue</code> 本身并不能很好的解决这个问题，需要搭配使用 <code>vuex</code></li></ol><h2 id="2-选择-UI-框架"><a href="#2-选择-UI-框架" class="headerlink" title="2. 选择 UI 框架"></a>2. 选择 UI 框架</h2><p>使用一个现成的 UI 框架，可以少写很多代码。</p><p>目前比较推荐的是：</p><ul><li><a href="https://github.com/ElemeFE/element" target="_blank" rel="noopener">element ui</a>：饿了么出品</li><li><a href="https://github.com/iview/iview" target="_blank" rel="noopener">iview</a>：一套很棒的 UI 框架</li><li><a href="https://github.com/vuetifyjs/vuetify" target="_blank" rel="noopener">vuetify</a>：google 材质设计的实现</li><li><a href="https://github.com/airyland/vux" target="_blank" rel="noopener">vux</a>：移动端 UI 框架</li><li><a href="https://github.com/ElemeFE/mint-ui" target="_blank" rel="noopener">mint-ui</a>：移动端 UI 框架</li><li><a href="https://github.com/vuematerial/vue-material" target="_blank" rel="noopener">vue-material</a>：另一个 google 材质设计的实现</li><li><a href="https://github.com/museui/muse-ui" target="_blank" rel="noopener">muse-ui</a>：移动端 UI 框架</li><li><a href="https://github.com/youzan/vant" target="_blank" rel="noopener">vant</a>：移动端 UI 框架</li></ul><h2 id="3-服务器端渲染"><a href="#3-服务器端渲染" class="headerlink" title="3. 服务器端渲染"></a>3. 服务器端渲染</h2><p>服务器端渲染用得最多的是 <a href="https://github.com/nuxt/nuxt.js" target="_blank" rel="noopener">nuxt.js</a>。</p><p><code>nuxt.js</code> 有目录结构、书写方式、组件集成、项目构建等的约束，整个应用中是没有 <code>html</code> 文件的，所有的响应 <code>html</code> 都是 node 动态渲染的，包括里面的元信息、<code>css, js</code> 路径等。渲染过程中，<code>nuxt.js</code> 会根据路由，将首页所有的组件渲染成 <code>html</code>，余下的页面保留原生组件的格式，在客户端渲染。</p><p>更多参考：<a href="/5.md">细说后端模板渲染、客户端渲染、node 中间层、服务器端渲染（ssr）</a></p><h2 id="4-开发工具"><a href="#4-开发工具" class="headerlink" title="4. 开发工具"></a>4. 开发工具</h2><p>开发时主要会用到的工具。</p><h3 id="4-1-storybook"><a href="#4-1-storybook" class="headerlink" title="4.1 storybook"></a>4.1 <a href="https://github.com/storybooks/storybook" target="_blank" rel="noopener">storybook</a></h3><p><code>storybook</code> 为组件开发搭建了一个强大的开发环境，并提供了以下的几个功能：</p><ul><li>提供了一个强大的 UI 组件管理页面，可以很便捷、清晰的分组、管理多个组件或一个组件的多个不同状态</li><li>在自动化交互测试之外，可以很方便的进行手动交互测试，并且可以动态改变组件参数，查看视图变化</li><li>可以将组件预览导出为静态资源，这样就可以很方便查看组件的文档和不同参数对应的不同视图</li><li>还有一系列的插件，提供了很多额外的功能，帮助你更好的开发、测试、优化组件</li></ul><p><img src="../images/999.png" alt=""></p><p>更多参考：<a href="../web-advance/16.md">react、vue 组件开发利器：storybook</a></p><h3 id="4-2-vue-devtools"><a href="#4-2-vue-devtools" class="headerlink" title="4.2 vue-devtools"></a>4.2 <a href="https://github.com/vuejs/vue-devtools" target="_blank" rel="noopener">vue-devtools</a></h3><p>这是专门针对 <code>vue</code> 组件开发的 chrome 开发者工具插件，就像开发者工具的 <code>Elements</code> 一样，可以查看整个页面的 <code>vue</code> 组件树和每个组件的 <code>data</code>，并且可以动态的更改 <code>data</code>，然后会更新 UI 到应用上。</p><p><img src="../images/995.png" alt=""></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>通过 chrome 应用商店安装 <a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd" target="_blank" rel="noopener">chrome - vuejs-devtools</a>.</p><p>其他安装方式查看 <a href="https://github.com/vuejs/vue-devtools" target="_blank" rel="noopener">vue-devtools</a>.</p><h3 id="4-3-vue-loader"><a href="#4-3-vue-loader" class="headerlink" title="4.3 vue-loader"></a>4.3 <a href="https://github.com/vuejs/vue-loader" target="_blank" rel="noopener">vue-loader</a></h3><p>加载 <code>.vue</code> 单文件组件的 <a href="https://github.com/webpack/webpack" target="_blank" rel="noopener">webpack</a> loader。</p><h2 id="5-测试"><a href="#5-测试" class="headerlink" title="5. 测试"></a>5. 测试</h2><p>一般 <code>vue</code> 组件的测试，会用 <a href="https://github.com/vuejs/vue-test-utils" target="_blank" rel="noopener">vue-test-utils</a> + <a href="https://github.com/facebook/jest" target="_blank" rel="noopener">jest</a> / <a href="https://github.com/mochajs/mocha" target="_blank" rel="noopener">mocha</a> / <a href="https://github.com/substack/tape" target="_blank" rel="noopener">tape</a> / <a href="https://github.com/avajs/ava" target="_blank" rel="noopener">ava</a>。</p><h2 id="6-插件库"><a href="#6-插件库" class="headerlink" title="6. 插件库"></a>6. 插件库</h2><p>一些很实用的插件库：</p><ul><li><a href="https://github.com/ustbhuangyi/better-scroll" target="_blank" rel="noopener">better-scroll</a>：<a href="https://github.com/cubiq/iscroll" target="_blank" rel="noopener">iscroll</a> 的封装</li><li><a href="https://github.com/SortableJS/Vue.Draggable" target="_blank" rel="noopener">Vue.Draggable</a>：<a href="https://github.com/SortableJS/Sortable" target="_blank" rel="noopener">Sortable</a> 的封装</li><li><a href="https://github.com/baianat/vee-validate" target="_blank" rel="noopener">vee-validate</a>：数据校验组件</li><li><a href="https://github.com/surmon-china/vue-awesome-swiper" target="_blank" rel="noopener">vue-awesome-swiper</a>：<a href="https://github.com/nolimits4web/swiper" target="_blank" rel="noopener">swiper</a> 的封装</li><li><a href="https://github.com/shentao/vue-multiselect" target="_blank" rel="noopener">vue-multiselect</a>：下拉选择组件</li><li><a href="https://github.com/kazupon/vue-i18n" target="_blank" rel="noopener">vue-i18n</a>：国际化组件</li><li><a href="https://github.com/ElemeFE/v-charts" target="_blank" rel="noopener">v-charts</a>：<a href="https://github.com/apache/incubator-echarts" target="_blank" rel="noopener">echarts</a> 的封装</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;声明：这不是一篇介绍 Vue 基础知识的文章，需要熟悉 Vue 相关知识&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;主架构：&lt;a href=&quot;https://github.com/vuejs/vue&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vue&lt;/a&gt;, &lt;a href=&quot;https://github.com/vuejs/vue-router&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vue-router&lt;/a&gt;, &lt;a href=&quot;https://github.com/vuejs/vuex&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vuex&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;UI 框架：&lt;a href=&quot;https://github.com/ElemeFE/element&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;element ui&lt;/a&gt;, &lt;a href=&quot;https://github.com/iview/iview&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;iview&lt;/a&gt;, &lt;a href=&quot;https://github.com/vuetifyjs/vuetify&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vuetify&lt;/a&gt;, &lt;a href=&quot;https://github.com/airyland/vux&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vux&lt;/a&gt;, &lt;a href=&quot;https://github.com/ElemeFE/mint-ui&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;mint-ui&lt;/a&gt;, &lt;a href=&quot;https://github.com/vuematerial/vue-material&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vue-material&lt;/a&gt;, &lt;a href=&quot;https://github.com/museui/muse-ui&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;muse-ui&lt;/a&gt;, &lt;a href=&quot;https://github.com/youzan/vant&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vant&lt;/a&gt;, &lt;a href=&quot;https://github.com/bootstrap-vue/bootstrap-vue&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;bootstrap-vue&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端扩展" scheme="http://www.barebear.cn/categories/%E5%89%8D%E7%AB%AF%E6%89%A9%E5%B1%95/"/>
    
    
      <category term="前端" scheme="http://www.barebear.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>web 项目如何进行 git 多人协作开发</title>
    <link href="http://www.barebear.cn/web-advance/branch/"/>
    <id>http://www.barebear.cn/web-advance/branch/</id>
    <published>2020-02-21T08:58:56.000Z</published>
    <updated>2020-02-21T08:35:19.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>声明：本文不介绍 git 的基本用法，需要读者对 git、git 命令、git 使用有一定的了解</p></blockquote><p>现在，大部分项目都是用 git 来管理代码的，但当项目变大、多人协作时，git 的使用就变得复杂了，这时就需要在 git 使用的流程上来思考如何更优的使用 git。</p><p>对于大部分 web 项目而言，并不像软件、APP 项目一样有版本的划分，而是不断的更新、迭代，这就使得 web 项目的 git 使用要复杂一些，需要管理好哪些是正在开发的代码、哪些是提交测试的代码、哪些是已经上线的代码、多人共同开发时如何避免代码冲突与线上新代码被旧代码覆盖等等。</p><a id="more"></a><h2 id="1-一个分支"><a href="#1-一个分支" class="headerlink" title="1. 一个分支"></a>1. 一个分支</h2><p>如果项目比较小，不频繁更新时，可以只用 <code>master</code> 一个分支。</p><p>使用流程：</p><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc43vj0kirj30m90aw0sz.jpg" alt=""></p><ol><li>提交代码到本地 <code>master</code> 分支，并推送到远程 <code>master</code> 分支</li><li>持续集成构建或本地构建，然后上传到服务器</li></ol><p>上传到服务器有两种方式：</p><ol><li>持续集成构建，然后同步到服务器</li><li>本地构建，然后上传到服务器（为了简洁清晰，后面的图例中会隐藏这种方式）</li></ol><h2 id="2-开发分支与个人分支"><a href="#2-开发分支与个人分支" class="headerlink" title="2. 开发分支与个人分支"></a>2. 开发分支与个人分支</h2><p>如果项目稍大些，频繁更新时，就需要另外一个开发分支：</p><ul><li><code>master</code>：主分支，对应线上代码</li><li><code>dev</code>：开发分支，对应开发代码</li></ul><p>使用流程：</p><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc43w6t6ibj30hg08m74g.jpg" alt=""></p><ol><li>提交代码到本地 <code>dev</code> 分支</li><li>在需要构建项目时 <code>merge</code> 到本地 <code>master</code> 分支，并推送到远程 <code>master</code> 分支</li><li>持续集成构建，然后同步到服务器</li></ol><p>如果是多人参与的项目，就需要个人开发分支了：</p><ul><li><code>master</code>：主分支，对应线上代码</li><li><code>man1</code>：个人 <code>man1</code> 开发分支</li><li><code>man2</code>：个人 <code>man2</code> 开发分支</li></ul><p>使用流程：</p><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc43wcwlg7j30kh0deglw.jpg" alt=""></p><ol><li>提交代码到本地 <code>man1</code> 分支（以 <code>man1</code> 个人为例）</li><li>在需要构建项目时 <code>merge</code> 到本地 <code>master</code> 分支，并推送到远程 <code>master</code> 分支（有可能需要先 <code>pull</code> 远程的代码）</li><li>持续集成构建，然后同步到服务器</li></ol><p>在适当的时候，每一个个人分支（如 <code>man1, man2</code>）都需要 <code>pull</code> 一下 <code>master</code> 分支，以保证自己本地的代码的版本不会低于服务器。</p><h2 id="3-多个服务器环境"><a href="#3-多个服务器环境" class="headerlink" title="3. 多个服务器环境"></a>3. 多个服务器环境</h2><p>如果项目比较大，并且对应多个服务器环境（测试环境、产品环境）：</p><ul><li><code>master</code>：主分支</li><li><code>prod</code>：产品分支，对应产品服务器环境</li><li><code>test</code>：测试分支，对应测试服务器环境</li><li><code>dev</code>：开发分支</li></ul><p>使用流程：</p><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc43wmhtgyj30j70daaae.jpg" alt=""></p><p>构建测试环境：</p><ol><li>提交代码到本地 <code>dev</code> 分支</li><li>在需要构建项目时 <code>merge</code> 到本地 <code>test</code> 分支，并推送到远程 <code>test</code> 分支</li><li>持续集成构建，然后同步到测试服务器</li></ol><p>构建产品环境可以由远程的 <code>test</code> 分支 <code>merge</code> 到远程 <code>prod</code> 分支进行持续集成构建，也可由本地 <code>dev</code> 或 <code>test</code> 分支 <code>merge</code> 到本地 <code>prod</code> 分支，并推送到远程 <code>prod</code> 分支进行持续集成构建。</p><p>如果是多人参与的项目，就需要个人开发分支了：</p><ul><li><code>master</code>：主分支</li><li><code>prod</code>：产品分支，对应产品服务器环境</li><li><code>test</code>：测试分支，对应测试服务器环境</li><li><code>man1</code>：个人 <code>man1</code> 开发分支</li><li><code>man2</code>：个人 <code>man2</code> 开发分支</li></ul><p>使用流程：</p><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc43wsbagij30lg0h9mxq.jpg" alt=""></p><p>构建测试环境：</p><ol><li>提交代码到本地 <code>man1</code> 分支（以 <code>man1</code> 个人为例）</li><li>在需要构建项目时 <code>merge</code> 到本地 <code>test</code> 分支，并推送到远程 <code>test</code> 分支（有可能需要先 <code>pull</code> 远程的代码）</li><li>持续集成构建，然后同步到测试服务器</li></ol><p>构建产品环境可以由远程的 <code>test</code> 分支 <code>merge</code> 到远程 <code>prod</code> 分支进行持续集成构建，也可由本地 <code>man1</code> 或 <code>test</code> 分支 <code>merge</code> 到本地 <code>prod</code> 分支，并推送到远程 <code>prod</code> 分支进行持续集成构建。</p><p>在适当的时候，每一个个人分支（如 <code>man1, man2</code>）都需要 <code>pull</code> 一下 <code>prod</code> 分支（如有需要，也可以 <code>pull</code> <code>test</code> 分支），以保证自己本地的代码的版本不会低于服务器。</p><h2 id="4-多个需求同时开发"><a href="#4-多个需求同时开发" class="headerlink" title="4. 多个需求同时开发"></a>4. 多个需求同时开发</h2><p>有时候会有多个需求同时开发，并且相互独立，为了不影响每个需求的测试与上线，需要为每个需求创建一个分支。</p><ul><li><code>master</code>：主分支</li><li><code>prod</code>：产品分支，对应产品服务器环境</li><li><code>test</code>：测试分支，对应测试服务器环境</li><li><code>man1</code>：个人 <code>man1</code> 开发分支</li><li><code>man2</code>：个人 <code>man2</code> 开发分支</li><li><code>task1</code>：需求 <code>task1</code> 开发分支</li><li><code>task2</code>：需求 <code>task2</code> 开发分支</li></ul><p>使用流程：</p><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc43wy4atvj30li0ihjry.jpg" alt=""></p><p>构建测试环境与之前的步骤一致，但构建产品环境时，为了保证各个需求不相互影响，一般由本地直接合并到 <code>prod</code> 分支：</p><ol><li>本地 <code>task1</code> 分支 <code>merge</code> 到本地 <code>prod</code> 分支，并推送到远程 <code>prod</code> 分支进行持续集成构建</li><li>每一个个人分支（如 <code>man1, man2</code>）都需要 <code>pull</code> 一下 <code>prod</code> 分支，以保证自己本地的代码的版本不会低于服务器</li><li>最后删除 <code>task1</code> 分支</li></ol><h2 id="5-多人协作开发修改公共文件"><a href="#5-多人协作开发修改公共文件" class="headerlink" title="5. 多人协作开发修改公共文件"></a>5. 多人协作开发修改公共文件</h2><p>因为不同分支修改同一个文件而导致的文件冲突是多人协作开发中比较常见的问题之一，避免这种问题的思路主要有以下的几种：</p><ol><li>在代码层面，尽量避免多个成员都会改动的文件，尽量将代码分解到每个人只负责自己的那块代码，不需要去改别人的代码</li><li>在工程层面，尽量减少公共文件，尽量每个文件只由一个人负责</li><li>在 git 层面，如果有必要，可以单独建一个分支，用于更新某些公共文件，并及时的更新到其他分支</li></ol><h2 id="6-其他分支"><a href="#6-其他分支" class="headerlink" title="6. 其他分支"></a>6. 其他分支</h2><p>有一些常用的分支，可能我们会用到：</p><ul><li><code>bug</code> 分支：用于紧急修复产品环境的 <code>bug</code></li></ul><h2 id="7-根据情况调整、简化流程"><a href="#7-根据情况调整、简化流程" class="headerlink" title="7. 根据情况调整、简化流程"></a>7. 根据情况调整、简化流程</h2><p>上面的图例只有测试服务器和产品服务器，更多服务器类型的工作流程是类似的；图例也只有 <code>man1</code> 和 <code>man2</code> 两个个人分支，更多个人分支的工作流程也是类似的。</p><p>上面的图例主要用于以下特点的项目（需要把整个项目打包成一个整体）：</p><ul><li>单页面 web 前端应用，整个项目只有一个 html 文件，页面之间的切换由本地路由控制，每次更新到服务器都需要打包所有页面</li><li>Java、Go 等后端应用，每次都需要打包成一个整体，可能是一个文件，或者一批文件（不打包成一个整体的方式除外，比如分散 java class 文件）</li><li>使用持续集成构建的方式更新代码到服务器</li></ul><p>这样做主要是为了避免一些问题：</p><ul><li>线上新代码被旧代码覆盖：多人同时开发项目，都需要更新到测试机，如果不是统一 <code>push</code> 到 <code>test</code> 分支做持续集成构建，很难保证线上新代码不会被旧代码覆盖</li><li>未测试的代码被更新到产品环境：这个问题也需要注意，因为这个问题并不能从流程上完全杜绝，需要各位在开发中留意</li></ul><p>对于像下面这种特点的项目，可以根据情况调整、简化流程：</p><ul><li>多页面 web 前端应用，把某一个页面更新到服务器并不影响其他页面</li><li>NodeJs、PHP、Python 等后端应用，只上传自己更新的文件，而不影响服务器上其他文件（把所有代码打包成一个整体的方式除外）</li><li>使用本地构建的方式更新代码到服务器</li></ul><p>比如：</p><ul><li><code>master</code>：主分支</li><li><code>man1</code>：个人 <code>man1</code> 开发分支</li><li><code>man2</code>：个人 <code>man2</code> 开发分支</li><li><code>task1</code>：需求 <code>task1</code> 开发分支</li><li><code>task2</code>：需求 <code>task2</code> 开发分支</li></ul><p>使用流程：</p><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc43x5bwosj30hw0fzt90.jpg" alt=""></p><p>如果多个需求没有冲突，可以同时在 <code>man1</code> 个人分支上开发，并根据需要上传到不同的服务器。</p><p>如果多个需求有冲突，可以每个需求都新建一个分支，如上图所示：</p><ol><li>提交代码到本地 <code>task1</code> 分支（以 <code>task1</code> 个人为例）</li><li>根据需要上传到不同的服务器</li><li>如果代码通过产品环境后，更新到每个个人分支，并删除 <code>task1</code> 分支</li></ol><p>这样子，就简单很多了。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;声明：本文不介绍 git 的基本用法，需要读者对 git、git 命令、git 使用有一定的了解&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;现在，大部分项目都是用 git 来管理代码的，但当项目变大、多人协作时，git 的使用就变得复杂了，这时就需要在 git 使用的流程上来思考如何更优的使用 git。&lt;/p&gt;
&lt;p&gt;对于大部分 web 项目而言，并不像软件、APP 项目一样有版本的划分，而是不断的更新、迭代，这就使得 web 项目的 git 使用要复杂一些，需要管理好哪些是正在开发的代码、哪些是提交测试的代码、哪些是已经上线的代码、多人共同开发时如何避免代码冲突与线上新代码被旧代码覆盖等等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端进阶" scheme="http://www.barebear.cn/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="前端" scheme="http://www.barebear.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>前端开发需要了解的工具集合：webpack, eslint, prettier, ...</title>
    <link href="http://www.barebear.cn/web-advance/tools/"/>
    <id>http://www.barebear.cn/web-advance/tools/</id>
    <published>2020-02-21T08:55:56.000Z</published>
    <updated>2020-02-21T08:25:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>前端开发需要了解的一些工具，这些工具能够帮助你在项目开发中事半功倍。</p><h2 id="1-nrm-npm-registry-管理器"><a href="#1-nrm-npm-registry-管理器" class="headerlink" title="1. nrm: npm registry 管理器"></a>1. <a href="https://github.com/Pana/nrm" target="_blank" rel="noopener">nrm</a>: <code>npm</code> registry 管理器</h2><p><code>registry</code>: <code>npm</code> 远程仓库的地址。</p><p>由于众所周知的原因，<code>npm</code> 官方仓库在国内特别的慢，所以我们需要用一些替代性方案，一种方案就是切换 <code>npm</code> registry 到国内的镜像仓库。</p><p>所以，一般我们会这样做：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 切换到淘宝 npm 仓库</span><br><span class="line">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org&#x2F;</span><br></pre></td></tr></table></figure><p>但是这样做会比较麻烦，因为切换的时候得记住 registry 的 url 地址。所以就需要 <a href="https://github.com/Pana/nrm" target="_blank" rel="noopener">nrm</a> 来管理 <code>npm</code> registry。</p><a id="more"></a><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g nrm</span><br></pre></td></tr></table></figure><h4 id="内置的-registry"><a href="#内置的-registry" class="headerlink" title="内置的 registry"></a>内置的 registry</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm ---- https:&#x2F;&#x2F;registry.npmjs.org&#x2F;</span><br><span class="line">cnpm --- http:&#x2F;&#x2F;r.cnpmjs.org&#x2F;</span><br><span class="line">taobao - https:&#x2F;&#x2F;registry.npm.taobao.org&#x2F;</span><br><span class="line">nj ----- https:&#x2F;&#x2F;registry.nodejitsu.com&#x2F;</span><br><span class="line">rednpm - http:&#x2F;&#x2F;registry.mirror.cqupt.edu.cn&#x2F;</span><br><span class="line">npmMirror  https:&#x2F;&#x2F;skimdb.npmjs.com&#x2F;registry&#x2F;</span><br><span class="line">edunpm - http:&#x2F;&#x2F;registry.enpmjs.org&#x2F;</span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 切换到 taobao registry</span><br><span class="line">nrm use taobao</span><br><span class="line"></span><br><span class="line"># 切换到 npm 官方 registry</span><br><span class="line">nrm use npm</span><br><span class="line"></span><br><span class="line"># 添加自己的 registry</span><br><span class="line">nrm add yourName yourRegistry</span><br></pre></td></tr></table></figure><h2 id="2-cnpm-使用国内镜像仓库的-npm-客户端"><a href="#2-cnpm-使用国内镜像仓库的-npm-客户端" class="headerlink" title="2. cnpm: 使用国内镜像仓库的 npm 客户端"></a>2. <a href="https://github.com/cnpm/cnpm" target="_blank" rel="noopener">cnpm</a>: 使用国内镜像仓库的 <code>npm</code> 客户端</h2><p>相当于是 <a href="https://github.com/npm/npm" target="_blank" rel="noopener">npm</a> 的一个克隆版本，它的命令中除了 <code>publish</code> 之外，其他的与 <code>npm</code> 的命令一致。内部默认使用的是国内的 <code>npm</code> 代码仓库 <a href="https://cnpmjs.org/" target="_blank" rel="noopener">https://cnpmjs.org/</a>，当然你也可以改为自己的。</p><p>如果你不喜欢使用 <a href="https://github.com/Pana/nrm" target="_blank" rel="noopener">nrm</a> 切换 <code>npm</code> registry，可以把 <code>npm</code> 和 <code>cnpm</code> 这两者一起用。</p><p>另外，它一般还会和 <a href="https://github.com/cnpm/cnpmjs.org" target="_blank" rel="noopener">cnpmjs.org</a> 配合使用。</p><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm</span><br></pre></td></tr></table></figure><h2 id="3-yarn-类似-npm-的依赖管理工具"><a href="#3-yarn-类似-npm-的依赖管理工具" class="headerlink" title="3. yarn: 类似 npm 的依赖管理工具"></a>3. <a href="https://github.com/yarnpkg/yarn" target="_blank" rel="noopener">yarn</a>: 类似 <code>npm</code> 的依赖管理工具</h2><p>类似 <code>npm</code> 的依赖管理工具，但 <code>yarn</code> 缓存了每个下载过的包，所以再次使用时无需重复下载，同时利用并行下载以最大化资源利用率，因此安装速度更快。</p><p>并且在开发 <a href="https://github.com/facebook/react-native" target="_blank" rel="noopener">react-native</a> 应用程序时，是强烈建议使用 <a href="https://github.com/yarnpkg/yarn" target="_blank" rel="noopener">yarn</a> 的，因为如果非要用 npm, 必须使用 npm &lt; 5 版本。</p><h4 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yarn</span><br></pre></td></tr></table></figure><h2 id="4-webpack-前端打包工具"><a href="#4-webpack-前端打包工具" class="headerlink" title="4. webpack: 前端打包工具"></a>4. <a href="https://github.com/webpack/webpack" target="_blank" rel="noopener">webpack</a>: 前端打包工具</h2><p>现在前端打包基本上都会用 <a href="https://github.com/webpack/webpack" target="_blank" rel="noopener">webpack</a>，它不仅能打包源代码文件（如 <code>js, css, html, ts, ...</code>），还能打包静态资源文件（如 <code>images, fonts, ...</code>），并且还能打包按需加载 SPA 应用。总之，<code>webpack</code> 是前端打包的不二选择。</p><h4 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 全局</span><br><span class="line">npm install -g webpack</span><br><span class="line"></span><br><span class="line"># 本地</span><br><span class="line">npm install --save-dev webpack</span><br></pre></td></tr></table></figure><h2 id="5-babel-es6-gt-es5-转码器"><a href="#5-babel-es6-gt-es5-转码器" class="headerlink" title="5. babel: es6 -&gt; es5 转码器"></a>5. <a href="https://github.com/babel/babel" target="_blank" rel="noopener">babel</a>: es6 -&gt; es5 转码器</h2><p>有 <a href="https://github.com/babel/babel" target="_blank" rel="noopener">babel</a> 在，你就可以写最新版的 JavaScript 语法（<code>es6, es7, es2015, ...</code>），然后由 <code>babel</code> 把你的源代码转码成你所需要的 JavaScript 语法，比如浏览器端运行的 <code>es5</code>。<code>babel</code> 一般都是配合 <a href="https://github.com/webpack/webpack" target="_blank" rel="noopener">webpack</a>、<a href="https://github.com/rollup/rollup" target="_blank" rel="noopener">rollup</a>、<a href="https://github.com/parcel-bundler/parcel" target="_blank" rel="noopener">parcel</a> 等打包构建工具一起使用，详细参考 <a href="https://babeljs.io/en/setup" target="_blank" rel="noopener">babel - setup</a>。</p><h4 id="安装-4"><a href="#安装-4" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 全局</span><br><span class="line">npm install -g babel-cli</span><br><span class="line"></span><br><span class="line"># 本地</span><br><span class="line">npm install --save-dev babel-cli</span><br></pre></td></tr></table></figure><h2 id="6-eslint-js-语法（包括-jsx-语法）检查与矫正"><a href="#6-eslint-js-语法（包括-jsx-语法）检查与矫正" class="headerlink" title="6. eslint: js 语法（包括 jsx 语法）检查与矫正"></a>6. <a href="https://github.com/eslint/eslint" target="_blank" rel="noopener">eslint</a>: js 语法（包括 jsx 语法）检查与矫正</h2><p>这个工具能够检查 js 语法（包括 jsx 语法），然后最大程度的矫正不符合规范的代码。对于提升个人代码质量，保证团队代码规范和代码风格是相当有用的。</p><p><a href="https://github.com/eslint/eslint" target="_blank" rel="noopener">eslint</a> 一般会配合 <a href="https://github.com/typicode/husky" target="_blank" rel="noopener">husky</a> 与 <a href="https://github.com/okonet/lint-staged" target="_blank" rel="noopener">lint-staged</a> 一起使用。详细用法可以参考 <a href="/12.md">怎样提升代码质量</a>。</p><h4 id="安装-5"><a href="#安装-5" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 全局</span><br><span class="line">npm install -g eslint</span><br><span class="line"></span><br><span class="line"># 本地</span><br><span class="line">npm install --save-dev eslint</span><br></pre></td></tr></table></figure><h2 id="7-stylelint-css-语法（包括-less-scss-语法）检查与矫正"><a href="#7-stylelint-css-语法（包括-less-scss-语法）检查与矫正" class="headerlink" title="7. stylelint: css 语法（包括 less, scss 语法）检查与矫正"></a>7. <a href="https://github.com/stylelint/stylelint" target="_blank" rel="noopener">stylelint</a>: css 语法（包括 less, scss 语法）检查与矫正</h2><p>这个工具能够检查 css 语法（包括 less, scss 语法），然后最大程度的矫正不符合规范的代码。对于提升个人代码质量，保证团队代码规范和代码风格是相当有用的。</p><p><a href="https://github.com/stylelint/stylelint" target="_blank" rel="noopener">stylelint</a> 一般会配合 <a href="https://github.com/typicode/husky" target="_blank" rel="noopener">husky</a> 与 <a href="https://github.com/okonet/lint-staged" target="_blank" rel="noopener">lint-staged</a> 一起使用。详细用法可以参考 <a href="/12.md">怎样提升代码质量</a>。</p><h4 id="安装-6"><a href="#安装-6" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 全局</span><br><span class="line">npm install -g stylelint</span><br><span class="line"></span><br><span class="line"># 本地</span><br><span class="line">npm install --save-dev stylelint</span><br></pre></td></tr></table></figure><h2 id="8-prettier-代码格式优化"><a href="#8-prettier-代码格式优化" class="headerlink" title="8. prettier: 代码格式优化"></a>8. <a href="https://github.com/prettier/prettier" target="_blank" rel="noopener">prettier</a>: 代码格式优化</h2><p>这个工具能够优化 <code>js, jsx, ts, css, less, scss, json, md, ...</code>，对于保证团队代码风格是相当有用的。</p><p><a href="https://github.com/prettier/prettier" target="_blank" rel="noopener">prettier</a> 一般会配合 <a href="https://github.com/typicode/husky" target="_blank" rel="noopener">husky</a> 与 <a href="https://github.com/okonet/lint-staged" target="_blank" rel="noopener">lint-staged</a> 一起使用。详细用法可以参考 <a href="/12.md">怎样提升代码质量</a>。</p><h4 id="安装-7"><a href="#安装-7" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 全局</span><br><span class="line">npm install -g prettier</span><br><span class="line"></span><br><span class="line"># 本地</span><br><span class="line">npm install --save-dev prettier</span><br></pre></td></tr></table></figure><h2 id="9-gulp-基于流的自动化构建工具"><a href="#9-gulp-基于流的自动化构建工具" class="headerlink" title="9. gulp: 基于流的自动化构建工具"></a>9. <a href="https://github.com/gulpjs/gulp" target="_blank" rel="noopener">gulp</a>: 基于流的自动化构建工具</h2><p>在 <a href="https://github.com/webpack/webpack" target="_blank" rel="noopener">webpack</a> 出现之前，前端的构建任务很多都是由 <a href="https://github.com/gulpjs/gulp" target="_blank" rel="noopener">gulp</a> 来完成的。<code>webpack</code> 出现之后，<code>gulp</code> 在打包构建这一块功能则退居二线，但是 <code>webpack</code> 只负责代码打包，很多其他工作还是由 <code>gulp</code> 来完成，比如上传打包文件到服务器，让打包文件进行更多流操作等。所以，很多情况下都是 <code>gulp</code> 与 <code>webpack</code> 配合使用。</p><h4 id="安装-8"><a href="#安装-8" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 全局</span><br><span class="line">npm install -g gulp</span><br><span class="line"></span><br><span class="line"># 本地</span><br><span class="line">npm install --save-dev gulp</span><br></pre></td></tr></table></figure><h2 id="10-jest-js-测试库"><a href="#10-jest-js-测试库" class="headerlink" title="10. jest: js 测试库"></a>10. <a href="https://github.com/facebook/jest" target="_blank" rel="noopener">jest</a>: js 测试库</h2><p>在 Facebook 内部，包括 <a href="https://github.com/facebook/react" target="_blank" rel="noopener">react</a> 应用在内的所有 JavaScript 代码都是用 <a href="https://github.com/facebook/jest" target="_blank" rel="noopener">jest</a> 来测试的。它的一个理念就是提供一套完整集成的 “零配置” 测试体验。所以，使用 <code>jest</code> 来测试 JavaScript 是一件很愉快的事情。</p><h4 id="安装-9"><a href="#安装-9" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev jest</span><br></pre></td></tr></table></figure><h2 id="11-enzyme-react-组件测试库"><a href="#11-enzyme-react-组件测试库" class="headerlink" title="11. enzyme: react 组件测试库"></a>11. <a href="https://github.com/airbnb/enzyme" target="_blank" rel="noopener">enzyme</a>: <a href="https://github.com/facebook/react" target="_blank" rel="noopener">react</a> 组件测试库</h2><p><a href="https://github.com/facebook/jest" target="_blank" rel="noopener">jest</a> 只是单纯用来测试 JavaScript 的，而 <code>react</code> 组件的测试，就需要用到 airbnb 出品的 <a href="https://github.com/airbnb/enzyme" target="_blank" rel="noopener">enzyme</a> 了。一般 <code>enzyme</code> 会和 <code>jest</code> 一起使用。</p><h4 id="安装-10"><a href="#安装-10" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev enzyme enzyme-adapter-react-16</span><br></pre></td></tr></table></figure><h2 id="12-react-devtools-chrome-开发者工具插件-for-react"><a href="#12-react-devtools-chrome-开发者工具插件-for-react" class="headerlink" title="12. react-devtools: chrome 开发者工具插件 for react"></a>12. <a href="https://github.com/facebook/react-devtools" target="_blank" rel="noopener">react-devtools</a>: chrome 开发者工具插件 for <a href="https://github.com/facebook/react" target="_blank" rel="noopener">react</a></h2><p>这是专门针对 <a href="https://github.com/facebook/react" target="_blank" rel="noopener">react</a> 组件开发的 chrome 开发者工具插件，就像开发者工具的 <code>Elements</code> 一样，可以查看整个页面的 <code>react</code> 组件树和每个组件的属性和状态，并且可以动态的更改属性和状态，然后会更新 UI 到应用上。</p><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc43g2id1dj317w0fqdjl.jpg" alt=""></p><h4 id="安装-11"><a href="#安装-11" class="headerlink" title="安装"></a>安装</h4><p>通过 chrome 应用商店安装 <a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi" target="_blank" rel="noopener">chrome - react-developer-tools</a>.</p><p>其他安装方式查看 <a href="https://github.com/facebook/react-devtools" target="_blank" rel="noopener">react-devtools</a>.</p><h2 id="13-redux-devtools-与-redux-devtools-extension-chrome-开发者工具插件-for-redux"><a href="#13-redux-devtools-与-redux-devtools-extension-chrome-开发者工具插件-for-redux" class="headerlink" title="13. redux-devtools 与 redux-devtools-extension: chrome 开发者工具插件 for redux"></a>13. <a href="https://github.com/reduxjs/redux-devtools" target="_blank" rel="noopener">redux-devtools</a> 与 <a href="https://github.com/zalmoxisus/redux-devtools-extension" target="_blank" rel="noopener">redux-devtools-extension</a>: chrome 开发者工具插件 for <a href="https://github.com/reduxjs/redux" target="_blank" rel="noopener">redux</a></h2><p>这是专门针对 <a href="https://github.com/reduxjs/redux" target="_blank" rel="noopener">redux</a> 开发的 chrome 开发者工具插件，就像 <a href="https://github.com/facebook/react-devtools" target="_blank" rel="noopener">react-devtools</a> 一样，可以查看整个页面的 <code>redux</code> store 及其变化，并且可以动态的派发 <code>action</code>，然后会更新 UI 到应用上。</p><h4 id="13-1-安装-redux-devtools"><a href="#13-1-安装-redux-devtools" class="headerlink" title="13.1 安装 redux-devtools"></a>13.1 安装 <a href="https://github.com/reduxjs/redux-devtools" target="_blank" rel="noopener">redux-devtools</a></h4><p>这种安装方式，<code>redux-devtools</code> 会嵌入到页面中，成为页面的一部分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev redux-devtools</span><br><span class="line"></span><br><span class="line"># 还可以安装</span><br><span class="line">npm install --save-dev redux-devtools-log-monitor</span><br><span class="line">npm install --save-dev redux-devtools-dock-monitor</span><br></pre></td></tr></table></figure><p>更多信息参考 <a href="https://github.com/reduxjs/redux-devtools/blob/master/docs/Walkthrough.md" target="_blank" rel="noopener">redux-devtools - Walkthrough</a>.</p><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc43gsdyyjj31a00u0q92.jpg" alt=""></p><h4 id="13-2-安装-redux-devtools-extension"><a href="#13-2-安装-redux-devtools-extension" class="headerlink" title="13.2 安装 redux-devtools-extension"></a>13.2 安装 <a href="https://github.com/zalmoxisus/redux-devtools-extension" target="_blank" rel="noopener">redux-devtools-extension</a></h4><p>这种安装方式是成为浏览器开发者工具的一个插件。</p><p>通过 chrome 应用商店安装 <a href="https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd" target="_blank" rel="noopener">chrome - redux-devtools</a>.</p><p>其他安装方式查看 <a href="https://github.com/zalmoxisus/redux-devtools-extension" target="_blank" rel="noopener">redux-devtools-extension</a>.</p><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc43itu0ocj31d60u07m6.jpg" alt=""></p><h2 id="14-vue-devtools-chrome-开发者工具插件-for-vue"><a href="#14-vue-devtools-chrome-开发者工具插件-for-vue" class="headerlink" title="14. vue-devtools: chrome 开发者工具插件 for vue"></a>14. <a href="https://github.com/vuejs/vue-devtools" target="_blank" rel="noopener">vue-devtools</a>: chrome 开发者工具插件 for <a href="https://github.com/vuejs/vue" target="_blank" rel="noopener">vue</a></h2><p>这是专门针对 <a href="https://github.com/vuejs/vue" target="_blank" rel="noopener">vue</a> 组件开发的 chrome 开发者工具插件，就像开发者工具的 <code>Elements</code> 一样，可以查看整个页面的 <code>vue</code> 组件树和每个组件的 <code>data</code>，并且可以动态的更改 <code>data</code>，然后会更新 UI 到应用上。</p><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc43kan2s2j30k008ujsn.jpg" alt=""></p><h4 id="安装-12"><a href="#安装-12" class="headerlink" title="安装"></a>安装</h4><p>通过 chrome 应用商店安装 <a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd" target="_blank" rel="noopener">chrome - vuejs-devtools</a>.</p><p>其他安装方式查看 <a href="https://github.com/vuejs/vue-devtools" target="_blank" rel="noopener">vue-devtools</a>.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端开发需要了解的一些工具，这些工具能够帮助你在项目开发中事半功倍。&lt;/p&gt;
&lt;h2 id=&quot;1-nrm-npm-registry-管理器&quot;&gt;&lt;a href=&quot;#1-nrm-npm-registry-管理器&quot; class=&quot;headerlink&quot; title=&quot;1. nrm: npm registry 管理器&quot;&gt;&lt;/a&gt;1. &lt;a href=&quot;https://github.com/Pana/nrm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;nrm&lt;/a&gt;: &lt;code&gt;npm&lt;/code&gt; registry 管理器&lt;/h2&gt;&lt;p&gt;&lt;code&gt;registry&lt;/code&gt;: &lt;code&gt;npm&lt;/code&gt; 远程仓库的地址。&lt;/p&gt;
&lt;p&gt;由于众所周知的原因，&lt;code&gt;npm&lt;/code&gt; 官方仓库在国内特别的慢，所以我们需要用一些替代性方案，一种方案就是切换 &lt;code&gt;npm&lt;/code&gt; registry 到国内的镜像仓库。&lt;/p&gt;
&lt;p&gt;所以，一般我们会这样做：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 切换到淘宝 npm 仓库&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm config set registry https:&amp;#x2F;&amp;#x2F;registry.npm.taobao.org&amp;#x2F;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;但是这样做会比较麻烦，因为切换的时候得记住 registry 的 url 地址。所以就需要 &lt;a href=&quot;https://github.com/Pana/nrm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;nrm&lt;/a&gt; 来管理 &lt;code&gt;npm&lt;/code&gt; registry。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端进阶" scheme="http://www.barebear.cn/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="前端" scheme="http://www.barebear.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>react、vue 组件开发利器：storybook</title>
    <link href="http://www.barebear.cn/web-advance/storybook/"/>
    <id>http://www.barebear.cn/web-advance/storybook/</id>
    <published>2020-02-21T08:50:56.000Z</published>
    <updated>2020-02-21T08:15:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于前端开发来说，组件化技术已经是一门必修课了，这其中又主要以 <a href="https://github.com/facebook/react" target="_blank" rel="noopener">react</a> 和 <a href="https://github.com/vuejs/vue" target="_blank" rel="noopener">vue</a> 为主。但平时在开发组件，尤其是公共组件或者第三方组件库的时候，往往会有一些困扰：</p><ul><li>不能很好的管理多个组件，尤其是在组件预览的时候，不能一目了然</li><li>在组件预览的时候，也不能很好的反应一个组件的多个不同状态</li><li>自动化交互测试可以使用 <a href="https://github.com/airbnb/enzyme" target="_blank" rel="noopener">enzyme</a>，但很多时候还得手动测试，就比较麻烦了</li><li>在写文档的时候，需要将组件预览和文档写在一起，并需要切换到不同的状态，就比较吃力了</li></ul><p>所以，<a href="https://github.com/storybooks/storybook" target="_blank" rel="noopener">storybook</a> 就是为了解决这些问题而出现的，它为你的组件搭建了一个强大的开发环境，主要提供了以下的几个功能：</p><a id="more"></a><ul><li>提供了一个强大的 UI 组件管理页面，可以很便捷、清晰的分组、管理多个组件或一个组件的多个不同状态</li><li>在自动化交互测试之外，可以很方便的进行手动交互测试，并且可以动态改变组件参数，查看视图变化</li><li>可以将组件预览导出为静态资源，这样就可以很方便查看组件的文档和不同参数对应的不同视图</li><li>还有一系列的插件，提供了很多额外的功能，帮助你更好的开发、测试、优化组件</li></ul><p>社区已经有很多组件库都在使用 <a href="https://github.com/storybooks/storybook" target="_blank" rel="noopener">storybook</a> 开发，比如：</p><ul><li><a href="https://github.com/airbnb/react-dates" target="_blank" rel="noopener">react-dates</a> 的 <code>storybook</code> <a href="http://airbnb.io/react-dates/" target="_blank" rel="noopener">react-dates - storybook</a></li><li><a href="https://github.com/necolas/react-native-web" target="_blank" rel="noopener">react-native-web</a> 的 <code>storybook</code> <a href="http://necolas.github.io/react-native-web/storybook/" target="_blank" rel="noopener">react-native-web - storybook</a></li></ul><p>再顺便截个图吧<br><img src="https://tva1.sinaimg.cn/large/0082zybply1gc43d8lajij31cg0u00wd.jpg" alt=""></p><h2 id="1-框架适配"><a href="#1-框架适配" class="headerlink" title="1. 框架适配"></a>1. 框架适配</h2><ul><li><a href="https://github.com/storybooks/storybook/blob/master/app/react" target="_blank" rel="noopener">React</a></li><li><a href="https://github.com/storybooks/storybook/blob/master/app/react-native" target="_blank" rel="noopener">React Native</a></li><li><a href="https://github.com/storybooks/storybook/blob/master/app/vue" target="_blank" rel="noopener">Vue</a></li><li><a href="https://github.com/storybooks/storybook/blob/master/app/angular" target="_blank" rel="noopener">Angular</a></li><li><a href="https://github.com/storybooks/storybook/blob/master/app/polymer" target="_blank" rel="noopener">Polymer</a></li><li><a href="https://github.com/storybooks/storybook/blob/master/app/mithril" target="_blank" rel="noopener">Mithril</a>: 目前尚处 <code>alpha</code> 阶段</li><li><a href="https://github.com/storybooks/storybook/blob/master/app/marko" target="_blank" rel="noopener">Marko</a>: 目前尚处 <code>alpha</code> 阶段</li><li><a href="https://github.com/storybooks/storybook/blob/master/app/html" target="_blank" rel="noopener">HTML</a>: 目前尚处 <code>alpha</code> 阶段</li><li><a href="https://github.com/storybooks/storybook/blob/master/app/svelte" target="_blank" rel="noopener">Svelte</a>: 目前尚处 <code>alpha</code> 阶段</li><li><a href="https://github.com/storybooks/storybook/blob/master/app/riot" target="_blank" rel="noopener">Riot</a> : 目前尚处 <code>alpha</code> 阶段</li></ul><h2 id="2-开发与命令"><a href="#2-开发与命令" class="headerlink" title="2. 开发与命令"></a>2. 开发与命令</h2><h2 id="2-1-如何写一个-story"><a href="#2-1-如何写一个-story" class="headerlink" title="2.1 如何写一个 story"></a>2.1 如何写一个 <code>story</code></h2><p>查看 <a href="https://storybook.js.org/basics/writing-stories/" target="_blank" rel="noopener">storybook - Writing Stories</a>，了解怎么写 <code>stories</code> 与怎么用插件。</p><h2 id="2-2-添加-storybook"><a href="#2-2-添加-storybook" class="headerlink" title="2.2 添加 storybook"></a>2.2 添加 <code>storybook</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 安装全局命令</span><br><span class="line">npm i -g @storybook&#x2F;cli</span><br><span class="line"></span><br><span class="line"># 初始化已有项目（不会对原项目产生影响，只添加必要的配置与脚本而已）</span><br><span class="line">cd my-project-directory</span><br><span class="line">getstorybook</span><br><span class="line"></span><br><span class="line"># 运行 storybook</span><br><span class="line">npm run storybook</span><br></pre></td></tr></table></figure><p>如果需要手动添加 <code>storybook</code> 或它的插件，可以查看：</p><ul><li><a href="https://storybook.js.org/basics/guide-react/" target="_blank" rel="noopener">Storybook for React</a></li><li><a href="https://storybook.js.org/basics/guide-vue/" target="_blank" rel="noopener">Storybook for Vue</a></li><li><a href="https://storybook.js.org/basics/guide-angular/" target="_blank" rel="noopener">Storybook for Angular</a></li></ul><h2 id="2-3-将组件预览导出为静态资源"><a href="#2-3-将组件预览导出为静态资源" class="headerlink" title="2.3 将组件预览导出为静态资源"></a>2.3 将组件预览导出为静态资源</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 添加到 package.json 的 scripts</span><br><span class="line">&#123;</span><br><span class="line">  &quot;export-storybook&quot;: &quot;build-storybook -c .storybook -o .out&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 运行命令</span><br><span class="line">npm run export-storybook</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于前端开发来说，组件化技术已经是一门必修课了，这其中又主要以 &lt;a href=&quot;https://github.com/facebook/react&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;react&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/vuejs/vue&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vue&lt;/a&gt; 为主。但平时在开发组件，尤其是公共组件或者第三方组件库的时候，往往会有一些困扰：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不能很好的管理多个组件，尤其是在组件预览的时候，不能一目了然&lt;/li&gt;
&lt;li&gt;在组件预览的时候，也不能很好的反应一个组件的多个不同状态&lt;/li&gt;
&lt;li&gt;自动化交互测试可以使用 &lt;a href=&quot;https://github.com/airbnb/enzyme&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;enzyme&lt;/a&gt;，但很多时候还得手动测试，就比较麻烦了&lt;/li&gt;
&lt;li&gt;在写文档的时候，需要将组件预览和文档写在一起，并需要切换到不同的状态，就比较吃力了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以，&lt;a href=&quot;https://github.com/storybooks/storybook&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;storybook&lt;/a&gt; 就是为了解决这些问题而出现的，它为你的组件搭建了一个强大的开发环境，主要提供了以下的几个功能：&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端进阶" scheme="http://www.barebear.cn/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="前端" scheme="http://www.barebear.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>webpack 之外的另一种选择：rollup</title>
    <link href="http://www.barebear.cn/web-advance/rollup/"/>
    <id>http://www.barebear.cn/web-advance/rollup/</id>
    <published>2020-02-21T08:45:56.000Z</published>
    <updated>2020-02-21T08:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://webpack.js.org/" target="_blank" rel="noopener">webpack</a> 对前端来说是再熟悉不过的工具了，它提供了强大的功能来构建前端的资源，包括 <code>html/js/ts/css/less/scss ...</code> 等语言脚本，也包括 <code>images/fonts ...</code> 等二进制文件。</p><p>其实，webpack 发起之初主要是为了解决以下两个问题：</p><ol><li>代码拆分（Code Splitting）: 可以将应用程序分解成可管理的代码块，可以按需加载，这样用户便可快速与应用交互，而不必等到整个应用程序下载和解析完成才能使用，以此构建复杂的单页应用程序（SPA）；</li><li>静态资源（Static Assets）: 可以将所有的静态资源，如 js、css、图片、字体等，导入到应用程序中，然后由 webpack 使用 hash 重命名需要的资源文件，而无需为文件 URL 增添 hash 而使用 hack 脚本，并且一个资源还能依赖其他资源。</li></ol><p>正是因为 webpack 拥有如此强大的功能，所以 webpack 在进行资源打包的时候，就会产生很多冗余的代码（如果你有查看过 webpack 的 bundle 文件，便会发现）。</p><a id="more"></a><p>比如，把 <code>export default str =&gt; str;</code> 这段代码用 webpack 打包就会得到下面的结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;******&#x2F; (function(modules) &#123; &#x2F;&#x2F; webpackBootstrap</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; The module cache</span><br><span class="line">&#x2F;******&#x2F; var installedModules &#x3D; &#123;&#125;;</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; The require function</span><br><span class="line">&#x2F;******&#x2F; function __webpack_require__(moduleId) &#123;</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; Check if module is in cache</span><br><span class="line">&#x2F;******&#x2F; if(installedModules[moduleId]) &#123;</span><br><span class="line">&#x2F;******&#x2F; return installedModules[moduleId].exports;</span><br><span class="line">&#x2F;******&#x2F; &#125;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; Create a new module (and put it into the cache)</span><br><span class="line">&#x2F;******&#x2F; var module &#x3D; installedModules[moduleId] &#x3D; &#123;</span><br><span class="line">&#x2F;******&#x2F; i: moduleId,</span><br><span class="line">&#x2F;******&#x2F; l: false,</span><br><span class="line">&#x2F;******&#x2F; exports: &#123;&#125;</span><br><span class="line">&#x2F;******&#x2F; &#125;;</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; Execute the module function</span><br><span class="line">&#x2F;******&#x2F; modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; Flag the module as loaded</span><br><span class="line">&#x2F;******&#x2F; module.l &#x3D; true;</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; Return the exports of the module</span><br><span class="line">&#x2F;******&#x2F; return module.exports;</span><br><span class="line">&#x2F;******&#x2F; &#125;</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; expose the modules object (__webpack_modules__)</span><br><span class="line">&#x2F;******&#x2F; __webpack_require__.m &#x3D; modules;</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; expose the module cache</span><br><span class="line">&#x2F;******&#x2F; __webpack_require__.c &#x3D; installedModules;</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; define getter function for harmony exports</span><br><span class="line">&#x2F;******&#x2F; __webpack_require__.d &#x3D; function(exports, name, getter) &#123;</span><br><span class="line">&#x2F;******&#x2F; if(!__webpack_require__.o(exports, name)) &#123;</span><br><span class="line">&#x2F;******&#x2F; Object.defineProperty(exports, name, &#123;</span><br><span class="line">&#x2F;******&#x2F; configurable: false,</span><br><span class="line">&#x2F;******&#x2F; enumerable: true,</span><br><span class="line">&#x2F;******&#x2F; get: getter</span><br><span class="line">&#x2F;******&#x2F; &#125;);</span><br><span class="line">&#x2F;******&#x2F; &#125;</span><br><span class="line">&#x2F;******&#x2F; &#125;;</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; getDefaultExport function for compatibility with non-harmony modules</span><br><span class="line">&#x2F;******&#x2F; __webpack_require__.n &#x3D; function(module) &#123;</span><br><span class="line">&#x2F;******&#x2F; var getter &#x3D; module &amp;&amp; module.__esModule ?</span><br><span class="line">&#x2F;******&#x2F; function getDefault() &#123; return module[&#39;default&#39;]; &#125; :</span><br><span class="line">&#x2F;******&#x2F; function getModuleExports() &#123; return module; &#125;;</span><br><span class="line">&#x2F;******&#x2F; __webpack_require__.d(getter, &#39;a&#39;, getter);</span><br><span class="line">&#x2F;******&#x2F; return getter;</span><br><span class="line">&#x2F;******&#x2F; &#125;;</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; Object.prototype.hasOwnProperty.call</span><br><span class="line">&#x2F;******&#x2F; __webpack_require__.o &#x3D; function(object, property) &#123; return Object.prototype.hasOwnProperty.call(object, property); &#125;;</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; __webpack_public_path__</span><br><span class="line">&#x2F;******&#x2F; __webpack_require__.p &#x3D; &quot;&quot;;</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; Load entry module and return exports</span><br><span class="line">&#x2F;******&#x2F; return __webpack_require__(__webpack_require__.s &#x3D; 0);</span><br><span class="line">&#x2F;******&#x2F; &#125;)</span><br><span class="line">&#x2F;************************************************************************&#x2F;</span><br><span class="line">&#x2F;******&#x2F; ([</span><br><span class="line">&#x2F;* 0 *&#x2F;</span><br><span class="line">&#x2F;***&#x2F; (function(module, __webpack_exports__, __webpack_require__) &#123;</span><br><span class="line"></span><br><span class="line">&quot;use strict&quot;;</span><br><span class="line">Object.defineProperty(__webpack_exports__, &quot;__esModule&quot;, &#123; value: true &#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;* harmony default export *&#x2F; __webpack_exports__[&quot;default&quot;] &#x3D; (str &#x3D;&gt; str);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;***&#x2F; &#125;)</span><br><span class="line">&#x2F;******&#x2F; ]);</span><br></pre></td></tr></table></figure><p>这在以下的一些情境中就不太高效，需要寻求更好的解决方案：</p><ol><li>需要 js 高效运行。因为 webpack 对子模块定义和运行时的依赖处理（<code>__webpack_require__</code>），不仅导致文件体积增大，还会大幅拉低性能；</li><li>项目（特别是类库）只有 js，而没有其他的静态资源文件，使用 webpack 就有点大才小用了，因为 webpack bundle 文件的体积略大，运行略慢，可读性略低。</li></ol><p>在这种情况下，就想要寻求一种更好的解决方案，这便是 <a href="https://github.com/rollup/rollup" target="_blank" rel="noopener">rollup</a>.</p><p>现在已经有很多类库都在使用 <a href="https://github.com/rollup/rollup" target="_blank" rel="noopener">rollup</a> 进行打包了，比如：<a href="https://github.com/facebook/react" target="_blank" rel="noopener">react</a>, <a href="https://github.com/vuejs/vue" target="_blank" rel="noopener">vue</a>, <a href="https://github.com/developit/preact" target="_blank" rel="noopener">preact</a>, <a href="https://github.com/mrdoob/three.js" target="_blank" rel="noopener">three.js</a>, <a href="https://github.com/moment/moment" target="_blank" rel="noopener">moment</a>, <a href="https://github.com/d3/d3" target="_blank" rel="noopener">d3</a> 等。</p><h2 id="1-工具"><a href="#1-工具" class="headerlink" title="1. 工具"></a>1. 工具</h2><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i -g rollup          # 全局安装</span><br><span class="line"></span><br><span class="line">npm i -D rollup          # 本地安装</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rollup -c                # 使用一个配置文件，进行打包操作</span><br></pre></td></tr></table></figure><p>更多详细的用法，参考 <a href="https://rollupjs.org/guide/en#command-line-flags" target="_blank" rel="noopener">rollup.js - command-line-flags</a>.</p><h2 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h2><p><a href="https://github.com/rollup/rollup" target="_blank" rel="noopener">rollup</a> 的配置与 <a href="https://webpack.js.org/" target="_blank" rel="noopener">webpack</a> 的配置类似，定义在 <code>rollup.config.js</code> 文件中，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; rollup.config.js</span><br><span class="line">export default &#123;</span><br><span class="line">  input: &#39;src&#x2F;index.js&#39;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    file: &#39;bundle.js&#39;,</span><br><span class="line">    &#x2F;&#x2F; amd, cjs, esm, iife, umd, system</span><br><span class="line">    format: &#39;cjs&#39;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>常用的几个配置项：</p><ol><li><code>input</code>: 源码入口文件，一般是一个文件，如 <code>src/index.js</code>。</li><li><code>output</code>: 定义输出，如文件名，目标目录，输出模块范式（<code>es6</code>, <code>commonjs</code>, <code>amd</code>, <code>umd</code>, <code>iife</code> 等），模块导出名称，外部库声明，全局变量等。</li><li><code>plugins</code>: 插件，比如 <a href="https://github.com/rollup/rollup-plugin-json" target="_blank" rel="noopener">rollup-plugin-json</a> 可以让 rollup 从 <code>.json</code> 文件中导入 json 数据。</li></ol><p>更多详细的配置，参考 <a href="https://rollupjs.org/guide/en#configuration-files" target="_blank" rel="noopener">rollup.js - configuration-files</a>.</p><h2 id="3-rollup-与-webpack-对比"><a href="#3-rollup-与-webpack-对比" class="headerlink" title="3. rollup 与 webpack 对比"></a>3. rollup 与 webpack 对比</h2><p>先拿段代码来来看看他们打包之后各自是什么效果。</p><p>源代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 目录</span><br><span class="line">|-- src&#x2F;</span><br><span class="line">    |-- index.js</span><br><span class="line">    |-- prefix.js</span><br><span class="line">    |-- suffix.js</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># prefix.js</span><br><span class="line">const prefix &#x3D; &#39;prefix&#39;;</span><br><span class="line"></span><br><span class="line">export default str &#x3D;&gt; &#96;$&#123;prefix&#125; | $&#123;str&#125;&#96;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># suffix.js</span><br><span class="line">const suffix &#x3D; &#39;suffix&#39;;</span><br><span class="line"></span><br><span class="line">export default str &#x3D;&gt; &#96;$&#123;str&#125; | $&#123;suffix&#125;&#96;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># index.js</span><br><span class="line">import prefix from &#39;.&#x2F;prefix&#39;;</span><br><span class="line">import suffix from &#39;.&#x2F;suffix&#39;;</span><br><span class="line"></span><br><span class="line">export default str &#x3D;&gt; suffix(prefix(str));</span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># webpack.config.js</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  entry: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &#39;dist&#x2F;webpack.bundle.js&#39;,</span><br><span class="line">    library: &#39;demo&#39;,</span><br><span class="line">    libraryTarget: &#39;umd&#39;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># rollup.config.js</span><br><span class="line">export default &#123;</span><br><span class="line">  input: &#39;src&#x2F;index.js&#39;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    file: &#39;dist&#x2F;rollup.bundle.js&#39;,</span><br><span class="line">    name: &#39;demo&#39;,</span><br><span class="line">    format: &#39;umd&#39;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># webpack 打包</span><br><span class="line">webpack</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># rollup 打包</span><br><span class="line">rollup -c</span><br></pre></td></tr></table></figure><p>webpack.bundle.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">(function webpackUniversalModuleDefinition(root, factory) &#123;</span><br><span class="line">if(typeof exports &#x3D;&#x3D;&#x3D; &#39;object&#39; &amp;&amp; typeof module &#x3D;&#x3D;&#x3D; &#39;object&#39;)</span><br><span class="line">module.exports &#x3D; factory();</span><br><span class="line">else if(typeof define &#x3D;&#x3D;&#x3D; &#39;function&#39; &amp;&amp; define.amd)</span><br><span class="line">define([], factory);</span><br><span class="line">else if(typeof exports &#x3D;&#x3D;&#x3D; &#39;object&#39;)</span><br><span class="line">exports[&quot;demo&quot;] &#x3D; factory();</span><br><span class="line">else</span><br><span class="line">root[&quot;demo&quot;] &#x3D; factory();</span><br><span class="line">&#125;)(typeof self !&#x3D;&#x3D; &#39;undefined&#39; ? self : this, function() &#123;</span><br><span class="line">return &#x2F;******&#x2F; (function(modules) &#123; &#x2F;&#x2F; webpackBootstrap</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; The module cache</span><br><span class="line">&#x2F;******&#x2F; var installedModules &#x3D; &#123;&#125;;</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; The require function</span><br><span class="line">&#x2F;******&#x2F; function __webpack_require__(moduleId) &#123;</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; Check if module is in cache</span><br><span class="line">&#x2F;******&#x2F; if(installedModules[moduleId]) &#123;</span><br><span class="line">&#x2F;******&#x2F; return installedModules[moduleId].exports;</span><br><span class="line">&#x2F;******&#x2F; &#125;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; Create a new module (and put it into the cache)</span><br><span class="line">&#x2F;******&#x2F; var module &#x3D; installedModules[moduleId] &#x3D; &#123;</span><br><span class="line">&#x2F;******&#x2F; i: moduleId,</span><br><span class="line">&#x2F;******&#x2F; l: false,</span><br><span class="line">&#x2F;******&#x2F; exports: &#123;&#125;</span><br><span class="line">&#x2F;******&#x2F; &#125;;</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; Execute the module function</span><br><span class="line">&#x2F;******&#x2F; modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; Flag the module as loaded</span><br><span class="line">&#x2F;******&#x2F; module.l &#x3D; true;</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; Return the exports of the module</span><br><span class="line">&#x2F;******&#x2F; return module.exports;</span><br><span class="line">&#x2F;******&#x2F; &#125;</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; expose the modules object (__webpack_modules__)</span><br><span class="line">&#x2F;******&#x2F; __webpack_require__.m &#x3D; modules;</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; expose the module cache</span><br><span class="line">&#x2F;******&#x2F; __webpack_require__.c &#x3D; installedModules;</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; define getter function for harmony exports</span><br><span class="line">&#x2F;******&#x2F; __webpack_require__.d &#x3D; function(exports, name, getter) &#123;</span><br><span class="line">&#x2F;******&#x2F; if(!__webpack_require__.o(exports, name)) &#123;</span><br><span class="line">&#x2F;******&#x2F; Object.defineProperty(exports, name, &#123;</span><br><span class="line">&#x2F;******&#x2F; configurable: false,</span><br><span class="line">&#x2F;******&#x2F; enumerable: true,</span><br><span class="line">&#x2F;******&#x2F; get: getter</span><br><span class="line">&#x2F;******&#x2F; &#125;);</span><br><span class="line">&#x2F;******&#x2F; &#125;</span><br><span class="line">&#x2F;******&#x2F; &#125;;</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; getDefaultExport function for compatibility with non-harmony modules</span><br><span class="line">&#x2F;******&#x2F; __webpack_require__.n &#x3D; function(module) &#123;</span><br><span class="line">&#x2F;******&#x2F; var getter &#x3D; module &amp;&amp; module.__esModule ?</span><br><span class="line">&#x2F;******&#x2F; function getDefault() &#123; return module[&#39;default&#39;]; &#125; :</span><br><span class="line">&#x2F;******&#x2F; function getModuleExports() &#123; return module; &#125;;</span><br><span class="line">&#x2F;******&#x2F; __webpack_require__.d(getter, &#39;a&#39;, getter);</span><br><span class="line">&#x2F;******&#x2F; return getter;</span><br><span class="line">&#x2F;******&#x2F; &#125;;</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; Object.prototype.hasOwnProperty.call</span><br><span class="line">&#x2F;******&#x2F; __webpack_require__.o &#x3D; function(object, property) &#123; return Object.prototype.hasOwnProperty.call(object, property); &#125;;</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; __webpack_public_path__</span><br><span class="line">&#x2F;******&#x2F; __webpack_require__.p &#x3D; &quot;&quot;;</span><br><span class="line">&#x2F;******&#x2F;</span><br><span class="line">&#x2F;******&#x2F; &#x2F;&#x2F; Load entry module and return exports</span><br><span class="line">&#x2F;******&#x2F; return __webpack_require__(__webpack_require__.s &#x3D; 0);</span><br><span class="line">&#x2F;******&#x2F; &#125;)</span><br><span class="line">&#x2F;************************************************************************&#x2F;</span><br><span class="line">&#x2F;******&#x2F; ([</span><br><span class="line">&#x2F;* 0 *&#x2F;</span><br><span class="line">&#x2F;***&#x2F; (function(module, __webpack_exports__, __webpack_require__) &#123;</span><br><span class="line"></span><br><span class="line">&quot;use strict&quot;;</span><br><span class="line">Object.defineProperty(__webpack_exports__, &quot;__esModule&quot;, &#123; value: true &#125;);</span><br><span class="line">&#x2F;* harmony import *&#x2F; var __WEBPACK_IMPORTED_MODULE_0__prefix__ &#x3D; __webpack_require__(1);</span><br><span class="line">&#x2F;* harmony import *&#x2F; var __WEBPACK_IMPORTED_MODULE_1__suffix__ &#x3D; __webpack_require__(2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;* harmony default export *&#x2F; __webpack_exports__[&quot;default&quot;] &#x3D; (str &#x3D;&gt; Object(__WEBPACK_IMPORTED_MODULE_1__suffix__[&quot;a&quot; &#x2F;* default *&#x2F;])(Object(__WEBPACK_IMPORTED_MODULE_0__prefix__[&quot;a&quot; &#x2F;* default *&#x2F;])(str)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;***&#x2F; &#125;),</span><br><span class="line">&#x2F;* 1 *&#x2F;</span><br><span class="line">&#x2F;***&#x2F; (function(module, __webpack_exports__, __webpack_require__) &#123;</span><br><span class="line"></span><br><span class="line">&quot;use strict&quot;;</span><br><span class="line">const prefix &#x3D; &#39;prefix&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;* harmony default export *&#x2F; __webpack_exports__[&quot;a&quot;] &#x3D; (str &#x3D;&gt; &#96;$&#123;prefix&#125; | $&#123;str&#125;&#96;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;***&#x2F; &#125;),</span><br><span class="line">&#x2F;* 2 *&#x2F;</span><br><span class="line">&#x2F;***&#x2F; (function(module, __webpack_exports__, __webpack_require__) &#123;</span><br><span class="line"></span><br><span class="line">&quot;use strict&quot;;</span><br><span class="line">const suffix &#x3D; &#39;suffix&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;* harmony default export *&#x2F; __webpack_exports__[&quot;a&quot;] &#x3D; (str &#x3D;&gt; &#96;$&#123;str&#125; | $&#123;suffix&#125;&#96;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;***&#x2F; &#125;)</span><br><span class="line">&#x2F;******&#x2F; ]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>rollup.bundle.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">(function (global, factory) &#123;</span><br><span class="line">typeof exports &#x3D;&#x3D;&#x3D; &#39;object&#39; &amp;&amp; typeof module !&#x3D;&#x3D; &#39;undefined&#39; ? module.exports &#x3D; factory() :</span><br><span class="line">typeof define &#x3D;&#x3D;&#x3D; &#39;function&#39; &amp;&amp; define.amd ? define(factory) :</span><br><span class="line">(global.demo &#x3D; factory());</span><br><span class="line">&#125;(this, (function () &#123; &#39;use strict&#39;;</span><br><span class="line"></span><br><span class="line">const prefix &#x3D; &#39;prefix&#39;;</span><br><span class="line"></span><br><span class="line">var prefix$1 &#x3D; str &#x3D;&gt; &#96;$&#123;prefix&#125; | $&#123;str&#125;&#96;;</span><br><span class="line"></span><br><span class="line">const suffix &#x3D; &#39;suffix&#39;;</span><br><span class="line"></span><br><span class="line">var suffix$1 &#x3D; str &#x3D;&gt; &#96;$&#123;str&#125; | $&#123;suffix&#125;&#96;;</span><br><span class="line"></span><br><span class="line">var index &#x3D; str &#x3D;&gt; suffix$1(prefix$1(str));</span><br><span class="line"></span><br><span class="line">return index;</span><br><span class="line"></span><br><span class="line">&#125;)));</span><br></pre></td></tr></table></figure><p>其实，你也基本上看出来了，在这种场景下，rollup 的优势在哪里：</p><ol><li>文件很小，几乎没什么多余代码，除了必要的 <code>cjs</code>, <code>umd</code> 头外，bundle 代码基本和源码差不多，也没有奇怪的 <code>__webpack_require__</code>, <code>Object.defineProperty</code> 之类的东西；</li><li>执行很快，因为没有 webpack bundle 中的 <code>__webpack_require__</code>, <code>Object.defineProperty</code> 之类的冗余代码；</li><li>另外，rollup 也对 es 模块输出及 iife 格式打包有很好的支持。</li></ol><h2 id="4-结论"><a href="#4-结论" class="headerlink" title="4. 结论"></a>4. 结论</h2><p>rollup 相对 webpack 而言，要小巧、干净利落一些，但不具备 webpack 的一些强大的功能，如热更新，代码分割，公共依赖提取等。</p><p>所以，一个不错的选择是，应用使用 webpack，类库使用 rollup。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://webpack.js.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;webpack&lt;/a&gt; 对前端来说是再熟悉不过的工具了，它提供了强大的功能来构建前端的资源，包括 &lt;code&gt;html/js/ts/css/less/scss ...&lt;/code&gt; 等语言脚本，也包括 &lt;code&gt;images/fonts ...&lt;/code&gt; 等二进制文件。&lt;/p&gt;
&lt;p&gt;其实，webpack 发起之初主要是为了解决以下两个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;代码拆分（Code Splitting）: 可以将应用程序分解成可管理的代码块，可以按需加载，这样用户便可快速与应用交互，而不必等到整个应用程序下载和解析完成才能使用，以此构建复杂的单页应用程序（SPA）；&lt;/li&gt;
&lt;li&gt;静态资源（Static Assets）: 可以将所有的静态资源，如 js、css、图片、字体等，导入到应用程序中，然后由 webpack 使用 hash 重命名需要的资源文件，而无需为文件 URL 增添 hash 而使用 hack 脚本，并且一个资源还能依赖其他资源。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;正是因为 webpack 拥有如此强大的功能，所以 webpack 在进行资源打包的时候，就会产生很多冗余的代码（如果你有查看过 webpack 的 bundle 文件，便会发现）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端进阶" scheme="http://www.barebear.cn/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="前端" scheme="http://www.barebear.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>怎样提升代码质量</title>
    <link href="http://www.barebear.cn/web-advance/code-quality/"/>
    <id>http://www.barebear.cn/web-advance/code-quality/</id>
    <published>2020-02-21T08:41:56.000Z</published>
    <updated>2020-02-21T08:06:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>尽管写了多年的代码，但是始终有一件事不敢确定，就是自己的代码究竟写得好不好？这个问题很难有确切的答案，因为这个跟风格、规范有很大关系，而风格、规范很难说好还是不好。</p><p>但我觉得好的代码，一定是能让别人阅读起来有一种爽心悦目的感觉。</p><a id="more"></a><h2 id="1-开发规范"><a href="#1-开发规范" class="headerlink" title="1. 开发规范"></a>1. 开发规范</h2><p>不管是团队协作还是个人独立开发，遵循一定的开发规范都是很有必要的。就团队协作来说，可能每个人的风格迥然不同，如果没有规范的约束的话，团队之间的协作会大打折扣的。而就个人独立开发来说，很难说一年后的你回头看今天自己写的代码是满意的。</p><h4 id="js-开发规范"><a href="#js-开发规范" class="headerlink" title="js 开发规范"></a><code>js</code> 开发规范</h4><p>一般前端开发的主要工作都要 <code>js</code> 部分，所以一般前端开发规范都是对 <code>js</code> 而言的。</p><p>认可度比较高的有：</p><ul><li><a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener">airbnb js style</a></li><li><a href="https://google.github.io/styleguide/jsguide.html" target="_blank" rel="noopener">google js style</a></li><li><a href="https://github.com/rwaldron/idiomatic.js" target="_blank" rel="noopener">idiomatic js style</a></li><li><a href="https://github.com/standard/standard" target="_blank" rel="noopener">standard js style</a></li></ul><h4 id="css-开发规范"><a href="#css-开发规范" class="headerlink" title="css 开发规范"></a><code>css</code> 开发规范</h4><p>认可度比较高的有：</p><ul><li><a href="https://github.com/airbnb/css" target="_blank" rel="noopener">airbnb css style</a></li><li><a href="https://github.com/necolas/idiomatic-css" target="_blank" rel="noopener">idiomatic css style</a></li></ul><h2 id="2-使用工具检查、自动矫正与优化"><a href="#2-使用工具检查、自动矫正与优化" class="headerlink" title="2. 使用工具检查、自动矫正与优化"></a>2. 使用工具检查、自动矫正与优化</h2><p>尽管有规范可循，但其实开发的时候并不知道自己的代码是否是符合规范的，所以就需要工具来检查与矫正代码。</p><h3 id="2-1-检查与自动矫正"><a href="#2-1-检查与自动矫正" class="headerlink" title="2.1 检查与自动矫正"></a>2.1 检查与自动矫正</h3><p>认可度比较高的有：</p><ol><li><a href="https://github.com/eslint/eslint" target="_blank" rel="noopener">eslint</a>：检查 js 语法（包括 jsx 语法），然后最大程度的矫正不符合规范的代码；</li><li><a href="https://github.com/stylelint/stylelint" target="_blank" rel="noopener">stylelint</a>：检查 css 语法（包括 less, scss 语法），然后最大程度的矫正不符合规范的代码。</li></ol><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p><code>目录文件</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">|-- root&#x2F;                    &#x2F;&#x2F; 项目根目录</span><br><span class="line">    |-- package.json</span><br><span class="line">    |-- .eslintrc            &#x2F;&#x2F; eslint 配置文件</span><br><span class="line">    |-- .eslintignore        &#x2F;&#x2F; eslint 忽略配置，类似 .gitignore</span><br><span class="line">    |-- .stylelintrc         &#x2F;&#x2F; stylelint 配置文件</span><br><span class="line">    |-- .stylelintignore     &#x2F;&#x2F; stylelint 忽略配置，类似 .gitignore</span><br></pre></td></tr></table></figure><p><code>package.json</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;eslint&quot;: &quot;eslint .&quot;,                             &#x2F;&#x2F; 仅检查</span><br><span class="line">  &quot;eslint:fix&quot;: &quot;eslint . --fix&quot;,                   &#x2F;&#x2F; 检查之后自动矫正</span><br><span class="line"></span><br><span class="line">  &quot;stylelint&quot;: &quot;stylelint \&quot;.&#x2F;**&#x2F;*.&#123;css,less,sass,scss&#125;\&quot;&quot;,             &#x2F;&#x2F; 仅检查</span><br><span class="line">  &quot;stylelint:fix&quot;: &quot;stylelint \&quot;.&#x2F;**&#x2F;*.&#123;css,less,sass,scss&#125;\&quot; --fix&quot;    &#x2F;&#x2F; 检查之后自动矫正</span><br><span class="line">&#125;,</span><br><span class="line">&quot;devDependencies&quot;: &#123;</span><br><span class="line">  &quot;eslint&quot;: &quot;^4.19.1&quot;,                              &#x2F;&#x2F; eslint 主文件</span><br><span class="line">  &quot;babel-eslint&quot;: &quot;^8.2.5&quot;,                         &#x2F;&#x2F; babel 转码器 for eslint</span><br><span class="line">  &quot;eslint-config-airbnb&quot;: &quot;^17.0.0&quot;,                &#x2F;&#x2F; airbnb eslint 规则</span><br><span class="line">  &quot;eslint-config-prettier&quot;: &quot;^2.9.0&quot;,               &#x2F;&#x2F; prettier eslint 规则</span><br><span class="line">  &quot;eslint-plugin-babel&quot;: &quot;^5.1.0&quot;,                  &#x2F;&#x2F; eslint 的 babel 转码插件</span><br><span class="line">  &quot;eslint-plugin-import&quot;: &quot;^2.13.0&quot;,                &#x2F;&#x2F; eslint 检查模块输入输出是否正确的插件</span><br><span class="line">  &quot;eslint-plugin-jsx-a11y&quot;: &quot;^6.1.0&quot;,               &#x2F;&#x2F; eslint jsx 语法检查的一个插件</span><br><span class="line">  &quot;eslint-plugin-prettier&quot;: &quot;^2.6.2&quot;,               &#x2F;&#x2F; prettier eslint 插件</span><br><span class="line">  &quot;eslint-plugin-react&quot;: &quot;^7.10.0&quot;,                 &#x2F;&#x2F; eslint react 语法检查插件</span><br><span class="line"></span><br><span class="line">  &quot;stylelint&quot;: &quot;^9.3.0&quot;,                            &#x2F;&#x2F; stylelint 主文件</span><br><span class="line">  &quot;stylelint-config-prettier&quot;: &quot;^3.3.0&quot;,            &#x2F;&#x2F; prettier stylelint 规则</span><br><span class="line">  &quot;stylelint-config-standard&quot;: &quot;^18.2.0&quot;            &#x2F;&#x2F; standard stylelint 规则</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><code>.eslintrc</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;parser&quot;: &quot;babel-eslint&quot;,</span><br><span class="line">  &quot;extends&quot;: [&quot;airbnb&quot;, &quot;prettier&quot;],</span><br><span class="line">  &quot;env&quot;: &#123;</span><br><span class="line">    &quot;browser&quot;: true,</span><br><span class="line">    &quot;node&quot;: true,</span><br><span class="line">    &quot;es6&quot;: true,</span><br><span class="line">    &quot;mocha&quot;: true,</span><br><span class="line">    &quot;jest&quot;: true,</span><br><span class="line">    &quot;jasmine&quot;: true</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;rules&quot;: &#123;</span><br><span class="line">    ... &#x2F;&#x2F; 更多自己定义的规则</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>.stylelintrc</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;extends&quot;: [&quot;stylelint-config-standard&quot;, &quot;stylelint-config-prettier&quot;],</span><br><span class="line">  &quot;rules&quot;: &#123;</span><br><span class="line">    ... &#x2F;&#x2F; 更多自己定义的规则</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行命令"><a href="#运行命令" class="headerlink" title="运行命令"></a>运行命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm run eslint           &#x2F;&#x2F; 检查项目中的 js(jsx) 语法</span><br><span class="line">npm run eslint:fix       &#x2F;&#x2F; 检查项目中的 js(jsx) 语法，并最大程度的矫正</span><br><span class="line"></span><br><span class="line">npm run stylelint        &#x2F;&#x2F; 检查项目中的 css(less,scss) 语法</span><br><span class="line">npm run stylelint:fix    &#x2F;&#x2F; 检查项目中的 css(less,scss) 语法，并最大程度的矫正</span><br></pre></td></tr></table></figure><h3 id="2-2-代码优化"><a href="#2-2-代码优化" class="headerlink" title="2.2 代码优化"></a>2.2 代码优化</h3><p><a href="https://github.com/eslint/eslint" target="_blank" rel="noopener">eslint</a> 与 <a href="https://github.com/stylelint/stylelint" target="_blank" rel="noopener">stylelint</a> 在对代码做检查和自动矫正时，只保证代码的语法是符合一定的规范，并不对代码的格式做任何优化，所以，自动矫正后的代码可能格式会不太好，阅读性不太高。</p><p>所以，一般会在对代码检查与自动矫正之后做代码格式优化。</p><p>使用比较多的：<a href="https://github.com/prettier/prettier" target="_blank" rel="noopener">prettier</a>.</p><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p><code>目录文件</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|-- root&#x2F;                    &#x2F;&#x2F; 项目根目录</span><br><span class="line">    |-- package.json</span><br><span class="line">    |-- .prettierrc          &#x2F;&#x2F; prettier 配置文件</span><br><span class="line">    |-- .prettierignore      &#x2F;&#x2F; prettier 忽略配置，类似 .gitignore</span><br></pre></td></tr></table></figure><p><code>package.json</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &#x2F;&#x2F; 对 js,jsx,css,less,md,json 文件进行优化</span><br><span class="line">  &quot;prettier&quot;: &quot;prettier --write \&quot;.&#x2F;**&#x2F;*.&#123;js,jsx,css,less,md,json&#125;\&quot;&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;devDependencies&quot;: &#123;</span><br><span class="line">  &quot;prettier&quot;: &quot;^1.13.7&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><code>.prettierrc</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;singleQuote&quot;: true,</span><br><span class="line">  &quot;trailingComma&quot;: &quot;es5&quot;,</span><br><span class="line">  &quot;printWidth&quot;: 120,</span><br><span class="line">  &quot;overrides&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;files&quot;: &quot;.prettierrc&quot;,</span><br><span class="line">      &quot;options&quot;: &#123; &quot;parser&quot;: &quot;json&quot; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行命令-1"><a href="#运行命令-1" class="headerlink" title="运行命令"></a>运行命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run prettier</span><br></pre></td></tr></table></figure><h3 id="2-3-强制对代码进行检查、自动矫正与优化"><a href="#2-3-强制对代码进行检查、自动矫正与优化" class="headerlink" title="2.3 强制对代码进行检查、自动矫正与优化"></a>2.3 强制对代码进行检查、自动矫正与优化</h3><p>尽管定好了规范与工具命令，但开发人员完全可以跳过这些步骤，这尤其是在团队开发中很难强制其他组员会去做代码检查、自动矫正与优化。</p><p>所以，使用工具强制开发人员对代码进行检查、自动矫正与优化，就显得很有必要了。</p><p>使用比较多的：</p><ul><li><a href="https://github.com/typicode/husky" target="_blank" rel="noopener">husky</a>：对 git 进行 hook，可以在 git 操作之前做一些操作；</li><li><a href="https://github.com/okonet/lint-staged" target="_blank" rel="noopener">lint-staged</a>：对当前 git 提交的代码进行一些操作。</li></ul><p><code>package.json</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;precommit&quot;: &quot;npm run lint-staged&quot;,     &#x2F;&#x2F; 在 git 提交之前运行 lint-staged 命令</span><br><span class="line">  &quot;lint-staged&quot;: &quot;lint-staged&quot;,           &#x2F;&#x2F; 对 git 将要提交的代码做操作</span><br><span class="line">&#125;,</span><br><span class="line">&quot;devDependencies&quot;: &#123;</span><br><span class="line">  &quot;husky&quot;: &quot;^0.14.3&quot;,</span><br><span class="line">  &quot;lint-staged&quot;: &quot;^7.2.0&quot;,</span><br><span class="line">&#125;,</span><br><span class="line">&quot;lint-staged&quot;: &#123;</span><br><span class="line">  &quot;**&#x2F;*.&#123;js,jsx&#125;&quot;: [</span><br><span class="line">    &quot;eslint --fix&quot;,                      &#x2F;&#x2F; 对 js,jsx 文件进行 eslint 检查、自动矫正</span><br><span class="line">    &quot;prettier --write&quot;,                  &#x2F;&#x2F; 然后 使用 prettier 进行代码格式优化</span><br><span class="line">    &quot;git add&quot;                            &#x2F;&#x2F; 最后重新添加</span><br><span class="line">  ],</span><br><span class="line">  &quot;**&#x2F;*.&#123;css,less&#125;&quot;: [</span><br><span class="line">    &quot;stylelint --fix&quot;,                   &#x2F;&#x2F; 对 css,less 文件进行 stylelint 检查、自动矫正</span><br><span class="line">    &quot;prettier --write&quot;,                  &#x2F;&#x2F; 然后 使用 prettier 进行代码格式优化</span><br><span class="line">    &quot;git add&quot;                            &#x2F;&#x2F; 最后重新添加</span><br><span class="line">  ],</span><br><span class="line">  &quot;**&#x2F;*.&#123;md,json&#125;&quot;: [</span><br><span class="line">    &quot;prettier --write&quot;,                  &#x2F;&#x2F; 使用 prettier 进行代码格式优化</span><br><span class="line">    &quot;git add&quot;                            &#x2F;&#x2F; 最后重新添加</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>这样，在每次 <code>git commit</code> 之前，都会对将要提交的文件进行检查、自动矫正与优化，如果其中有一项发生错误，本次提交都会失败。然后开发人员调整代码之后再进行提交，只有每项任务都是没问题的，才能提交成功。</p><p>这样，便可使每个开发人员都是按照一定的规范与风格写代码的。</p><h2 id="3-编辑器配置：-editorconfig"><a href="#3-编辑器配置：-editorconfig" class="headerlink" title="3. 编辑器配置：.editorconfig"></a>3. 编辑器配置：<code>.editorconfig</code></h2><p>有了规范，也加上了工具做自动化代码检查、矫正与优化，但还有一点需要提及一下，就是在团队协作中，每个开发人员可能使用的编辑器不一样，编辑器的配置也不一样，这就导致工具在做格式优化的时候，不同的开发人员中输出的代码不一样。</p><p>这就需要配置文件 <code>.editorconfig</code> 去统一每个开发人员的编辑器配置。</p><p><code>目录文件</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">|-- root&#x2F;                    &#x2F;&#x2F; 项目根目录</span><br><span class="line">    |-- .editorconfig        &#x2F;&#x2F; 编辑器配置文件</span><br></pre></td></tr></table></figure><p><code>.editorconfig</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># http:&#x2F;&#x2F;editorconfig.org</span><br><span class="line">root &#x3D; true</span><br><span class="line"></span><br><span class="line">[*]</span><br><span class="line">indent_style &#x3D; space                    # 输入的 tab 都用空格代替</span><br><span class="line">indent_size &#x3D; 2                         # 一个 tab 用 2 个空格代替</span><br><span class="line">end_of_line &#x3D; lf                        # 换行符使用 unix 的换行符 \n</span><br><span class="line">charset &#x3D; utf-8                         # 字符编码 utf-8</span><br><span class="line">trim_trailing_whitespace &#x3D; true         # 去掉每行末尾的空格</span><br><span class="line">insert_final_newline &#x3D; true             # 每个文件末尾都加一个空行</span><br><span class="line"></span><br><span class="line">[*.md]</span><br><span class="line">trim_trailing_whitespace &#x3D; false        # .md 文件不去掉每行末尾的空格</span><br></pre></td></tr></table></figure><p>更多的编辑器配置规则，可以查看 <a href="http://editorconfig.org" target="_blank" rel="noopener">http://editorconfig.org</a>.</p><h2 id="4-业务逻辑优化"><a href="#4-业务逻辑优化" class="headerlink" title="4. 业务逻辑优化"></a>4. 业务逻辑优化</h2><p>上面提到的这些只是风格、规范、语法上的优化，但对编码质量的评估更多的是在业务逻辑具体实现这一块。</p><p>一般来说，业务逻辑实现的优化离不开下面几个方向：</p><ol><li>模块化：<ul><li>js 的模块化已经很成熟了，目前使用最多的是 <code>commonjs</code> 模块化规范和 <code>es6</code> 模块；</li><li>css 的模块化也一直在探索中，之前也专门写了一篇 <a href="/10.md">CSS 模块化</a>，可以参考下；</li><li>html 没有模块化，但是可以将一个很长的 html 文件进行分块，参考 <a href="https://github.com/webpack-contrib/html-loader" target="_blank" rel="noopener">html-loader</a>。</li></ul></li><li>组件化：当项目变大、变多，很多公共的代码需要复用或者跨项目使用的时候，组件化就变得很必要了，之前也专门写了一篇 <a href="/6.md">组件化</a>，可以参考下；</li><li>逻辑解耦：把一个复杂的逻辑，分割成多个子逻辑，然后将子逻辑串起来，或者把多个交叉逻辑的公共部分拆出来，然后再挨个串起来；</li><li>功能分块：细化一个一个的功能为单独的模块。</li></ol><h2 id="5-逻辑解耦"><a href="#5-逻辑解耦" class="headerlink" title="5. 逻辑解耦"></a>5. 逻辑解耦</h2><p>逻辑解耦就是把一个复杂的逻辑，分割成多个子逻辑，或者把多个交叉逻辑的公共部分拆成单个逻辑。这样做的目的是降低应用的复杂度，更据阅读性。</p><p>比如，3 个串行的 ajax 请求，可以分割成多个子逻辑：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$.getJSON(url1, data1, res1 &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; do something with res1</span><br><span class="line"></span><br><span class="line">  $.getJSON(url2, data2, res2 &#x3D;&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F; do something with res2</span><br><span class="line"></span><br><span class="line">    $.getJSON(url3, data3, res3 &#x3D;&gt; &#123;</span><br><span class="line">      &#x2F;&#x2F; do something with res3</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>逻辑解耦之后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">const request1 &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  $.getJSON(url1, data1, res1 &#x3D;&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F; do something with res1</span><br><span class="line"></span><br><span class="line">    request2();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">const request2 &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  $.getJSON(url2, data2, res2 &#x3D;&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F; do something with res2</span><br><span class="line"></span><br><span class="line">    request3();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">const request3 &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  $.getJSON(url3, data3, res3 &#x3D;&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F; do something with res3</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">request1();</span><br></pre></td></tr></table></figure><p>再比如，在不同文件中需要依赖同一个 ajax 请求，可以把交叉逻辑的部分拆成单个逻辑：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># file1.js</span><br><span class="line"></span><br><span class="line">$.getJSON(url, data, res &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; do something with res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># file2.js</span><br><span class="line"></span><br><span class="line">$.getJSON(url, data, res &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; do something with res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逻辑解耦之后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># request.js</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; cb &#x3D;&gt; &#123;</span><br><span class="line">  $.getJSON(url, data, res &#x3D;&gt; &#123;</span><br><span class="line">    cb(res);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"># file1.js</span><br><span class="line"></span><br><span class="line">const request &#x3D; require(&#39;.&#x2F;request&#39;);</span><br><span class="line">request(res &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; do something with res</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"># file2.js</span><br><span class="line"></span><br><span class="line">const request &#x3D; require(&#39;.&#x2F;request&#39;);</span><br><span class="line">request(res &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; do something with res</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="6-功能分块"><a href="#6-功能分块" class="headerlink" title="6. 功能分块"></a>6. 功能分块</h2><p>细化功能为单独的模块也是提升代码质量的一个方式。</p><p>比如，将一个文件拆成多个文件（颗粒化）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># util.js</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  func1: args &#x3D;&gt; &#123; ... &#125;,</span><br><span class="line">  func2: args &#x3D;&gt; &#123; ... &#125;,</span><br><span class="line">  func3: args &#x3D;&gt; &#123; ... &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>将功能分块之后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># util&#x2F;func1.js</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; args &#x3D;&gt; &#123; ... &#125;;</span><br><span class="line"></span><br><span class="line"># util&#x2F;func2.js</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; args &#x3D;&gt; &#123; ... &#125;;</span><br><span class="line"></span><br><span class="line"># util&#x2F;func3.js</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; args &#x3D;&gt; &#123; ... &#125;;</span><br></pre></td></tr></table></figure><p>再比如，将一个大功能块分割成多个小功能块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$.getJSON(url, data, res &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; 渲染页面</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 初始化组件</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 装载数据</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 绑定模型</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般这种情况下，一个功能代码块就可能会很长，200 行都有可能，这个时候就需要将其分割成多个小代码块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">const renderPages &#x3D; res &#x3D;&gt; &#123; ... &#125;;</span><br><span class="line">const initComponents &#x3D; res &#x3D;&gt; &#123; ... &#125;;</span><br><span class="line">const fillData &#x3D; res &#x3D;&gt; &#123; ... &#125;;</span><br><span class="line">const bindModels &#x3D; res &#x3D;&gt; &#123; ... &#125;;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$.getJSON(url, data, res &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; 渲染页面</span><br><span class="line">  renderPages();</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 初始化组件</span><br><span class="line">  initComponents();</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 装载数据</span><br><span class="line">  fillData()</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 绑定模型</span><br><span class="line">  bindModels();</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-多阅读"><a href="#7-多阅读" class="headerlink" title="7. 多阅读"></a>7. 多阅读</h2><p>最后，也是最重要的，就是多阅读别人优秀的代码，阅读永远是获取知识最重要的途径，没有之一。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;尽管写了多年的代码，但是始终有一件事不敢确定，就是自己的代码究竟写得好不好？这个问题很难有确切的答案，因为这个跟风格、规范有很大关系，而风格、规范很难说好还是不好。&lt;/p&gt;
&lt;p&gt;但我觉得好的代码，一定是能让别人阅读起来有一种爽心悦目的感觉。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端进阶" scheme="http://www.barebear.cn/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="前端" scheme="http://www.barebear.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>从0开始发布一个无依赖、高质量的 npm 包</title>
    <link href="http://www.barebear.cn/web-advance/npm-package/"/>
    <id>http://www.barebear.cn/web-advance/npm-package/</id>
    <published>2020-02-21T07:40:56.000Z</published>
    <updated>2020-02-21T07:51:51.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>没有发布过npm包的同学，可能会对NPM对开发有一种蜜汁敬畏，觉得这是一个很高大上的东西。甚至有次面试，面试官问我有没有发过npm包，当时只用过还没写过，我想应该挺难的，就小声说了没有，然后就让我回去了o(╯□╰)o。</p><p>其实，在现在的我看来，npm包就是一个我们平时经常写的一个export出来的模块而已，只不过跟其它业务代码耦合性低，具有较高的独立性。</p><p>当然，要发布一个npm包，除了写的模块组件外，还需要做一些基础的包装工作。下面我就以最近开发的「DigitalKeyboard 数字键盘 NPM」 为例，一一列出具体步骤：</p><a id="more"></a><p>1、写基础模块代码；</p><p>2、注册npm账号；</p><p>3、配置package.json；</p><p>4、配置webpack；</p><p>5、添加单元测试；</p><p>6、完善README.md；</p><p>7、发布</p><p>1、2、3足可以完成一个npm，4、5、6是为了开发一个高质量的npm。</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>具体代码移步github（<a href="https://github.com/simbawus/DigitalKeyboard），请反手" target="_blank" rel="noopener">https://github.com/simbawus/DigitalKeyboard），请反手</a> 给个 ★ Star ^_~。完整目录结构如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">├── LICENSE</span><br><span class="line">├── README.md</span><br><span class="line">├── build</span><br><span class="line">│   └── Keyboard.js</span><br><span class="line">├── config</span><br><span class="line">│   └── webpack</span><br><span class="line">│       ├── webpack.base.config.js</span><br><span class="line">│       ├── webpack.config.js</span><br><span class="line">│       ├── webpack.dev.config.js</span><br><span class="line">│       └── webpack.prod.config.js</span><br><span class="line">├── index.html</span><br><span class="line">├── package.json</span><br><span class="line">├── src</span><br><span class="line">│   ├── Keyboard.js</span><br><span class="line">│   ├── Keyboard.scss</span><br><span class="line">│   └── main.js</span><br><span class="line">├── <span class="built_in">test</span></span><br><span class="line">│   └── Keyboard.test.js</span><br><span class="line">└── yarn.lock</span><br></pre></td></tr></table></figure><h3 id="基础模块代码"><a href="#基础模块代码" class="headerlink" title="基础模块代码"></a>基础模块代码</h3><p>现在只需要看src目录下的三个文件。其中，main.js 主要是对将要开发模块的引用，只需存在于开发阶段，同时作为此阶段webpack的入口文件，核心代码在Keyboard.js。</p><p>这里，主要用的是ES6的class和export default，Keyboard的核心思想就是点击哪个键就对外输出什么内容，实现也比较简单，大家都能看得懂，这里就不展开讲了，具体可以看github 源码。</p><h3 id="注册npm账号"><a href="#注册npm账号" class="headerlink" title="注册npm账号"></a>注册npm账号</h3><p>这一步也不用说，大家直接去官网注册就好了。</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>配置package.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"digital-keyboard"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"build/Keyboard.js"</span>,</span><br><span class="line">  <span class="attr">"repository"</span>: <span class="string">"https://github.com/simbawus/DigitalKeyboard.git"</span>,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"simbawu &lt;connect@simbawu.com&gt;"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"DigitalKeyboard Component"</span>,</span><br><span class="line">  <span class="attr">"keywords"</span>: [</span><br><span class="line">    <span class="string">"DigitalKeyboard"</span>,</span><br><span class="line">    <span class="string">"Digital"</span>,</span><br><span class="line">    <span class="string">"Keyboard"</span>,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时的配置文件也比较简单，只需配置npm包名，准备用的名字现在npm搜索一下，已经存在的就不能用了；版本号version，每次发布版本号都需要更新，不然发布不成功；对外<code>export</code>的文件路径，这里我用的是webpack打包后的文件，如果不用webpack，直接引用src/Keyboard.js也可以，只不过要做模块化方式兼容，这个后面说。也可以放上项目所在github地址及作者名，description和keywords比较利于SEO，不过这些都不是必需项。</p><p>到这里，一个npm包就开发完成了，直接发布即可使用。但是，略显粗糙：代码压缩、单元测试、readme都没写，别人不知道怎么用也不敢用。下面一步步完善。</p><p>配置webpack</p><p>这里用的是最新版的webpack4，官方提供production和development两种开发模式，并分别做了默认压缩处理，非常适合这里。有两点要特别说明下：</p><ul><li><p><strong>libraryTarget: ‘umd’</strong></p><p>  umd有的同学可能不是太熟悉，但是cmd、amd大家应该都知道，分别应用于服务端和浏览器端的模块方案。umd就是前面提到的模块化方式兼容。感兴趣可以参考我的另一篇文章JavaScript Module 设计解析及总结。</p></li><li><p><strong>production和development的entry不一样：</strong></p><p>  development的entry是main.js，而production的entry是Keyboard.js。前面说过，开发阶段需要有对模块的引用，但是正式发布就不需要了，所以要分别配置。</p></li></ul><p>其他就不展开讲了，我的webpack配置结构很清晰，欢迎大家直接copy。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">├── webpack.base.config.js</span><br><span class="line">├── webpack.config.js</span><br><span class="line">├── webpack.dev.config.js</span><br><span class="line">└── webpack.prod.config.js</span><br></pre></td></tr></table></figure><h3 id="添加单元测试"><a href="#添加单元测试" class="headerlink" title="添加单元测试"></a>添加单元测试</h3><p>大家经常看到很多不错的项目都有<img src="https://tva1.sinaimg.cn/large/0082zybply1gc41ykp6mwj304o00uq2u.jpg" alt="图片替换文本" width="87" style="margin:0;display:inline-block !important;"/>，这就像一个证明可用性的证书，给人安全感和信任感，所以添加单元测试，还是很有必要的，同时也可以提高代码质量。先介绍需要用到的几个概念：</p><ul><li><p>mocha：测试框架；</p></li><li><p>chai：断言库，断言通俗来讲就是判断代码结果对不对；</p></li><li><p>jsdom：node端是没有js dom对象的，比如window、document等等，所以需要这个库提供；</p></li><li><p>istanbul：代码覆盖率计算工具；</p></li><li><p>coveralls：统计上面的代码测试覆盖率工具；</p></li><li><p>travis-ci：自动集成，比如master代码push到github上之后，travis-ci就会自动进行自动化测试。</p></li></ul><p>这里介绍下jsdom的用法，当时按照几个文档来都跑不通：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;JSDOM&#125; = <span class="built_in">require</span>(<span class="string">'jsdom'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;<span class="built_in">window</span>&#125; = <span class="keyword">new</span> JSDOM(<span class="string">`&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">  &lt;html&gt;</span></span><br><span class="line"><span class="string">  &lt;head&gt;</span></span><br><span class="line"><span class="string">      &lt;meta charset="UTF-8"&gt;</span></span><br><span class="line"><span class="string">      &lt;meta name="viewport" content="width=device-width,initial-scale=1.0,minimum-scale=1.0, maximum-scale=1.0,user-scalable=no"&gt;</span></span><br><span class="line"><span class="string">      &lt;meta name="author" content="吴胜斌,simbawu"&gt;</span></span><br><span class="line"><span class="string">      &lt;title&gt;数字键盘&lt;/title&gt;</span></span><br><span class="line"><span class="string">  &lt;/head&gt;</span></span><br><span class="line"><span class="string">  &lt;body&gt;</span></span><br><span class="line"><span class="string">  &lt;div id="values"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;div id="app"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;/body&gt;</span></span><br><span class="line"><span class="string">  &lt;/html&gt;`</span>);</span><br><span class="line"></span><br><span class="line">propagateToGlobal(<span class="built_in">window</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">propagateToGlobal</span>(<span class="params">window</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">window</span>.hasOwnProperty(key)) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">if</span> (key <span class="keyword">in</span> global) <span class="keyword">continue</span>;</span><br><span class="line">    global[key] = <span class="built_in">window</span>[key];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先引入jsdom，然后构造一个document，并引入其中的window对象然后一一赋值给node的global对象。其实也很简单，只不过第一次接触，而且找的文档写的也不清楚，所以花了点时间。其他几个文档都还不错，可以看看文档再看看我是怎么用的。此时的package.json就很很丰富了，可以执行yarn test和yarn cover看看测试是否通过及测试覆盖率。</p><h3 id="完善README-md"><a href="#完善README-md" class="headerlink" title="完善README.md"></a>完善README.md</h3><p>一个好的readme是决定用户用不用你项目的关键因素，所以要多花点心思，千万不能忽略。</p><ul><li><p>标题：直观的描述这个项目是干什么的。</p></li><li><p>徽章：<br>  分别表示是否构建成功、代码测试覆盖率、npm版本号、下载量、开源证书，看起来逼格满满有木有。推荐去shields io 添加，生成一次，之后会自动更新，不过需要等npm发布后才能搜到。<br>   <img src="https://tva1.sinaimg.cn/large/0082zybply1gc41yzgw8vj305m06kaac.jpg" alt=""></p></li></ul><ul><li><p>配图：要让用户直观的看到这个组件长什么样，是否满足他的需求。</p></li><li><p>API介绍：不能让用户猜。</p></li><li><p>使用示例：尽量降低使用门槛。</p></li></ul><h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#先登录NPM账号：</span></span><br><span class="line">npm login</span><br><span class="line"></span><br><span class="line"><span class="comment">#会依次让你输入用户名、密码、和邮箱</span></span><br><span class="line">Username: simbawu        </span><br><span class="line">Password:</span><br><span class="line">Email: (this IS public) wsbin610@163.com</span><br><span class="line"></span><br><span class="line"><span class="comment">#登录成功会出现以下提示信息：</span></span><br><span class="line">Logged <span class="keyword">in</span> as simbawu on https://registry.npmjs.org/.</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行发布命令：</span></span><br><span class="line">npm publish</span><br><span class="line"></span><br><span class="line"><span class="comment">#发布成功后会出现以下提示信息：</span></span><br><span class="line">+ digital-keyboard@1.0.0</span><br><span class="line"><span class="comment">#这里digital-keyboard是我的NPM包名，1.0.0是包的版本号</span></span><br></pre></td></tr></table></figure><p>接下来，我们可以在npm官网，通过搜索包名或者在个人中心看到刚刚发布的包。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;没有发布过npm包的同学，可能会对NPM对开发有一种蜜汁敬畏，觉得这是一个很高大上的东西。甚至有次面试，面试官问我有没有发过npm包，当时只用过还没写过，我想应该挺难的，就小声说了没有，然后就让我回去了o(╯□╰)o。&lt;/p&gt;
&lt;p&gt;其实，在现在的我看来，npm包就是一个我们平时经常写的一个export出来的模块而已，只不过跟其它业务代码耦合性低，具有较高的独立性。&lt;/p&gt;
&lt;p&gt;当然，要发布一个npm包，除了写的模块组件外，还需要做一些基础的包装工作。下面我就以最近开发的「DigitalKeyboard 数字键盘 NPM」 为例，一一列出具体步骤：&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端进阶" scheme="http://www.barebear.cn/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="前端" scheme="http://www.barebear.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="npm" scheme="http://www.barebear.cn/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>组件化</title>
    <link href="http://www.barebear.cn/web-advance/component/"/>
    <id>http://www.barebear.cn/web-advance/component/</id>
    <published>2020-02-20T13:41:56.000Z</published>
    <updated>2020-02-20T14:03:31.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前端组件化是这几年老生常谈的话题，笔者就不在这里对前端组件化思想的发展史、优劣做详细的介绍。在开发中我们经常会遇到，从初期的小项目，到后期的项目功能迭代，功能模块越来越多，项目越来越大。组件化规范制定不够完善，多人团队协作开发组件耦合度高、复用性低、代码冗余严重，导致项目维护成本越来越高。在此写下笔者自己处理上述问题的思考。</p></blockquote><a id="more"></a><h2 id="发现、提出问题"><a href="#发现、提出问题" class="headerlink" title="发现、提出问题"></a>发现、提出问题</h2><p>第 1 版：组件单向数据流，父组件状态单向传向子组件。<br><img src="https://tva1.sinaimg.cn/large/0082zybply1gc3773ehg4g30fa08ctdo.gif" alt=""></p><p>第 2 版：随着功能迭代，非父子组件会共享一些状态。此处由于非父子组件间状态共享不复杂，优先使用状态提升（状态提升，我们需要把子组件间共享的状态，提升到容器组件进行管理，并由容器组件下发到子组件）解决此类问题</p><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc377b59rhg30fa091won.gif" alt=""></p><p>第 3 版：随着更多的功能迭代，模块分层越来越多，跨多层组件状态共享越来越复杂。</p><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc377ihfgtg30fa0d71ky.gif" alt=""><br>第 4 版：状态管理 redux、vuex 就是为了解决此类问题而出现。<br><img src="https://tva1.sinaimg.cn/large/0082zybply1gc377px80dg30hs0c21kz.gif" alt=""></p><p>通过以上的项目模块迭代周期的发现，不可避免的会出现多组件状态共享的情况。通常处理共享状态有三种方式：</p><ul><li>状态提升，我们需要把子组件间共享的状态，提升到容器组件进行管理，并由容器组件下发到子组件。</li><li>状态管理 redux、vuex。</li><li>事件机制，子组件改变共享的状态，通过事件管理模块 emit 分发出去，需要同步更改状态的子组件通过 on 接收更改事件。</li></ul><p>上述的三种方式会存在哪些问题？</p><ul><li>组件哪些状态需要提取到状态管理？</li><li>如何避免滥用全局状态导致项目混乱？</li><li>容器组件、展示组件如何划分？</li><li>多人协作开发组件规范、风格不统一，组件间共享状态双向修改规则不统一，新人加入学习成本高。</li></ul><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>笔者认为解决问题的方法，就是制定相应规范，保证团队代码规范风格统一。</p><ul><li>容器组件与展示组件开发规范。</li><li>哪些组件状态应该提取到状态管理，状态管理开发规范。</li></ul><p>请看下图：<br><img src="https://tva1.sinaimg.cn/large/0082zybply1gc37asmd3bj30u00eodh4.jpg" alt=""></p><p><code>容器型组件</code>：主要是获取、更新、提交、删除内含展示组件状态数据，不包含任何 DOM 更新。</p><p><code>展示型组件</code>：展示型组件主要表现为组件是怎样渲染的，包含了 Virtual DOM 的修改或组合，也包含组件的样式，同时不依赖任何形式的 store。一般可以写成无状态函数，但实际上由于很多展示型组件里依然存在生命周期方法，所以不一定都是无状态的组件。</p><p>说明：</p><ul><li><p>项目初期版本，只有一个容器组件 A，容器 A 包含三个展示组件 A1、A2、A3，所有共享状态都有容器A管理。</p></li><li><p>随着项目迭代，容器组件 A 会分裂出两个新模块容器组件 B、C。</p></li><li><p>容器组件 B、C 分别包含展示组件 B1、B2，C1、C2，且 B、C 之间存在共享状态。</p></li><li><p>容器组件间共享状态数据，统一由状态管理 store 管理。<br>规范：</p></li><li><p>展示组件必须在容器组件中使用，除了独有的状态，其他共享状态统一由容器组件管理。</p></li><li><p>展示组件涉及修改共享状态的操作，例如点击事件，需要把点击事件通过无状态回调函数抛到容器组件，由容器组件统一做状态获取、更新、提交、删除等等操作。</p></li><li><p>父子容器组件共享状态，子容器只能读取父容器组件共享状态，不能进行修改（例如子容器只能通过无状态回调函数抛到父容器），保证单向数据流。</p></li><li><p>子容器修改父容器或者修改非父子容器共享状态唯一途径，通过状态管理 store 统一修改。</p></li><li><p>由于容器间共享状态不能双向修改，所以状态管理 store 会保存大量的共享状态数据，需要通过系统模块、容器组件名分层注册需要状态共享的容器组件 state。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前端组件化是这几年老生常谈的话题，笔者就不在这里对前端组件化思想的发展史、优劣做详细的介绍。在开发中我们经常会遇到，从初期的小项目，到后期的项目功能迭代，功能模块越来越多，项目越来越大。组件化规范制定不够完善，多人团队协作开发组件耦合度高、复用性低、代码冗余严重，导致项目维护成本越来越高。在此写下笔者自己处理上述问题的思考。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="前端进阶" scheme="http://www.barebear.cn/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="前端" scheme="http://www.barebear.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>搭建自己的前端脚手架</title>
    <link href="http://www.barebear.cn/web-advance/starter/"/>
    <id>http://www.barebear.cn/web-advance/starter/</id>
    <published>2020-02-20T12:45:56.000Z</published>
    <updated>2020-02-21T09:00:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>一般新开发一个项目时，我们会首先搭建好一个脚手架，然后才会开始写代码。搭建脚手架可以用 <a href="https://github.com/facebook/create-react-app" target="_blank" rel="noopener">create-react-app</a>、<a href="https://github.com/vuejs/vue-cli" target="_blank" rel="noopener">vue-cli</a>、<a href="http://yeoman.io/" target="_blank" rel="noopener">yeoman</a> 等命令行工具，也可以直接用 <a href="https://github.com/h5bp/html5-boilerplate" target="_blank" rel="noopener">html5-boilerplate</a>、<a href="https://github.com/react-boilerplate/react-boilerplate" target="_blank" rel="noopener">react-boilerplate</a>、<a href="https://github.com/sahat/hackathon-starter" target="_blank" rel="noopener">hackathon-starter</a> 等模板，如果这些都不能满足你的个性化需求，可以尝试搭建自己的前端脚手架。</p><p>一般来说，脚手架包括目录结构定义、必要的项目配置文件与工具配置文件、工具与命令。</p><p>一个基本的脚手架：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">|-- &#x2F;                              项目根目录</span><br><span class="line">    |-- src&#x2F;                       源代码目录</span><br><span class="line">    |-- package.json               npm 项目文件</span><br><span class="line">    |-- README.md                  项目说明文件</span><br><span class="line">    |-- CHANGELOG.md               版本更新记录</span><br><span class="line">    |-- .gitignore                 git 忽略配置文件</span><br><span class="line">    |-- .editorconfig              编辑器配置文件</span><br><span class="line">    |-- .npmrc                     npm 配置文件</span><br><span class="line">    |-- .npmignore                 npm 忽略配置文件</span><br><span class="line">    |-- .eslintrc                  eslint 配置文件</span><br><span class="line">    |-- .eslintignore              eslint 忽略配置文件</span><br><span class="line">    |-- .stylelintrc               stylelint 配置文件</span><br><span class="line">    |-- .stylelintignore           stylelint 忽略配置文件</span><br><span class="line">    |-- .prettierrc                prettier 配置文件</span><br><span class="line">    |-- .prettierignore            prettier 忽略配置文件</span><br><span class="line"></span><br><span class="line">    |-- .babelrc                   babel 配置文件</span><br><span class="line">    |-- webpack.config.js          webpack 配置文件</span><br><span class="line">    |-- rollup.config.js           rollup 配置文件</span><br><span class="line">    |-- gulpfile.js                gulp 配置文件</span><br></pre></td></tr></table></figure><a id="more"></a><p>一些扩展的脚手架：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">|-- &#x2F;                              项目根目录</span><br><span class="line">    |-- bin&#x2F;                       bin 目录</span><br><span class="line">    |-- test&#x2F;                      测试目录</span><br><span class="line">    |-- docs&#x2F;                      文档目录</span><br><span class="line">    |-- jest.config.js             jest 配置文件</span><br><span class="line">    |-- .gitattributes             git 属性配置</span><br><span class="line">    |-- .travis.yml                travis 配置文件</span><br><span class="line">    |-- appveyor.yml               appveyor 配置文件</span><br></pre></td></tr></table></figure><h2 id="1-package-json-npm-项目文件"><a href="#1-package-json-npm-项目文件" class="headerlink" title="1. package.json: npm 项目文件"></a>1. <code>package.json</code>: npm 项目文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;name&quot;,                  项目名字</span><br><span class="line">  &quot;version&quot;: &quot;0.0.1&quot;,              版本</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,              入口文件</span><br><span class="line">  &quot;bin&quot;: &quot;bin&#x2F;bin.js&quot;,             bin 文件</span><br><span class="line">  &quot;description&quot;: &quot;description&quot;,    描述</span><br><span class="line">  &quot;repository&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;git&quot;,</span><br><span class="line">    &quot;url&quot;: &quot;url&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;keywords&quot;: [],</span><br><span class="line">  &quot;homepage&quot;: &quot;homepage&quot;,          主页</span><br><span class="line">  &quot;readmeFilename&quot;: &quot;README.md&quot;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;             工具依赖</span><br><span class="line">    &quot;babel-eslint&quot;: &quot;^8.2.6&quot;,</span><br><span class="line">    &quot;eslint&quot;: &quot;^4.19.1&quot;,</span><br><span class="line">    &quot;husky&quot;: &quot;^0.14.3&quot;,</span><br><span class="line">    &quot;lint-staged&quot;: &quot;^7.2.0&quot;,</span><br><span class="line">    &quot;prettier&quot;: &quot;^1.14.0&quot;,</span><br><span class="line">    &quot;stylelint&quot;: &quot;^9.3.0&quot;,</span><br><span class="line">    &quot;eslint-config-airbnb&quot;: &quot;^17.0.0&quot;,</span><br><span class="line">    &quot;eslint-config-prettier&quot;: &quot;^2.9.0&quot;,</span><br><span class="line">    &quot;eslint-plugin-babel&quot;: &quot;^5.1.0&quot;,</span><br><span class="line">    &quot;eslint-plugin-import&quot;: &quot;^2.13.0&quot;,</span><br><span class="line">    &quot;eslint-plugin-jsx-a11y&quot;: &quot;^6.1.0&quot;,</span><br><span class="line">    &quot;eslint-plugin-prettier&quot;: &quot;^2.6.2&quot;,</span><br><span class="line">    &quot;eslint-plugin-react&quot;: &quot;^7.10.0&quot;,</span><br><span class="line">    &quot;stylelint-config-prettier&quot;: &quot;^3.3.0&quot;,</span><br><span class="line">    &quot;stylelint-config-standard&quot;: &quot;^18.2.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;scripts&quot;: &#123;                     可以添加更多命令</span><br><span class="line">    &quot;precommit&quot;: &quot;npm run lint-staged&quot;,</span><br><span class="line">    &quot;prettier&quot;: &quot;prettier --write \&quot;.&#x2F;**&#x2F;*.&#123;js,jsx,css,less,md,json&#125;\&quot;&quot;,</span><br><span class="line">    &quot;eslint&quot;: &quot;eslint .&quot;,</span><br><span class="line">    &quot;eslint:fix&quot;: &quot;eslint . --fix&quot;,</span><br><span class="line">    &quot;stylelint&quot;: &quot;stylelint \&quot;.&#x2F;**&#x2F;*.&#123;css,less&#125;\&quot;&quot;,</span><br><span class="line">    &quot;stylelint:fix&quot;: &quot;stylelint \&quot;.&#x2F;**&#x2F;*.&#123;css,less&#125;\&quot; --fix&quot;,</span><br><span class="line">    &quot;lint-staged&quot;: &quot;lint-staged&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;lint-staged&quot;: &#123;                 对提交的代码进行检查与矫正</span><br><span class="line">    &quot;**&#x2F;*.&#123;js,jsx&#125;&quot;: [</span><br><span class="line">      &quot;eslint --fix&quot;,</span><br><span class="line">      &quot;prettier --write&quot;,</span><br><span class="line">      &quot;git add&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;**&#x2F;*.&#123;css,less&#125;&quot;: [</span><br><span class="line">      &quot;stylelint --fix&quot;,</span><br><span class="line">      &quot;prettier --write&quot;,</span><br><span class="line">      &quot;git add&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;**&#x2F;*.&#123;md,json&#125;&quot;: [</span><br><span class="line">      &quot;prettier --write&quot;,</span><br><span class="line">      &quot;git add&quot;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;engines&quot;: &#123;                     运行时对 node 版本的要求</span><br><span class="line">    &quot;node&quot;: &quot;&gt;&#x3D;8.0.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;&#125;               开发依赖</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-main-项目入口文件"><a href="#1-1-main-项目入口文件" class="headerlink" title="1.1 main: 项目入口文件"></a>1.1 <code>main</code>: 项目入口文件</h3><p>如果你将当前的项目发布为一个 npm 包，而其他的包在引用你的包时，构建工具就会去找 <code>main</code> 字段定义的入口文件，详细参考 <a href="https://docs.npmjs.com/files/package.json#main" target="_blank" rel="noopener">package.json#main</a>。</p><p>还有其他的特殊的入口文件，参考 <a href="../web-extend/3.md">package.json 非官方字段集合</a>。</p><h3 id="1-2-bin-配置命令行可执行文件"><a href="#1-2-bin-配置命令行可执行文件" class="headerlink" title="1.2 bin: 配置命令行可执行文件"></a>1.2 <code>bin</code>: 配置命令行可执行文件</h3><p>如果你需要将当前的项目安装成一个全局的命令，那么就需要指定这个字段。</p><p>详细信息参考 <a href="https://docs.npmjs.com/files/package.json#bin" target="_blank" rel="noopener">package.json#bin</a>。</p><h3 id="1-3-scripts-配置项目命令"><a href="#1-3-scripts-配置项目命令" class="headerlink" title="1.3 scripts: 配置项目命令"></a>1.3 <code>scripts</code>: 配置项目命令</h3><p>这里定义的命令可以用 <code>npm run</code> 来调用。比如上面定义的几个命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm run prettier</span><br><span class="line">npm run eslint</span><br><span class="line">npm run eslint:fix</span><br><span class="line">npm run stylelint</span><br><span class="line">npm run stylelint:fix</span><br></pre></td></tr></table></figure><p>一般来说，还可能定义如下的一些命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;test&quot;: &quot;&quot;,                      测试</span><br><span class="line">  &quot;build&quot;: &quot;&quot;,                     构建</span><br><span class="line">  &quot;dev&quot;: &quot;&quot;,                       开发</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-README-md-项目说明文件"><a href="#2-README-md-项目说明文件" class="headerlink" title="2. README.md: 项目说明文件"></a>2. <code>README.md</code>: 项目说明文件</h2><p>项目说明的入口文件，包括文档。一般 git 项目 web 端首页显示的就是这个文件的内容，包括 <a href="https://github.com" target="_blank" rel="noopener">github</a>、<a href="https://bitbucket.org/" target="_blank" rel="noopener">bitbucket</a>、<a href="https://gitlab.com/" target="_blank" rel="noopener">gitlab</a>。</p><p>文件格式是 <a href="https://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">markdown</a>，具体介绍与语法可以参考 <a href="https://www.markdownguide.org/" target="_blank" rel="noopener">https://www.markdownguide.org/</a>。</p><h2 id="3-CHANGELOG-md-版本更新记录"><a href="#3-CHANGELOG-md-版本更新记录" class="headerlink" title="3. CHANGELOG.md: 版本更新记录"></a>3. <code>CHANGELOG.md</code>: 版本更新记录</h2><p>一般项目都会有这个文件，用于记录版本更新及相应的功能变化，比如 <a href="https://github.com/facebook/react/blob/master/CHANGELOG.md" target="_blank" rel="noopener">react 的 CHANGELOG</a>。</p><p>文件格式也是 <code>markdown</code>。</p><h2 id="4-gitignore-git-忽略配置文件"><a href="#4-gitignore-git-忽略配置文件" class="headerlink" title="4. .gitignore: git 忽略配置文件"></a>4. <code>.gitignore</code>: git 忽略配置文件</h2><p>用于指定哪些文件或目录不需要进行 git 版本控制。</p><p>比如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.DS_STORE</span><br><span class="line">node_modules</span><br><span class="line">build&#x2F;</span><br><span class="line">*.log*</span><br><span class="line">.idea</span><br><span class="line">.vscode</span><br></pre></td></tr></table></figure><p>详细信息参考 <a href="https://git-scm.com/docs/gitignore" target="_blank" rel="noopener">https://git-scm.com/docs/gitignore</a>。</p><h2 id="5-editorconfig-编辑器配置文件"><a href="#5-editorconfig-编辑器配置文件" class="headerlink" title="5. .editorconfig: 编辑器配置文件"></a>5. <code>.editorconfig</code>: 编辑器配置文件</h2><p>用于指定编辑器特定的配置。比如，不同的编辑器对 <code>tab</code> 的定义不一样，可能是 2 个空格，也可能是 4 个或者 8 个，所以就需要用这个文件来统一配置编辑器。</p><p>比如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># http:&#x2F;&#x2F;editorconfig.org</span><br><span class="line">root &#x3D; true</span><br><span class="line"></span><br><span class="line">[*]</span><br><span class="line">indent_style &#x3D; space</span><br><span class="line">indent_size &#x3D; 2</span><br><span class="line">end_of_line &#x3D; lf</span><br><span class="line">charset &#x3D; utf-8</span><br><span class="line">trim_trailing_whitespace &#x3D; true</span><br><span class="line">insert_final_newline &#x3D; true</span><br><span class="line"></span><br><span class="line">[*.md]</span><br><span class="line">trim_trailing_whitespace &#x3D; false</span><br></pre></td></tr></table></figure><p>详细信息参考 <a href="http://editorconfig.org" target="_blank" rel="noopener">http://editorconfig.org</a>。</p><h2 id="6-npmrc-npm-配置文件"><a href="#6-npmrc-npm-配置文件" class="headerlink" title="6. .npmrc: npm 配置文件"></a>6. <code>.npmrc</code>: npm 配置文件</h2><p>比如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">package-lock&#x3D;false</span><br></pre></td></tr></table></figure><p>详细信息参考 <a href="https://www.npmjs.com.cn/files/npmrc/" target="_blank" rel="noopener">https://www.npmjs.com.cn/files/npmrc/</a>。</p><h2 id="7-npmignore-npm-忽略配置文件"><a href="#7-npmignore-npm-忽略配置文件" class="headerlink" title="7. .npmignore: npm 忽略配置文件"></a>7. <code>.npmignore</code>: npm 忽略配置文件</h2><p>详细信息参考 <a href="https://docs.npmjs.com/misc/developers#keeping-files-out-of-your-package" target="_blank" rel="noopener">keeping-files-out-of-your-package</a>。</p><h2 id="8-eslintrc-eslintignore-eslint-相关配置文件"><a href="#8-eslintrc-eslintignore-eslint-相关配置文件" class="headerlink" title="8. .eslintrc, .eslintignore: eslint 相关配置文件"></a>8. <code>.eslintrc, .eslintignore</code>: eslint 相关配置文件</h2><p>用于 <code>js, jsx</code> 代码检查与矫正，让你编写的代码符合特定的规范与风格。</p><p>详细信息参考 <a href="https://eslint.org/" target="_blank" rel="noopener">https://eslint.org/</a>。</p><h2 id="9-stylelintrc-stylelintignore-stylelint-相关配置文件"><a href="#9-stylelintrc-stylelintignore-stylelint-相关配置文件" class="headerlink" title="9. .stylelintrc, .stylelintignore: stylelint 相关配置文件"></a>9. <code>.stylelintrc, .stylelintignore</code>: stylelint 相关配置文件</h2><p>用于 <code>css, less, scss</code> 代码检查与矫正，让你编写的代码符合特定的规范与风格。</p><p>详细信息参考 <a href="https://stylelint.io/" target="_blank" rel="noopener">https://stylelint.io/</a>。</p><h2 id="10-prettierrc-prettierignore-prettier-相关配置文件"><a href="#10-prettierrc-prettierignore-prettier-相关配置文件" class="headerlink" title="10. .prettierrc, .prettierignore: prettier 相关配置文件"></a>10. <code>.prettierrc, .prettierignore</code>: prettier 相关配置文件</h2><p>优化 <code>js, jsx, css, less, scss, md, json</code> 等文件的格式。</p><p>详细信息参考 <a href="https://prettier.io/" target="_blank" rel="noopener">https://prettier.io/</a>。</p><h2 id="11-babelrc-babel-配置文件"><a href="#11-babelrc-babel-配置文件" class="headerlink" title="11. .babelrc: babel 配置文件"></a>11. <code>.babelrc</code>: babel 配置文件</h2><p><code>es6 -&gt; es5</code> 转码。</p><p>详细信息参考 <a href="https://babeljs.io/" target="_blank" rel="noopener">https://babeljs.io/</a>。</p><h2 id="12-webpack-config-js-webpack-配置文件"><a href="#12-webpack-config-js-webpack-配置文件" class="headerlink" title="12. webpack.config.js: webpack 配置文件"></a>12. <code>webpack.config.js</code>: webpack 配置文件</h2><p>前端打包工具。</p><p>详细信息参考 <a href="https://webpack.js.org/" target="_blank" rel="noopener">https://webpack.js.org/</a>。</p><h2 id="13-rollup-config-js-rollup-配置文件"><a href="#13-rollup-config-js-rollup-配置文件" class="headerlink" title="13. rollup.config.js: rollup 配置文件"></a>13. <code>rollup.config.js</code>: rollup 配置文件</h2><p>另一个前端打包工具。</p><p>详细信息参考 <a href="https://rollupjs.org/" target="_blank" rel="noopener">https://rollupjs.org/</a>。</p><h2 id="14-gulpfile-js-gulp-配置文件"><a href="#14-gulpfile-js-gulp-配置文件" class="headerlink" title="14. gulpfile.js: gulp 配置文件"></a>14. <code>gulpfile.js</code>: gulp 配置文件</h2><p>前端文件流操作构建工具。</p><p>详细信息参考 <a href="https://www.gulpjs.com/" target="_blank" rel="noopener">https://www.gulpjs.com/</a>。</p><h2 id="15-jest-config-js-jest-配置文件"><a href="#15-jest-config-js-jest-配置文件" class="headerlink" title="15. jest.config.js: jest 配置文件"></a>15. <code>jest.config.js</code>: jest 配置文件</h2><p>前端测试组件。</p><p>详细信息参考 <a href="https://jestjs.io/" target="_blank" rel="noopener">https://jestjs.io/</a>。</p><h2 id="16-gitattributes-git-属性配置"><a href="#16-gitattributes-git-属性配置" class="headerlink" title="16. .gitattributes: git 属性配置"></a>16. <code>.gitattributes</code>: git 属性配置</h2><p>详细信息参考 <a href="https://git-scm.com/docs/gitattributes" target="_blank" rel="noopener">https://git-scm.com/docs/gitattributes</a>。</p><h2 id="17-travis-yml-travis-配置文件"><a href="#17-travis-yml-travis-配置文件" class="headerlink" title="17. .travis.yml: travis 配置文件"></a>17. <code>.travis.yml</code>: travis 配置文件</h2><p>一个持续集成服务。</p><p>详细信息参考 <a href="https://www.travis-ci.org/" target="_blank" rel="noopener">https://www.travis-ci.org/</a>。</p><h2 id="18-appveyor-yml-appveyor-配置文件"><a href="#18-appveyor-yml-appveyor-配置文件" class="headerlink" title="18. appveyor.yml: appveyor 配置文件"></a>18. <code>appveyor.yml</code>: appveyor 配置文件</h2><p>又一个持续集成服务。</p><p>详细信息参考 <a href="https://www.appveyor.com/" target="_blank" rel="noopener">https://www.appveyor.com/</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一般新开发一个项目时，我们会首先搭建好一个脚手架，然后才会开始写代码。搭建脚手架可以用 &lt;a href=&quot;https://github.com/facebook/create-react-app&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;create-react-app&lt;/a&gt;、&lt;a href=&quot;https://github.com/vuejs/vue-cli&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vue-cli&lt;/a&gt;、&lt;a href=&quot;http://yeoman.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;yeoman&lt;/a&gt; 等命令行工具，也可以直接用 &lt;a href=&quot;https://github.com/h5bp/html5-boilerplate&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;html5-boilerplate&lt;/a&gt;、&lt;a href=&quot;https://github.com/react-boilerplate/react-boilerplate&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;react-boilerplate&lt;/a&gt;、&lt;a href=&quot;https://github.com/sahat/hackathon-starter&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hackathon-starter&lt;/a&gt; 等模板，如果这些都不能满足你的个性化需求，可以尝试搭建自己的前端脚手架。&lt;/p&gt;
&lt;p&gt;一般来说，脚手架包括目录结构定义、必要的项目配置文件与工具配置文件、工具与命令。&lt;/p&gt;
&lt;p&gt;一个基本的脚手架：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;|-- &amp;#x2F;                              项目根目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    |-- src&amp;#x2F;                       源代码目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    |-- package.json               npm 项目文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    |-- README.md                  项目说明文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    |-- CHANGELOG.md               版本更新记录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    |-- .gitignore                 git 忽略配置文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    |-- .editorconfig              编辑器配置文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    |-- .npmrc                     npm 配置文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    |-- .npmignore                 npm 忽略配置文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    |-- .eslintrc                  eslint 配置文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    |-- .eslintignore              eslint 忽略配置文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    |-- .stylelintrc               stylelint 配置文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    |-- .stylelintignore           stylelint 忽略配置文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    |-- .prettierrc                prettier 配置文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    |-- .prettierignore            prettier 忽略配置文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    |-- .babelrc                   babel 配置文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    |-- webpack.config.js          webpack 配置文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    |-- rollup.config.js           rollup 配置文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    |-- gulpfile.js                gulp 配置文件&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="前端进阶" scheme="http://www.barebear.cn/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="前端" scheme="http://www.barebear.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>git安装</title>
    <link href="http://www.barebear.cn/git/install/"/>
    <id>http://www.barebear.cn/git/install/</id>
    <published>2020-02-20T12:42:56.000Z</published>
    <updated>2020-02-20T13:20:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MAC"><a href="#MAC" class="headerlink" title="MAC"></a>MAC</h2><p>MAC可以使用第三方包管理器 HomeBrew</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure><p>开始安装git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install git</span><br></pre></td></tr></table></figure><p>Linux 可以用自带的yum</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install git</span><br></pre></td></tr></table></figure><p>window<br><a href="https://git-scm.com/" target="_blank" rel="noopener">下载地址</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MAC&quot;&gt;&lt;a href=&quot;#MAC&quot; class=&quot;headerlink&quot; title=&quot;MAC&quot;&gt;&lt;/a&gt;MAC&lt;/h2&gt;&lt;p&gt;MAC可以使用第三方包管理器 HomeBrew&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;
      
    
    </summary>
    
    
      <category term="周边" scheme="http://www.barebear.cn/categories/%E5%91%A8%E8%BE%B9/"/>
    
    
      <category term="git" scheme="http://www.barebear.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>前端开发规范</title>
    <link href="http://www.barebear.cn/web-advance/standard/"/>
    <id>http://www.barebear.cn/web-advance/standard/</id>
    <published>2020-02-20T12:41:56.000Z</published>
    <updated>2020-02-20T13:25:19.000Z</updated>
    
    <content type="html"><![CDATA[<p class="warning">  <b>敲黑板</b>：文档中命令行未备注则默认是linux系统</p><a id="more"></a><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h4 id="安装NodeJs"><a href="#安装NodeJs" class="headerlink" title="安装NodeJs"></a>安装NodeJs</h4><p class="tip">  建议 Node.js 版本在 8.0.0 以上</p><p>参考：<a href="/node/install">Node安装</a></p><h4 id="安装GIT"><a href="#安装GIT" class="headerlink" title="安装GIT"></a>安装GIT</h4><p>参考：<a href="/git/install">git安装</a></p><p>项目根目录下配置<code>.gitignore</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">*.log</span><br><span class="line">tmp&#x2F;</span><br><span class="line">node_modules&#x2F;</span><br><span class="line">dist&#x2F;</span><br><span class="line">npm-debug.log*</span><br><span class="line">yarn-debug.log*</span><br><span class="line">yarn-error.log*</span><br><span class="line">package-lock.json</span><br><span class="line">yarn.lock</span><br><span class="line"></span><br><span class="line"># Editor directories and files</span><br><span class="line">.idea</span><br><span class="line">.vscode</span><br><span class="line">*.suo</span><br><span class="line">*.ntvs*</span><br><span class="line">*.njsproj</span><br><span class="line">*.sln</span><br></pre></td></tr></table></figure><h4 id="配置NPM"><a href="#配置NPM" class="headerlink" title="配置NPM"></a>配置NPM</h4><p>npm最容易产生的就是网络问题,我们可以在每次npm下载的时候指定registry，比如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p><a href="https://npm.taobao.org/" target="_blank" rel="noopener">淘宝npm</a></p><h4 id="推荐IDE"><a href="#推荐IDE" class="headerlink" title="推荐IDE"></a>推荐IDE</h4><h5 id="Visual-Studio（开源免费）"><a href="#Visual-Studio（开源免费）" class="headerlink" title="Visual Studio（开源免费）"></a>Visual Studio（开源免费）</h5><p><a href="https://code.visualstudio.com/Download" target="_blank" rel="noopener">下载地址</a></p><p>统一编辑器格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># http:&#x2F;&#x2F;editorconfig.org</span><br><span class="line">root &#x3D; true</span><br><span class="line"></span><br><span class="line">[*]</span><br><span class="line">charset &#x3D; utf-8</span><br><span class="line">indent_style &#x3D; space</span><br><span class="line">indent_size &#x3D; 4</span><br><span class="line">end_of_line &#x3D; lf</span><br><span class="line">insert_final_newline &#x3D; true</span><br><span class="line">trim_trailing_whitespace &#x3D; true</span><br><span class="line"></span><br><span class="line">[*.md]</span><br><span class="line">insert_final_newline &#x3D; false</span><br><span class="line">trim_trailing_whitespace &#x3D; false</span><br></pre></td></tr></table></figure><blockquote><p>项目根目录下新增文件<code>.editorconfig</code></p></blockquote><h2 id="开发规范"><a href="#开发规范" class="headerlink" title="开发规范"></a>开发规范</h2><h4 id="基本规范"><a href="#基本规范" class="headerlink" title="基本规范"></a>基本规范</h4><ul><li>所有文件的编码格式统一为<code>UTF-8</code></li><li>换行格式为<code>LF</code></li><li><code>tag</code>转为<code>space</code>，默认间隔4个空格</li></ul><h4 id="GIT"><a href="#GIT" class="headerlink" title="GIT"></a>GIT</h4><h6 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h6><ul><li>分支功能命名使用snake case命名法，即下划线命名</li><li>分支类型包括：feature、bugfix、refactor三种类型，即新功能开发、bug修复和代码重构</li><li>分支版本命名规则：比如：ops_v_1_1_0_feature_oeprator</li><li>Tag包括3位版本，前缀使用v。比如v1.2.31。核心基础库或者大版本发布使用第一位,新功能开发使用第2位版本号，bug修复使用第3位版本号</li></ul><h6 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h6><p>每次提交，Commit message 都包括三个部分：header，body 和 footer。<br>其中，header 是必需的，body 和 footer可以省略。不管是哪一个部分，任何一行都不得超过72个字符（或100个字符）。这是为了避免自动换行影响美观。</p><blockquote><p>Header部分只有一行，包括三个字段：type（必需）、scope（可选）和subject（必需）。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class="line">&lt;BLANK LINE&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;BLANK LINE&gt;</span><br><span class="line">&lt;footer&gt;</span><br></pre></td></tr></table></figure><p>type代表某次提交的类型，比如是修复一个bug还是增加一个新的feature。所有的type类型如下</p><ul><li>feat： 新增feature</li><li>fix: 修复bug</li><li>docs: 仅仅修改了文档，比如README, CHANGELOG, CONTRIBUTE等等</li><li>style: 仅仅修改了空格、格式缩进、都好等等，不改变代码逻辑</li><li>refactor: 代码重构，没有加新功能或者修复bug</li><li>perf: 优化相关，比如提升性能、体验</li><li>test: 测试用例，包括单元测试、集成测试等</li><li>chore: 改变构建流程、或者增加依赖库、工具等</li><li>revert: 回滚到上一个版本</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 标题行：50个字符以内，描述主要变更内容</span><br><span class="line">#</span><br><span class="line"># 主体内容：更详细的说明文本，建议72个字符以内。 需要描述的信息包括:</span><br><span class="line">#</span><br><span class="line"># * 为什么这个变更是必须的? 它可能是用来修复一个bug，增加一个feature，提升性能、可靠性、稳定性等等</span><br><span class="line"># * 他如何解决这个问题? 具体描述解决问题的步骤</span><br><span class="line"># * 是否存在副作用、风险? </span><br><span class="line">#</span><br><span class="line"># 尾部：如果需要的化可以添加一个链接到issue地址或者其它文档，或者关闭某个issue。</span><br></pre></td></tr></table></figure><blockquote><p>参考<a href="https://github.com/commitizen/cz-cli" target="_blank" rel="noopener">Commitizen</a>来添加提交消息格式。</p></blockquote><h6 id="生成-Change-log"><a href="#生成-Change-log" class="headerlink" title="生成 Change log"></a>生成 Change log</h6><p>如果你的所有 Commit 都符合 Angular 格式，那么发布新版本时， Change log 就可以用脚本自动生成。生成的文档包括以下三个部分：</p><ul><li>New features</li><li>Bug fixes</li><li>Breaking changes</li></ul><p>每个部分都会罗列相关的 commit ，并且有指向这些 commit 的链接。当然，生成的文档允许手动修改，所以发布前，你还可以添加其他内容。</p><p><a href="https://github.com/conventional-changelog/conventional-changelog" target="_blank" rel="noopener">conventional-changelog</a> 就是生成 Change log 的工具，运行下面的命令即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g conventional-changelog-cli</span><br><span class="line">$ <span class="built_in">cd</span> my-project</span><br><span class="line">$ conventional-changelog -p angular -i CHANGELOG.md -w</span><br></pre></td></tr></table></figure><h4 id="JAVASCRIPT"><a href="#JAVASCRIPT" class="headerlink" title="JAVASCRIPT"></a>JAVASCRIPT</h4><p>遵循eslint规范</p><blockquote><p>项目根目录新增<code>.eslintrc.js</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  root: <span class="literal">true</span>,</span><br><span class="line">  parser: <span class="string">'babel-eslint'</span>,</span><br><span class="line">  parserOptions: &#123;</span><br><span class="line">    sourceType: <span class="string">'module'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  env: &#123;</span><br><span class="line">    browser: <span class="literal">true</span>,</span><br><span class="line">    node: <span class="literal">true</span>,</span><br><span class="line">    es6: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  extends: <span class="string">'eslint:recommended'</span>,</span><br><span class="line">  <span class="comment">// required to lint *.vue files</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="string">'html'</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// check if imports actually resolve</span></span><br><span class="line">  <span class="string">'settings'</span>: &#123;</span><br><span class="line">    <span class="string">'import/resolver'</span>: &#123;</span><br><span class="line">      <span class="string">'webpack'</span>: &#123;</span><br><span class="line">        <span class="string">'config'</span>: <span class="string">'build/webpack.base.conf.js'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// add your custom rules here</span></span><br><span class="line">  <span class="comment">//it is base on https://github.com/vuejs/eslint-config-vue</span></span><br><span class="line">  rules: &#123;</span><br><span class="line">    <span class="string">'accessor-pairs'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'arrow-spacing'</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">      <span class="string">'before'</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">'after'</span>: <span class="literal">true</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">'block-spacing'</span>: [<span class="number">2</span>, <span class="string">'always'</span>],</span><br><span class="line">    <span class="string">'brace-style'</span>: [<span class="number">2</span>, <span class="string">'1tbs'</span>, &#123;</span><br><span class="line">      <span class="string">'allowSingleLine'</span>: <span class="literal">true</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">'camelcase'</span>: [<span class="number">0</span>, &#123;</span><br><span class="line">      <span class="string">'properties'</span>: <span class="string">'always'</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">'comma-dangle'</span>: [<span class="number">2</span>, <span class="string">'never'</span>],</span><br><span class="line">    <span class="string">'comma-spacing'</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">      <span class="string">'before'</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">'after'</span>: <span class="literal">true</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">'comma-style'</span>: [<span class="number">2</span>, <span class="string">'last'</span>],</span><br><span class="line">    <span class="string">'constructor-super'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'curly'</span>: [<span class="number">2</span>, <span class="string">'multi-line'</span>],</span><br><span class="line">    <span class="string">'dot-location'</span>: [<span class="number">2</span>, <span class="string">'property'</span>],</span><br><span class="line">    <span class="string">'eol-last'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'eqeqeq'</span>: [<span class="number">2</span>, <span class="string">'allow-null'</span>],</span><br><span class="line">    <span class="string">'generator-star-spacing'</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">      <span class="string">'before'</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">'after'</span>: <span class="literal">true</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">'handle-callback-err'</span>: [<span class="number">2</span>, <span class="string">'^(err|error)$'</span>],</span><br><span class="line">    <span class="string">'indent'</span>: [<span class="number">2</span>, <span class="number">4</span>, &#123;</span><br><span class="line">      <span class="string">'SwitchCase'</span>: <span class="number">1</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">'jsx-quotes'</span>: [<span class="number">2</span>, <span class="string">'prefer-single'</span>],</span><br><span class="line">    <span class="string">'key-spacing'</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">      <span class="string">'beforeColon'</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">'afterColon'</span>: <span class="literal">true</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">'keyword-spacing'</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">      <span class="string">'before'</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">'after'</span>: <span class="literal">true</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">'new-cap'</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">      <span class="string">'newIsCap'</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">'capIsNew'</span>: <span class="literal">false</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">'new-parens'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-array-constructor'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-caller'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-console'</span>: <span class="string">'off'</span>,</span><br><span class="line">    <span class="string">'no-class-assign'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-cond-assign'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-const-assign'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-control-regex'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-delete-var'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-dupe-args'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-dupe-class-members'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-dupe-keys'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-duplicate-case'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-empty-character-class'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-empty-pattern'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-eval'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-ex-assign'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-extend-native'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-extra-bind'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-extra-boolean-cast'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-extra-parens'</span>: [<span class="number">2</span>, <span class="string">'functions'</span>],</span><br><span class="line">    <span class="string">'no-fallthrough'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-floating-decimal'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-func-assign'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-implied-eval'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-inner-declarations'</span>: [<span class="number">2</span>, <span class="string">'functions'</span>],</span><br><span class="line">    <span class="string">'no-invalid-regexp'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-irregular-whitespace'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-iterator'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-label-var'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-labels'</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">      <span class="string">'allowLoop'</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">'allowSwitch'</span>: <span class="literal">false</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">'no-lone-blocks'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-mixed-spaces-and-tabs'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-multi-spaces'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-multi-str'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-multiple-empty-lines'</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">      <span class="string">'max'</span>: <span class="number">1</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">'no-native-reassign'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-negated-in-lhs'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-new-object'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-new-require'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-new-symbol'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-new-wrappers'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-obj-calls'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-octal'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-octal-escape'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-path-concat'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-proto'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-redeclare'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'no-regex-spaces'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-return-assign'</span>: [<span class="number">2</span>, <span class="string">'except-parens'</span>],</span><br><span class="line">    <span class="string">'no-self-assign'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-self-compare'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-sequences'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-shadow-restricted-names'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-spaced-func'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-sparse-arrays'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-this-before-super'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-throw-literal'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-trailing-spaces'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-undef'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-undef-init'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-unexpected-multiline'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-unmodified-loop-condition'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-unneeded-ternary'</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">      <span class="string">'defaultAssignment'</span>: <span class="literal">false</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">'no-unreachable'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-unsafe-finally'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-unused-vars'</span>: [<span class="number">1</span>, &#123;</span><br><span class="line">      <span class="string">'vars'</span>: <span class="string">'all'</span>,</span><br><span class="line">      <span class="string">'args'</span>: <span class="string">'none'</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">'no-useless-call'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-useless-computed-key'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-useless-constructor'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-useless-escape'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">'no-whitespace-before-property'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-with'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'one-var'</span>: [<span class="number">1</span>, &#123;</span><br><span class="line">      <span class="string">'initialized'</span>: <span class="string">'never'</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">'operator-linebreak'</span>: [<span class="number">2</span>, <span class="string">'after'</span>, &#123;</span><br><span class="line">      <span class="string">'overrides'</span>: &#123;</span><br><span class="line">        <span class="string">'?'</span>: <span class="string">'before'</span>,</span><br><span class="line">        <span class="string">':'</span>: <span class="string">'before'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">'padded-blocks'</span>: [<span class="number">2</span>, <span class="string">'never'</span>],</span><br><span class="line">    <span class="string">'quotes'</span>: [<span class="number">2</span>, <span class="string">'single'</span>, &#123;</span><br><span class="line">      <span class="string">'avoidEscape'</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">'allowTemplateLiterals'</span>: <span class="literal">true</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">'semi'</span>: [<span class="number">1</span>, <span class="string">'always'</span>],</span><br><span class="line">    <span class="string">'semi-spacing'</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">      <span class="string">'before'</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">'after'</span>: <span class="literal">true</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">'space-before-blocks'</span>: [<span class="number">2</span>, <span class="string">'always'</span>],</span><br><span class="line">    <span class="string">'space-before-function-paren'</span>: [<span class="number">2</span>, <span class="string">'never'</span>],</span><br><span class="line">    <span class="string">'space-in-parens'</span>: [<span class="number">2</span>, <span class="string">'never'</span>],</span><br><span class="line">    <span class="string">'space-infix-ops'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'space-unary-ops'</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">      <span class="string">'words'</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">'nonwords'</span>: <span class="literal">false</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">'spaced-comment'</span>: [<span class="number">1</span>, <span class="string">'always'</span>, &#123;</span><br><span class="line">      <span class="string">'markers'</span>: [<span class="string">'global'</span>, <span class="string">'globals'</span>, <span class="string">'eslint'</span>, <span class="string">'eslint-disable'</span>, <span class="string">'*package'</span>, <span class="string">'!'</span>, <span class="string">','</span>]</span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">'template-curly-spacing'</span>: [<span class="number">2</span>, <span class="string">'never'</span>],</span><br><span class="line">    <span class="string">'use-isnan'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'valid-typeof'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'wrap-iife'</span>: [<span class="number">2</span>, <span class="string">'any'</span>],</span><br><span class="line">    <span class="string">'yield-star-spacing'</span>: [<span class="number">2</span>, <span class="string">'both'</span>],</span><br><span class="line">    <span class="string">'yoda'</span>: [<span class="number">2</span>, <span class="string">'never'</span>],</span><br><span class="line">    <span class="string">'prefer-const'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'no-debugger'</span>: process.env.NODE_ENV === <span class="string">'production'</span> ? <span class="number">2</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="string">'object-curly-spacing'</span>: [<span class="number">1</span>, <span class="string">'always'</span>, &#123;</span><br><span class="line">      objectsInObjects: <span class="literal">false</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">'array-bracket-spacing'</span>: [<span class="number">2</span>, <span class="string">'never'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>项目根目录新增<code>.eslintignore</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dist</span><br></pre></td></tr></table></figure><h4 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h4><h6 id="尽量使用类选择器，放弃ID选择器"><a href="#尽量使用类选择器，放弃ID选择器" class="headerlink" title="尽量使用类选择器，放弃ID选择器"></a>尽量使用类选择器，放弃ID选择器</h6><p>ID在一个页面中的唯一性导致了如果以ID为选择器来写CSS，就无法重用。</p><h6 id="分类的命名方法：使用单个字母-”-“为前缀"><a href="#分类的命名方法：使用单个字母-”-“为前缀" class="headerlink" title="分类的命名方法：使用单个字母+”-“为前缀"></a>分类的命名方法：使用单个字母+”-“为前缀</h6><p>布局（grid）（.g-）；模块（module）（.m-）；元件（unit）（.u-）；功能（function）（.f-）；皮肤（skin）（.s-）；状态（.z-）。</p><blockquote><p>注：在你样式中的选择器总是要以上面前五类开头，然后在里面使用后代选择器。</p></blockquote><p>　　如果这五类不能满足你的需求，你可以另外定义一个或多个大类，但必须符合单个字母+”-“为前缀的命名规则，即 .x- 的格式。</p><h6 id="后代选择器命名"><a href="#后代选择器命名" class="headerlink" title="后代选择器命名"></a>后代选择器命名</h6><ul><li>约定不以单个字母+”-“为前缀且长度大于等于2的类选择器为后代选择器，如：.item为m-list模块里的每一个项，.text为m-list模块里的文本部分：.m-list .item{}  .m-list .text{}。</li><li>一个语义化的标签也可以是后代选择器，比如：.m-list li{}。</li><li>不允许单个字母的类选择器出现，原因详见下面的“模块和元件的后代选择器的扩展类”。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 这里的.itm和.cnt只在.m-list中有效 */</span></span><br><span class="line"><span class="selector-class">.m-list</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-class">.m-list</span> <span class="selector-class">.itm</span>&#123;<span class="attribute">margin</span>:<span class="number">1px</span>;<span class="attribute">padding</span>:<span class="number">1px</span>;&#125;</span><br><span class="line"><span class="selector-class">.m-list</span> <span class="selector-class">.cnt</span>&#123;<span class="attribute">margin-left</span>:<span class="number">100px</span>;&#125;</span><br><span class="line"><span class="comment">/* 这里的.cnt和.num只在.m-page中有效 */</span></span><br><span class="line"><span class="selector-class">.m-page</span>&#123;<span class="attribute">height</span>:<span class="number">20px</span>;&#125;</span><br><span class="line"><span class="selector-class">.m-page</span> <span class="selector-class">.cnt</span>&#123;<span class="attribute">text-align</span>:center;&#125;</span><br><span class="line"><span class="selector-class">.m-page</span> <span class="selector-class">.num</span>&#123;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ddd</span>;&#125;</span><br></pre></td></tr></table></figure><h6 id="命名应简约而不失语义"><a href="#命名应简约而不失语义" class="headerlink" title="命名应简约而不失语义"></a>命名应简约而不失语义</h6><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 反对：表现化的或没有语义的命名 */</span></span><br><span class="line"><span class="selector-class">.m-abc</span> <span class="selector-class">.green2</span>&#123;&#125;</span><br><span class="line"><span class="selector-class">.g-left2</span>&#123;&#125;</span><br><span class="line"><span class="comment">/* 推荐：使用有语义的简短的命名 */</span></span><br><span class="line"><span class="selector-class">.m-list</span> <span class="selector-class">.wrap2</span>&#123;&#125;</span><br><span class="line"><span class="selector-class">.g-side2</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h6 id="相同语义的不同类命名"><a href="#相同语义的不同类命名" class="headerlink" title="相同语义的不同类命名"></a>相同语义的不同类命名</h6><p>方法：直接加数字或字母区分即可（如：.m-list2、.m-list3、.m-list-news、.m-list-banner等，都是列表模块，但是是完全不一样的模块）。</p><p>其他举例：.f-fw0、.f-fw1、.s-fc0、.s-fc1、.m-logo2、.m-logo3、u-btn、u-btn2等等。</p><h6 id="模块和元件的扩展类的命名方法"><a href="#模块和元件的扩展类的命名方法" class="headerlink" title="模块和元件的扩展类的命名方法"></a>模块和元件的扩展类的命名方法</h6><p>当A、B、C、…它们类型相同且外形相似区别不大，那么就以它们中出现率最高的做成基类，其他做成基类的扩展。</p><p>方法：+“-”+数字或字母（如：.m-list的扩展类为.m-list-1、.m-list-2等）。<br>补充：基类自身可以独立使用（如：class=”m-list”即可），扩展类必须基于基类使用（如：class=”m-list m-list-2”）。</p><h6 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h6><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 这是某个模块 */</span></span><br><span class="line"><span class="selector-class">.m-nav</span>&#123;&#125;<span class="comment">/* 模块容器 */</span></span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-tag">li</span>,<span class="selector-class">.m-nav</span> <span class="selector-tag">a</span>&#123;&#125;<span class="comment">/* 先共性  优化组合 */</span></span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-tag">li</span>&#123;&#125;<span class="comment">/* 后个性  语义化标签选择器 */</span></span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-tag">a</span>&#123;&#125;<span class="comment">/* 后个性中的共性 按结构顺序 */</span></span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-tag">a</span><span class="selector-class">.a1</span>&#123;&#125;<span class="comment">/* 后个性中的个性 */</span></span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-tag">a</span><span class="selector-class">.a2</span>&#123;&#125;<span class="comment">/* 后个性中的个性 */</span></span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-class">.z-crt</span> <span class="selector-tag">a</span>&#123;&#125;<span class="comment">/* 交互状态变化 */</span></span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-class">.z-crt</span> <span class="selector-tag">a</span><span class="selector-class">.a1</span>&#123;&#125;</span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-class">.z-crt</span> <span class="selector-tag">a</span><span class="selector-class">.a2</span>&#123;&#125;</span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-class">.btn</span>&#123;&#125;<span class="comment">/* 典型后代选择器 */</span></span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-class">.btn-1</span>&#123;&#125;<span class="comment">/* 典型后代选择器扩展 */</span></span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-class">.btn-dis</span>&#123;&#125;<span class="comment">/* 典型后代选择器扩展（状态） */</span></span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-class">.btn</span><span class="selector-class">.z-dis</span>&#123;&#125;<span class="comment">/* 作用同上，请二选一（如果可以不兼容IE6时使用） */</span></span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-class">.m-sch</span>&#123;&#125;<span class="comment">/* 控制内部其他模块位置 */</span></span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-class">.u-sel</span>&#123;&#125;<span class="comment">/* 控制内部其他元件位置 */</span></span><br><span class="line"><span class="selector-class">.m-nav-1</span>&#123;&#125;<span class="comment">/* 模块扩展 */</span></span><br><span class="line"><span class="selector-class">.m-nav-1</span> <span class="selector-tag">li</span>&#123;&#125;</span><br><span class="line"><span class="selector-class">.m-nav-dis</span>&#123;&#125;<span class="comment">/* 模块扩展（状态） */</span></span><br><span class="line"><span class="selector-class">.m-nav</span><span class="selector-class">.z-dis</span>&#123;&#125;<span class="comment">/* 作用同上，请二选一（如果可以不兼容IE6时使用） */</span></span><br></pre></td></tr></table></figure><h6 id="统一语义理解和命名"><a href="#统一语义理解和命名" class="headerlink" title="统一语义理解和命名"></a>统一语义理解和命名</h6><p>布局（.g-）</p><table><thead><tr><th>语义</th><th>命名</th></tr></thead><tbody><tr><td>文档</td><td>doc</td></tr><tr><td>头部</td><td>head</td></tr><tr><td>主体</td><td>body</td></tr><tr><td>尾部</td><td>foot</td></tr><tr><td>主栏</td><td>main</td></tr><tr><td>主栏子容器</td><td>mainc</td></tr><tr><td>侧栏</td><td>side</td></tr><tr><td>侧栏主容器</td><td>sidec</td></tr><tr><td>盒容器</td><td>wrap/box</td></tr></tbody></table><p>模块（.m-）、元件（.u-）</p><table><thead><tr><th>语义</th><th>命名</th></tr></thead><tbody><tr><td>导航</td><td>nav</td></tr><tr><td>子导航</td><td>subnav</td></tr><tr><td>面包屑</td><td>crumb</td></tr><tr><td>菜单</td><td>menu</td></tr><tr><td>选项卡</td><td>tag</td></tr><tr><td>标题区</td><td>headline</td></tr><tr><td>内容区</td><td>content</td></tr><tr><td>列表</td><td>list</td></tr><tr><td>表格</td><td>table</td></tr><tr><td>表单</td><td>form</td></tr><tr><td>热点</td><td>hot</td></tr><tr><td>排行</td><td>top</td></tr><tr><td>登录</td><td>login</td></tr><tr><td>标志</td><td>logo</td></tr><tr><td>广告</td><td>advertise</td></tr><tr><td>搜索</td><td>search</td></tr><tr><td>幻灯</td><td>slide</td></tr><tr><td>提示</td><td>tips</td></tr><tr><td>帮助</td><td>help</td></tr><tr><td>新闻</td><td>news</td></tr><tr><td>下载</td><td>download</td></tr><tr><td>注册</td><td>regist</td></tr><tr><td>投票</td><td>vote</td></tr><tr><td>版权</td><td>copyright</td></tr><tr><td>结果</td><td>result</td></tr><tr><td>按钮</td><td>button</td></tr><tr><td>输入</td><td>input</td></tr></tbody></table><h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><ul><li>世界上最好的语言 <code>JavaScript</code></li><li>啥都能做的前端构建工具 <a href="https://webpack.js.org/" target="_blank" rel="noopener">Webpack</a></li><li>简单好用的文档展示工具 <a href="https://v3.docute.org/" target="_blank" rel="noopener">Docute</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;warning&quot;&gt;
  &lt;b&gt;敲黑板&lt;/b&gt;：文档中命令行未备注则默认是linux系统
&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端进阶" scheme="http://www.barebear.cn/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="前端" scheme="http://www.barebear.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>前后端分离、web 与 static 服务器分离</title>
    <link href="http://www.barebear.cn/web-advance/1/"/>
    <id>http://www.barebear.cn/web-advance/1/</id>
    <published>2020-02-20T12:40:56.000Z</published>
    <updated>2020-02-20T12:49:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-为什么需要-“前后端分离、web-与-static-服务器分离”"><a href="#1-为什么需要-“前后端分离、web-与-static-服务器分离”" class="headerlink" title="1. 为什么需要 “前后端分离、web 与 static 服务器分离”"></a>1. 为什么需要 “前后端分离、web 与 static 服务器分离”</h2><p>web 前端的发展历史大致可以分为两个阶段：<code>node</code> 之前与 <code>node</code> 之后。在 <a href="https://github.com/nodejs/node" target="_blank" rel="noopener">nodejs</a> 出现之前，前端的发展一直比较缓慢，主要是因为：</p><a id="more"></a><ul><li><code>html/css/js</code> 从设计之初开始，都只为浏览器服务，并且在整个 web 程序中，是以后端为主，前端为辅，前端需要配合不同的后端做出调整（如不同后端语言的模板），因此前端程序往往是与后端程序耦合在一起的；</li><li>开发、调试、运行都始终摆脱不了浏览器，并且没有多少可选的工具（如 combo，都是由后端语言在服务器端实现的），不能自动化、工程化的构建前端的代码；</li><li>由于浏览器的运行方式，前端代码一直不能有效的做到模块化、组件化，项目也无法版本化管理，项目间也不能很好的共享代码；</li><li>浏览器运行速度低下，也是早期前端发展的一大障碍，但 <a href="https://chromium.googlesource.com/" target="_blank" rel="noopener">chromium</a> 项目的出现，让前端的运行架上了高铁的速度。</li></ul><p>基于以上的原因，前端一直不能很好的开发大型应用，所以在 web 程序中，前端一直处于配角的角色。在 <a href="https://github.com/nodejs/node" target="_blank" rel="noopener">nodejs</a> 出现之后，前端的发展迎来了质的飞跃，带来了我们当时无法想象的便利与潜力。</p><ul><li><code>node</code> 拓展了 <code>javascript</code> 的运行环境，并且能够开发服务器端程序，这让前端的开发和运行摆脱对浏览器和后端语言的依赖，让它们成为了可选项；</li><li><code>node</code> 使 <code>javascript</code> 拥有了操作本地文件、IO 等权限，于是前端开发人员便可编写各类工具，前端便可做到自动化和工程化；</li><li>再结合 <code>npm</code>，前端代码的模块化、组件化，项目版本化，项目间共享代码也就不是问题了。</li></ul><p><a href="https://github.com/nodejs/node" target="_blank" rel="noopener">nodejs</a> 出现了之后，又陆续出现了扩展前端运行领域的工具，如</p><ul><li><a href="https://github.com/electron/electron" target="_blank" rel="noopener">electron</a>, <a href="https://github.com/nwjs/nw.js" target="_blank" rel="noopener">nw.js</a>: 让前端可以开发桌面软件；</li><li><a href="https://github.com/facebook/react-native" target="_blank" rel="noopener">react-native</a>: 让前端可以开发原生 app。</li></ul><p>随着 <code>node</code> 的出现与前端的发展，工程化自动构建便成了开发人员的一个基本需求，这便是我要说的 “前后端分离、web 与 static 服务器分离”；</p><h2 id="2-前后端分离"><a href="#2-前后端分离" class="headerlink" title="2. 前后端分离"></a>2. 前后端分离</h2><p>前后端分离，就是让前端与后端解耦，开发和运行都不再耦合在一起。这样，前端开发人员便可更好的掌控自己的代码，对自己的代码进行调试，优化等等。</p><h3 id="2-1-工程分离"><a href="#2-1-工程分离" class="headerlink" title="2.1 工程分离"></a>2.1 工程分离</h3><p>首先是工程的分离，也就是代码的分离。这就是说让原来前后端融合在一起的项目分离开，前端一个项目，后端一个项目。</p><p>以 python 的 <a href="https://github.com/django/django" target="_blank" rel="noopener">django</a> 框架为例：</p><h4 id="融合在一起的示例："><a href="#融合在一起的示例：" class="headerlink" title="融合在一起的示例："></a>融合在一起的示例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">|-- app&#x2F;                     # 应用主目录</span><br><span class="line">    |-- templates&#x2F;           # html 模板目录</span><br><span class="line">        |-- app&#x2F;</span><br><span class="line">            |-- home.html    # 主页html</span><br><span class="line">            |-- login.html   # 登陆页html</span><br><span class="line">            |-- about.html   # 关于页html</span><br><span class="line">            |-- ...</span><br><span class="line">    |-- static&#x2F;              # 静态资源目录</span><br><span class="line">        |-- js&#x2F;              # js资源目录</span><br><span class="line">            |-- lib&#x2F;         # js library 资源目录</span><br><span class="line">            |-- page1&#x2F;       # 页面1 js资源目录</span><br><span class="line">            |-- page2&#x2F;       # 页面2 js资源目录</span><br><span class="line">            |-- ...</span><br><span class="line">        |-- css&#x2F;             # css资源目录</span><br><span class="line">        |-- images&#x2F;           # 图片资源目录</span><br><span class="line">        |-- ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    |-- admin.py             # 配置模型models在django原生后台的管理</span><br><span class="line">    |-- apps.py              # 应用级别的配置</span><br><span class="line">    |-- forms.py             # 表单处理逻辑</span><br><span class="line">    |-- managers.py          # 模型处理逻辑</span><br><span class="line">    |-- models.py            # 模型定义</span><br><span class="line">    |-- urls.py              # 路由设置</span><br><span class="line">    |-- views.py             # 控制层</span><br><span class="line">    |-- tests.py</span><br></pre></td></tr></table></figure><h4 id="分离之后的-django-项目示例："><a href="#分离之后的-django-项目示例：" class="headerlink" title="分离之后的 django 项目示例："></a>分离之后的 <a href="https://github.com/django/django" target="_blank" rel="noopener">django</a> 项目示例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">|-- app&#x2F;                     # 应用主目录</span><br><span class="line">    |-- admin.py             # 配置模型models在django原生后台的管理</span><br><span class="line">    |-- apps.py              # 应用级别的配置</span><br><span class="line">    |-- forms.py             # 表单处理逻辑</span><br><span class="line">    |-- managers.py          # 模型处理逻辑</span><br><span class="line">    |-- models.py            # 模型定义</span><br><span class="line">    |-- urls.py              # 路由设置</span><br><span class="line">    |-- views.py             # 控制层</span><br><span class="line">    |-- tests.py</span><br></pre></td></tr></table></figure><h4 id="分离之后的-web-项目示例（以-lila-构建工具为例）："><a href="#分离之后的-web-项目示例（以-lila-构建工具为例）：" class="headerlink" title="分离之后的 web 项目示例（以 lila 构建工具为例）："></a>分离之后的 web 项目示例（以 <a href="https://github.com/senntyou/lila" target="_blank" rel="noopener">lila</a> 构建工具为例）：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">|-- src&#x2F;</span><br><span class="line">    |-- app&#x2F;</span><br><span class="line">        |-- home&#x2F;            # 主页工作目录</span><br><span class="line">            |-- index.html   # html 入口文件</span><br><span class="line">            |-- index.js     # js 入口文件</span><br><span class="line">            |-- ...</span><br><span class="line">        |-- login&#x2F;           # 登陆页工作目录</span><br><span class="line">        |-- about&#x2F;           # 关于页工作目录</span><br><span class="line">        |-- ...</span><br></pre></td></tr></table></figure><p>本地开发完成后，把构建好的文件传到服务器相应的位置就好了，像上面的例子就需要把 <code>html</code> 文件传到 <code>app/templates</code> 目录下，静态资源文件传到 <code>app/static</code> 目录下。（构建的时候要处理好文件路径引用）</p><h3 id="2-2-数据流分离"><a href="#2-2-数据流分离" class="headerlink" title="2.2 数据流分离"></a>2.2 数据流分离</h3><ul><li>前后端数据交流使用 <code>json</code> 数据格式，并且推荐使用全 <code>ajax</code> 的方式获取数据，不用传统的模板交流或渲染数据，如 <code>java &gt; jsp</code>、<code>php &gt; smarty</code>；</li><li>但有时候为了加快前端响应速度，也可以把 <code>json</code> 数据通过模板返回，但要避免使用后端模板进行逻辑判断渲染。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">var data &#x3D; JSON.parse(&#39;通过后端模板返回的 json 数据&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 使用 js 渲染 data 数据</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-web-与-static-服务器分离"><a href="#3-web-与-static-服务器分离" class="headerlink" title="3. web 与 static 服务器分离"></a>3. web 与 static 服务器分离</h2><ul><li><code>web 服务器</code>：存放运行后端 web 应用的程序，以及前端 <code>html</code> 文件（入口文件）</li><li><code>static 服务器</code>：静态资源服务器，存放前端除 <code>html</code> 文件之外的其他资源文件，包括 <code>js</code>， <code>css</code>， <code>images</code>…</li></ul><p>一般地，还是以 django 框架为例，当前端把代码构建好之后，静态资源传到服务器相应的 <code>static</code> 目录，<code>html</code> 文件传到相应的 <code>templates</code> 目录，启动后端脚本就可运行了。两者不分离主要有以下几个缺点：</p><ul><li>前端构建过程中会产生大量的冗余文件，这对后端程序来说十分不友好，比如后端打包程序备份的时候，就会导致包很大；</li><li>不方便前端开发人员管理线上代码，并且前端人员能够直接接触到后端代码，也不够安全；</li><li>静态资源会占用 web 服务器的资源和带宽，当访问量变大的时候，web 与 static 服务器分离是必然的。</li></ul><p>web 与 static 服务器分离之后，前端开发人员便可无顾虑的备份前端代码，清除冗余代码等等。</p><ul><li>大多数情况下，会有多个项目共用同一个 static 服务器，如此便需要在服务器划分多个目录来存放静态资源文件；</li><li>构建的过程中，构建工具需要保证 <code>html</code> 对 <code>js/css/images...</code> 路径的正确引用，以及 <code>css</code> 对 <code>images...</code> 路径的正确引用，以 <a href="https://github.com/senntyou/lila" target="_blank" rel="noopener">lila</a>为例，需要配置 <code>staticServerUrl</code> 为 <code>http://www.static.com/project1</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-为什么需要-“前后端分离、web-与-static-服务器分离”&quot;&gt;&lt;a href=&quot;#1-为什么需要-“前后端分离、web-与-static-服务器分离”&quot; class=&quot;headerlink&quot; title=&quot;1. 为什么需要 “前后端分离、web 与 static 服务器分离”&quot;&gt;&lt;/a&gt;1. 为什么需要 “前后端分离、web 与 static 服务器分离”&lt;/h2&gt;&lt;p&gt;web 前端的发展历史大致可以分为两个阶段：&lt;code&gt;node&lt;/code&gt; 之前与 &lt;code&gt;node&lt;/code&gt; 之后。在 &lt;a href=&quot;https://github.com/nodejs/node&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;nodejs&lt;/a&gt; 出现之前，前端的发展一直比较缓慢，主要是因为：&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端进阶" scheme="http://www.barebear.cn/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="前端" scheme="http://www.barebear.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
